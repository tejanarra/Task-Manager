{"version":3,"file":"static/js/218.e149a9c8.chunk.js","mappings":"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","sources":["components/ConfirmationModal.js","components/taskItem/ReminderCheckbox.js","components/taskItem/TaskReminders.js","components/taskItem/TaskItem.js","components/TaskList.js","services/api.js","utils/dateUtils.js"],"sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Styles/ConfirmationModal.css\";\n\nconst ConfirmationModal = ({\n  theme,\n  show,\n  title = \"Confirm Action\",\n  message = \"Are you sure you want to proceed?\",\n  onConfirm,\n  onCancel,\n}) => {\n  if (!show) return null;\n\n  return (\n    <div\n      className=\"custom-modal-overlay d-flex align-items-center justify-content-center\"\n      tabIndex=\"-1\"\n      role=\"dialog\"\n      onClick={onCancel}\n    >\n      <div\n        className=\"custom-modal-content\"\n        role=\"document\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"custom-modal-header\">\n          <h5 className=\"modal2-title fw-bold\">{title}</h5>\n          <button\n            type=\"button\"\n            className=\"btn-close\"\n            aria-label=\"Close\"\n            onClick={onCancel}\n          ></button>\n        </div>\n        <div className=\"custom-modal-body\">\n          <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n            {message}\n          </p>\n        </div>\n        <div className=\"custom-modal-footer d-flex justify-content-end gap-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={onCancel}\n          >\n            Cancel\n          </button>\n          <button type=\"button\" className=\"btn sign-in-btn\" onClick={onConfirm}>\n            Confirm\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationModal;\n","import React from \"react\";\n\nconst ReminderCheckbox = ({\n  value,\n  label,\n  checked,\n  onChange,\n  className = \"\",\n  disabled = false,\n}) => (\n  <div className={`d-inline-block ${className}`}>\n    <label\n      className={`reminder-checkbox-label d-inline-flex align-items-center ${\n        disabled ? \"disabled\" : \"\"\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        className=\"form-check-input me-2\"\n        checked={checked}\n        onChange={(e) => !disabled && onChange(e.target.checked)}\n        disabled={disabled}\n        aria-label={`Set reminder for ${label}`}\n        aria-describedby={`reminder-${value}-desc`}\n      />\n      <span id={`reminder-${value}-desc`}>{label}</span>\n    </label>\n  </div>\n);\n\nexport default ReminderCheckbox;\n","import React, { useState } from \"react\";\nimport ReminderCheckbox from \"./ReminderCheckbox\";\nimport { formatDateTimeLocal } from \"../../utils/dateUtils\";\nimport \"./Styles/TaskReminders.css\";\n\nexport const formatHoursLabel = (h) => {\n  if (h < 1) return `${Math.round(h * 60)} min`;\n  if (h < 24)\n    return `${h % 1 === 0 ? h : h.toFixed(1)} hr${h !== 1 ? \"s\" : \"\"}`;\n  const days = h / 24;\n  if (days < 7)\n    return `${days % 1 === 0 ? days : days.toFixed(1)} day${\n      days !== 1 ? \"s\" : \"\"\n    }`;\n  const weeks = days / 7;\n  return `${weeks % 1 === 0 ? weeks : weeks.toFixed(1)} week${\n    weeks !== 1 ? \"s\" : \"\"\n  }`;\n};\n\nconst TaskReminders = ({\n  tempDeadline,\n  tempReminders,\n  setTempReminders,\n  theme,\n  ALL_INTERVALS,\n  formatHoursLabel,\n}) => {\n  const now = new Date();\n  const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n  const diffInHours =\n    deadlineDate && deadlineDate > now\n      ? (deadlineDate - now) / (1000 * 60 * 60)\n      : 0;\n\n  // Helper function to generate daily reminders\n  const generateDailyReminders = () => {\n    const reminders = [];\n    const maxDays = Math.floor(diffInHours / 24);\n\n    for (let day = 1; day <= maxDays; day++) {\n      const hoursBeforeDeadline = day * 24;\n      reminders.push({\n        remindBefore: hoursBeforeDeadline,\n        sent: false,\n        type: \"daily\",\n        dayNumber: day,\n      });\n    }\n    return reminders;\n  };\n\n  // Helper function to generate weekly reminders\n  const generateWeeklyReminders = () => {\n    const reminders = [];\n    const maxWeeks = Math.floor(diffInHours / (24 * 7));\n\n    for (let week = 1; week <= maxWeeks; week++) {\n      const hoursBeforeDeadline = week * 24 * 7;\n      reminders.push({\n        remindBefore: hoursBeforeDeadline,\n        sent: false,\n        type: \"weekly\",\n        weekNumber: week,\n      });\n    }\n    return reminders;\n  };\n\n  // Check if daily reminders are active\n  const hasDailyReminders = tempReminders.some((r) => r.type === \"daily\");\n\n  // Check if weekly reminders are active\n  const hasWeeklyReminders = tempReminders.some((r) => r.type === \"weekly\");\n\n  // Toggle daily reminders\n  const toggleDailyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove any existing daily reminders and add new ones\n        const withoutDaily = prev.filter((r) => r.type !== \"daily\");\n        const dailyReminders = generateDailyReminders();\n        return [...withoutDaily, ...dailyReminders];\n      } else {\n        // Remove all daily reminders\n        return prev.filter((r) => r.type !== \"daily\");\n      }\n    });\n  };\n\n  // Toggle weekly reminders\n  const toggleWeeklyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove any existing weekly reminders and add new ones\n        const withoutWeekly = prev.filter((r) => r.type !== \"weekly\");\n        const weeklyReminders = generateWeeklyReminders();\n        return [...withoutWeekly, ...weeklyReminders];\n      } else {\n        // Remove all weekly reminders\n        return prev.filter((r) => r.type !== \"weekly\");\n      }\n    });\n  };\n\n  // Default intervals (e.g. 1 hr, 1 day, 1 week) - these are one-time reminders\n  const defaultIntervals = ALL_INTERVALS.filter((i) => i.value <= diffInHours);\n\n  // Custom reminders: if added via the datetime-local input, they store a customDate.\n  // Also exclude daily/weekly reminders from this list since they're handled separately\n  const customIntervals = tempReminders\n    .filter(\n      (r) =>\n        !r.type && // Only non-recurring reminders\n        !ALL_INTERVALS.some(\n          (ai) => Math.abs(ai.value - r.remindBefore) < 0.01\n        ) &&\n        r.remindBefore <= diffInHours\n    )\n    .map((r) => {\n      if (r.customDate) {\n        return {\n          value: r.remindBefore,\n          label: new Date(r.customDate).toLocaleString(),\n        };\n      } else if (r.remindBefore > 168 && deadlineDate) {\n        const reminderDate = new Date(\n          deadlineDate.getTime() - r.remindBefore * 3600000\n        );\n        return { value: r.remindBefore, label: reminderDate.toLocaleString() };\n      }\n      return { value: r.remindBefore, label: formatHoursLabel(r.remindBefore) };\n    });\n\n  const toggleReminder = (value, checked) => {\n    setTempReminders((prev) => {\n      const existing = prev.find(\n        (r) => !r.type && Math.abs(r.remindBefore - value) < 0.01\n      );\n      if (checked) {\n        if (!existing) return [...prev, { remindBefore: value, sent: false }];\n        return prev.map((r) =>\n          !r.type && Math.abs(r.remindBefore - value) < 0.01\n            ? { ...r, sent: false }\n            : r\n        );\n      }\n      return prev.filter(\n        (r) => r.type || Math.abs(r.remindBefore - value) >= 0.01\n      );\n    });\n  };\n\n  const [customReminder, setCustomReminder] = useState(\"\");\n  const handleAddCustomReminder = () => {\n    if (!customReminder) return;\n    const selectedDate = new Date(customReminder);\n    if (isNaN(selectedDate)) return;\n    if (!deadlineDate || selectedDate >= deadlineDate) return;\n    const hours = (deadlineDate - selectedDate) / (1000 * 60 * 60);\n    if (hours > 0 && hours <= diffInHours) {\n      setTempReminders((prev) => {\n        if (\n          !prev.some((r) => !r.type && Math.abs(r.remindBefore - hours) < 0.01)\n        ) {\n          return [\n            ...prev,\n            {\n              remindBefore: hours,\n              sent: false,\n              customDate: selectedDate.toISOString(),\n            },\n          ];\n        }\n        return prev;\n      });\n    }\n    setCustomReminder(\"\");\n  };\n\n  // State to control dropdown open/closed\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Calculate how many daily and weekly reminders would be generated\n  const maxDays = Math.floor(diffInHours / 24);\n  const maxWeeks = Math.floor(diffInHours / (24 * 7));\n\n  return (\n    <div className=\"task-reminders-container\">\n      {/* Dropdown Header Bar */}\n      <div className=\"reminders-dropdown\" onClick={() => setIsOpen(!isOpen)}>\n        <div className=\"reminders-dropdown-header\">\n          <h6>Reminders</h6>\n          {isOpen ? (\n            <i className=\"bi bi-chevron-up\"></i>\n          ) : (\n            <i className=\"bi bi-chevron-down\"></i>\n          )}\n        </div>\n      </div>\n\n      {/* Collapsible Content */}\n      {isOpen && (\n        <div className=\"reminders-dropdown-content\">\n          {/* Custom Reminder Section */}\n          <div className=\"custom-reminder-section\">\n            <label className=\"reminder-section-label\">\n              Add Custom Reminder:\n            </label>\n            <div className=\"custom-reminder-input-group\">\n              <input\n                type=\"datetime-local\"\n                value={customReminder}\n                onChange={(e) => setCustomReminder(e.target.value)}\n                min={formatDateTimeLocal(new Date().toISOString())}\n                max={\n                  tempDeadline ? formatDateTimeLocal(tempDeadline) : undefined\n                }\n              />\n              <button\n                className={`btn btn-sm ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-outline-dark\"\n                }`}\n                onClick={handleAddCustomReminder}\n              >\n                Add\n              </button>\n            </div>\n          </div>\n\n          {/* Recurring Reminders Section */}\n          {(maxDays > 0 || maxWeeks > 0) && (\n            <div className=\"recurring-reminders-section\">\n              <label className=\"reminder-section-label\">\n                Recurring Reminders:\n              </label>\n              <div className=\"recurring-options\">\n                {maxDays > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasDailyReminders}\n                      onChange={(e) => toggleDailyReminders(e.target.checked)}\n                      id=\"daily-reminders\"\n                    />\n                    <label htmlFor=\"daily-reminders\">\n                      Every Day ({maxDays} reminder{maxDays !== 1 ? \"s\" : \"\"})\n                    </label>\n                  </div>\n                )}\n                {maxWeeks > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasWeeklyReminders}\n                      onChange={(e) => toggleWeeklyReminders(e.target.checked)}\n                      id=\"weekly-reminders\"\n                    />\n                    <label htmlFor=\"weekly-reminders\">\n                      Every Week ({maxWeeks} reminder{maxWeeks !== 1 ? \"s\" : \"\"}\n                      )\n                    </label>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* One-time Reminders Section */}\n          {defaultIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                One-time Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {defaultIntervals.map((item) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      !r.type && Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = existing ? !existing.sent : false;\n                  return (\n                    <ReminderCheckbox\n                      key={item.value}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Custom One-time Reminders Section */}\n          {customIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                Custom One-time Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {customIntervals.map((item) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      !r.type && Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = existing ? !existing.sent : false;\n                  return (\n                    <ReminderCheckbox\n                      key={item.value}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Show active recurring reminders summary */}\n          {(hasDailyReminders || hasWeeklyReminders) && (\n            <div className=\"active-reminders-summary\">\n              <small>\n                <strong>Active recurring reminders:</strong>\n                {hasDailyReminders &&\n                  ` Daily reminders (${\n                    tempReminders.filter((r) => r.type === \"daily\").length\n                  } total)`}\n                {hasDailyReminders && hasWeeklyReminders && \", \"}\n                {hasWeeklyReminders &&\n                  ` Weekly reminders (${\n                    tempReminders.filter((r) => r.type === \"weekly\").length\n                  } total)`}\n              </small>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskReminders;\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { deleteTask, updateTask } from \"../../services/api\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ConfirmationModal from \"../ConfirmationModal\";\nimport TaskReminders from \"./TaskReminders\";\nimport { formatRelativeTime, formatDateTimeLocal } from \"../../utils/dateUtils\";\nimport \"./Styles/TaskItem.css\";\n\nconst ALL_INTERVALS = [\n  { value: 1, label: \"1 hr\" },\n  { value: 24, label: \"1 day\" },\n  { value: 168, label: \"1 week\" },\n];\n\nfunction formatHoursLabel(h) {\n  if (h < 1) return `${Math.round(h * 60)} min`;\n  if (Number.isInteger(h)) return `${h} hr${h > 1 ? \"s\" : \"\"}`;\n  return `${h} hrs`;\n}\n\nconst TaskItem = ({\n  theme,\n  task,\n  setTasks,\n  isNewTask = false,\n  onSave = () => {},\n  onCancel = () => {},\n}) => {\n  const [isEditing, setIsEditing] = useState(isNewTask);\n  const [tempTitle, setTempTitle] = useState(task.title);\n  const [tempDescription, setTempDescription] = useState(task.description);\n  const [tempStatus, setTempStatus] = useState(task.status);\n  const [tempDeadline, setTempDeadline] = useState(task.deadline || null);\n  const [tempReminders, setTempReminders] = useState(\n    Array.isArray(task.reminders) ? task.reminders : []\n  );\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const cardRef = useRef(null);\n\n  const handleCancel = useCallback(() => {\n    setTempTitle(task.title);\n    setTempDescription(task.description);\n    setTempStatus(task.status);\n    setTempDeadline(task.deadline || null);\n    setTempReminders(Array.isArray(task.reminders) ? task.reminders : []);\n    isNewTask ? onCancel(task.id) : setIsEditing(false);\n  }, [\n    task.title,\n    task.description,\n    task.status,\n    task.deadline,\n    task.reminders,\n    isNewTask,\n    onCancel,\n    task.id,\n  ]);\n\n  useEffect(() => {\n    const handleClickOutside = (e) => {\n      if (isEditing && cardRef.current && !cardRef.current.contains(e.target)) {\n        handleCancel();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [isEditing, handleCancel]);\n\n  const handleSave = async () => {\n    if (!tempTitle.trim() || !tempDescription.trim()) return;\n\n    setIsLoading(true);\n\n    const changed =\n      tempTitle !== task.title ||\n      tempDescription !== task.description ||\n      tempStatus !== task.status ||\n      tempDeadline !== task.deadline ||\n      JSON.stringify(tempReminders) !== JSON.stringify(task.reminders);\n\n    if (!changed && !isNewTask) {\n      setIsEditing(false);\n      setIsLoading(false);\n      return;\n    }\n\n    const now = new Date();\n    const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n    const diffInHours =\n      deadlineDate && deadlineDate > now\n        ? (deadlineDate - now) / (1000 * 60 * 60)\n        : 0;\n\n    // Helper function to regenerate recurring reminders when deadline changes\n    const regenerateRecurringReminders = (reminders) => {\n      const hasDaily = reminders.some((r) => r.type === \"daily\");\n      const hasWeekly = reminders.some((r) => r.type === \"weekly\");\n\n      // Keep non-recurring reminders that are still valid\n      let filteredReminders = reminders.filter(\n        (r) => !r.type && r.remindBefore <= diffInHours\n      );\n\n      // Regenerate daily reminders if they were enabled\n      if (hasDaily && diffInHours > 0) {\n        const maxDays = Math.floor(diffInHours / 24);\n        for (let day = 1; day <= maxDays; day++) {\n          const hoursBeforeDeadline = day * 24;\n          filteredReminders.push({\n            remindBefore: hoursBeforeDeadline,\n            sent: false,\n            type: \"daily\",\n            dayNumber: day,\n          });\n        }\n      }\n\n      // Regenerate weekly reminders if they were enabled\n      if (hasWeekly && diffInHours > 0) {\n        const maxWeeks = Math.floor(diffInHours / (24 * 7));\n        for (let week = 1; week <= maxWeeks; week++) {\n          const hoursBeforeDeadline = week * 24 * 7;\n          filteredReminders.push({\n            remindBefore: hoursBeforeDeadline,\n            sent: false,\n            type: \"weekly\",\n            weekNumber: week,\n          });\n        }\n      }\n\n      return filteredReminders;\n    };\n\n    // Process reminders based on new deadline\n    let finalReminders;\n    if (diffInHours > 0) {\n      // If there's a valid deadline, regenerate recurring reminders\n      finalReminders = regenerateRecurringReminders(tempReminders);\n    } else {\n      // If no deadline or deadline is in the past, remove all reminders\n      finalReminders = [];\n    }\n\n    const updatedTaskData = {\n      title: tempTitle.trim(),\n      description: tempDescription.trim(),\n      status: tempStatus,\n      deadline: tempDeadline ? deadlineDate.toISOString() : null,\n      reminders: finalReminders,\n    };\n\n    try {\n      if (isNewTask) {\n        onSave({ ...task, ...updatedTaskData });\n      } else {\n        const response = await updateTask(task.id, updatedTaskData);\n        setTasks((prev) =>\n          prev.map((t) => (t.id === response.data.id ? response.data : t))\n        );\n        setIsEditing(false);\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = () => setShowDeleteModal(true);\n  const confirmDelete = async () => {\n    setIsLoading(true);\n    try {\n      await deleteTask(task.id);\n      setTasks((prev) => prev.filter((t) => t.id !== task.id));\n      setShowDeleteModal(false);\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    } finally {\n      setIsLoading(false);\n      setShowDeleteModal(false);\n    }\n  };\n\n  const getStripColor = (status) => {\n    switch (status) {\n      case \"completed\":\n        return \"#007a00\";\n      case \"in-progress\":\n        return \"#daa520\";\n      default:\n        return \"#a00000\";\n    }\n  };\n\n  const stripColor = getStripColor(task.status);\n  const isDeadlineInFuture =\n    tempDeadline && new Date(tempDeadline) > new Date();\n\n  // Helper function to get reminder summary for display\n  const getReminderSummary = () => {\n    if (!tempReminders || tempReminders.length === 0) return null;\n\n    const dailyCount = tempReminders.filter((r) => r.type === \"daily\").length;\n    const weeklyCount = tempReminders.filter((r) => r.type === \"weekly\").length;\n    const oneTimeCount = tempReminders.filter((r) => !r.type).length;\n\n    const parts = [];\n    if (dailyCount > 0) parts.push(`Daily (${dailyCount})`);\n    if (weeklyCount > 0) parts.push(`Weekly (${weeklyCount})`);\n    if (oneTimeCount > 0) parts.push(`One-time (${oneTimeCount})`);\n\n    return parts.length > 0 ? parts.join(\", \") : null;\n  };\n\n  const reminderSummary = getReminderSummary();\n\n  return (\n    <>\n      <div\n        ref={cardRef}\n        className={`task-card ${theme === \"dark\" ? \"dark-mode\" : \"\"} ${\n          isLoading ? \"loading\" : \"\"\n        } ${isNewTask ? \"new-task\" : \"\"}`}\n        onClick={() => !isEditing && setIsEditing(true)}\n      >\n        <div\n          className=\"task-strip\"\n          style={{ backgroundColor: stripColor }}\n        ></div>\n\n        <div className=\"task-card-content\">\n          {!isEditing && (\n            <i\n              className={`bi ${\n                task.status === \"completed\"\n                  ? \"bi-check-circle\"\n                  : task.status === \"in-progress\"\n                  ? \"bi-hourglass\"\n                  : \"bi-ban\"\n              } status-icon`}\n              style={{ color: stripColor }}\n            />\n          )}\n\n          {isEditing ? (\n            <div className=\"task-form-grid\">\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={tempTitle}\n                  onChange={(e) => setTempTitle(e.target.value)}\n                  placeholder=\"Enter task title...\"\n                />\n              </div>\n\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Description</label>\n                <textarea\n                  className=\"form-control\"\n                  rows={3}\n                  value={tempDescription}\n                  onChange={(e) => setTempDescription(e.target.value)}\n                  placeholder=\"Enter task description...\"\n                />\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Status</label>\n                <select\n                  className=\"form-select\"\n                  value={tempStatus}\n                  onChange={(e) => setTempStatus(e.target.value)}\n                >\n                  <option value=\"not-started\">Not Started</option>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Deadline</label>\n                <input\n                  type=\"datetime-local\"\n                  className=\"form-control\"\n                  value={tempDeadline ? formatDateTimeLocal(tempDeadline) : \"\"}\n                  onChange={(e) => setTempDeadline(e.target.value)}\n                />\n              </div>\n\n              {isDeadlineInFuture && (\n                <div className=\"task-form-group full-width\">\n                  <TaskReminders\n                    tempDeadline={tempDeadline}\n                    tempReminders={tempReminders}\n                    setTempReminders={setTempReminders}\n                    theme={theme}\n                    ALL_INTERVALS={ALL_INTERVALS}\n                    formatHoursLabel={formatHoursLabel}\n                  />\n                </div>\n              )}\n            </div>\n          ) : (\n            <>\n              <h5 className=\"task-title\" style={{ color: stripColor }}>\n                {tempTitle}\n              </h5>\n              <p className=\"task-description\">{tempDescription}</p>\n            </>\n          )}\n\n          <div className=\"task-metadata\">\n            <div className=\"task-metadata-item\">\n              <strong>Created</strong>\n              <span>{formatRelativeTime(task.createdAt)}</span>\n            </div>\n            <div className=\"task-metadata-item\">\n              <strong>Deadline</strong>\n              <span>\n                {task.deadline\n                  ? formatRelativeTime(task.deadline)\n                  : \"No deadline set\"}\n              </span>\n            </div>\n          </div>\n\n          {isEditing && (\n            <div className=\"task-actions\">\n              {!isNewTask && (\n                <button\n                  className={`btn ${\n                    theme === \"dark\" ? \"btn-outline-danger\" : \"btn-secondary\"\n                  }`}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleDelete();\n                  }}\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Deleting...\" : \"Delete\"}\n                </button>\n              )}\n              <button\n                className={`btn ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-dark\"\n                }`}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleSave();\n                }}\n                disabled={\n                  !tempTitle.trim() || !tempDescription.trim() || isLoading\n                }\n              >\n                {isLoading ? \"Saving...\" : \"Save\"}\n              </button>\n            </div>\n          )}\n\n          {!isEditing && reminderSummary && (\n            <div\n              className=\"reminder-indicator\"\n              title={`Reminders: ${reminderSummary}`}\n            >\n              <i className=\"bi bi-clock\"></i>\n              <small>{reminderSummary}</small>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <ConfirmationModal\n        theme={theme}\n        show={showDeleteModal}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        onConfirm={confirmDelete}\n        onCancel={() => setShowDeleteModal(false)}\n      />\n    </>\n  );\n};\n\nexport default TaskItem;\n","import React, { useState, useEffect } from \"react\";\nimport { fetchTasks, updateTaskPriority, createTask } from \"../services/api\";\nimport { useAuth } from \"../context/AuthContext\";\nimport TaskItem from \"./taskItem/TaskItem\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Styles/TaskList.css\";\n\nconst TaskList = ({ theme }) => {\n  const { user, logout } = useAuth();\n  const [tasks, setTasks] = useState(null);\n  const [newTaskId, setNewTaskId] = useState(null);\n\n  useEffect(() => {\n    const loadTasks = async () => {\n      if (user) {\n        try {\n          const response = await fetchTasks();\n          setTasks(response.data);\n        } catch (error) {\n          console.error(\"Error loading tasks:\", error);\n          if (error.response && error.response.status === 403) {\n            logout();\n          }\n        }\n      }\n    };\n\n    loadTasks();\n  }, [user, logout]);\n\n  const handleDragEnd = async (result) => {\n    const { destination, source } = result;\n    if (!destination || destination.index === source.index) return;\n\n    const reorderedTasks = Array.from(tasks);\n    const [movedTask] = reorderedTasks.splice(source.index, 1);\n    reorderedTasks.splice(destination.index, 0, movedTask);\n\n    const updatedTasksWithPriority = reorderedTasks.map((task, index) => ({\n      ...task,\n      priority: index + 1,\n    }));\n\n    setTasks(updatedTasksWithPriority);\n\n    try {\n      const movedTaskId = movedTask.id;\n      const newPriority = destination.index + 1;\n      await updateTaskPriority(movedTaskId, newPriority);\n    } catch (error) {\n      console.error(\"Error updating task priority:\", error);\n      if (error.response && error.response.status === 403) {\n        logout();\n      }\n    }\n  };\n\n  const handleAddTask = () => {\n    const newTask = {\n      id: `temp-${Date.now()}`,\n      title: \"\",\n      description: \"\",\n      status: \"not-started\",\n      deadline: null,\n      reminders: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      priority: 1,\n    };\n\n    setNewTaskId(newTask.id);\n    setTasks((prev) => [newTask, ...prev]);\n  };\n\n  const handleSaveNewTask = async (task) => {\n    try {\n      const response = await createTask({\n        title: task.title,\n        description: task.description,\n        status: task.status,\n        deadline: task.deadline,\n        priority: tasks.length + 1,\n        reminders: task.reminders,\n      });\n\n      setTasks((prev) =>\n        prev.map((t) => (t.id === task.id ? response.data : t))\n      );\n      setNewTaskId(null);\n    } catch (error) {\n      console.error(\"Error saving new task:\", error);\n      if (error.response && error.response.status === 403) {\n        logout();\n      }\n    }\n  };\n\n  const handleCancelNewTask = (taskId) => {\n    setTasks((prev) => prev.filter((task) => task.id !== taskId));\n    setNewTaskId(null);\n  };\n\n  const renderShimmerLoader = () => (\n    <div className=\"container mt-5\">\n      <div className=\"task-container\">\n        <div className=\"card-body p-3\">\n          <div className=\"d-flex justify-content-between align-items-center mb-3 header-container\">\n            <h2 className=\"card-title mb-0\">Your Tasks</h2>\n          </div>\n          <div className=\"shimmer-list\">\n            {Array.from({ length: 5 }).map((_, index) => (\n              <div key={index} className=\"shimmer-task-item\">\n                <div className=\"shimmer-task-header\"></div>\n                <div className=\"shimmer-task-body\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (!tasks) {\n    return renderShimmerLoader();\n  }\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"task-container\">\n        <div className=\"card-body p-3\">\n          <div className=\"d-flex flex-row justify-content-between align-items-center mb-3 header-container\">\n            <h2 className=\"card-title mb-0\">Your Tasks</h2>\n            {theme === \"dark\" ? (\n              <button\n                className=\"btn btn-outline-light d-flex align-items-center gap-2 add-task-button\"\n                onClick={handleAddTask}\n                aria-label=\"Add a new task\"\n              >\n                New Task\n              </button>\n            ) : (\n              <button\n                className=\"btn btn-outline-dark d-flex align-items-center gap-2 add-task-button\"\n                onClick={handleAddTask}\n                aria-label=\"Add a new task\"\n              >\n                New Task\n              </button>\n            )}\n          </div>\n          {tasks.length === 0 ? (\n            <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n              No tasks available\n            </p>\n          ) : (\n            <DragDropContext onDragEnd={handleDragEnd}>\n              <Droppable droppableId=\"taskList\">\n                {(provided) => (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    className=\"task-list\"\n                  >\n                    {tasks\n                      .sort((a, b) => a.priority - b.priority)\n                      .map((task, index) => (\n                        <Draggable\n                          key={task.id}\n                          draggableId={task.id.toString()}\n                          index={index}\n                        >\n                          {(provided) => (\n                            <div\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              className=\"mb-3\"\n                              style={{\n                                ...provided.draggableProps.style,\n                              }}\n                            >\n                              <TaskItem\n                                theme={theme}\n                                task={task}\n                                setTasks={setTasks}\n                                isNewTask={task.id === newTaskId}\n                                onSave={handleSaveNewTask}\n                                onCancel={handleCancelNewTask}\n                              />\n                            </div>\n                          )}\n                        </Draggable>\n                      ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskList;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n","import { format } from \"date-fns\";\n\nexport const formatRelativeTime = (dateString) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now - date) / 1000);\n  const justNowThreshold = 60;\n  if (diffInSeconds < 0) {\n    const futureDiff = Math.abs(diffInSeconds);\n    if (futureDiff < justNowThreshold) return \"Just now\";\n    if (futureDiff < 60) return `in ${futureDiff} second${futureDiff !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 3600) return `in ${Math.ceil(futureDiff / 60)} minute${Math.ceil(futureDiff / 60) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 86400) return `in ${Math.ceil(futureDiff / 3600)} hour${Math.ceil(futureDiff / 3600) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 604800) return `in ${Math.ceil(futureDiff / 86400)} day${Math.ceil(futureDiff / 86400) !== 1 ? \"s\" : \"\"}`;\n    return format(date, \"MMM dd, yyyy\");\n  } else {\n    if (diffInSeconds < justNowThreshold) return \"Just now\";\n    if (diffInSeconds < 60) return `${diffInSeconds} second${diffInSeconds !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minute${Math.floor(diffInSeconds / 60) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hour${Math.floor(diffInSeconds / 3600) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 604800) {\n      const days = Math.floor(diffInSeconds / 86400);\n      return days === 1 ? \"Yesterday\" : `${days} days ago`;\n    }\n    return format(date, \"MMM dd, yyyy\");\n  }\n};\n\nexport const convertDateToWords = (dateString) => {\n  const [year, month, day] = dateString.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n  if (isNaN(date)) return \"Invalid Date\";\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return date.toLocaleString(\"en-US\", options);\n};\n\nexport const formatDateTimeLocal = (dateString) => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n};"],"names":["_ref","theme","show","title","message","onConfirm","onCancel","_jsx","className","tabIndex","role","onClick","children","_jsxs","e","stopPropagation","type","concat","value","label","checked","onChange","disabled","target","id","tempDeadline","tempReminders","setTempReminders","ALL_INTERVALS","formatHoursLabel","now","Date","deadlineDate","diffInHours","hasDailyReminders","some","r","hasWeeklyReminders","toggleDailyReminders","prev","withoutDaily","filter","dailyReminders","generateDailyReminders","reminders","maxDays","Math","floor","day","hoursBeforeDeadline","push","remindBefore","sent","dayNumber","toggleWeeklyReminders","withoutWeekly","weeklyReminders","generateWeeklyReminders","maxWeeks","week","weekNumber","defaultIntervals","i","customIntervals","ai","abs","map","customDate","toLocaleString","reminderDate","getTime","toggleReminder","existing","find","_objectSpread","customReminder","setCustomReminder","useState","isOpen","setIsOpen","min","formatDateTimeLocal","toISOString","max","undefined","handleAddCustomReminder","selectedDate","isNaN","hours","htmlFor","length","item","ReminderCheckbox","h","round","Number","isInteger","task","setTasks","isNewTask","onSave","isEditing","setIsEditing","tempTitle","setTempTitle","tempDescription","setTempDescription","description","tempStatus","setTempStatus","status","setTempDeadline","deadline","Array","isArray","showDeleteModal","setShowDeleteModal","isLoading","setIsLoading","cardRef","useRef","handleCancel","useCallback","useEffect","handleClickOutside","current","contains","document","addEventListener","removeEventListener","handleSave","async","trim","JSON","stringify","finalReminders","hasDaily","hasWeekly","filteredReminders","regenerateRecurringReminders","updatedTaskData","response","updateTask","t","data","error","console","stripColor","getStripColor","isDeadlineInFuture","reminderSummary","getReminderSummary","dailyCount","weeklyCount","oneTimeCount","parts","join","_Fragment","ref","style","backgroundColor","color","placeholder","rows","TaskReminders","formatRelativeTime","createdAt","ConfirmationModal","deleteTask","user","logout","useAuth","tasks","newTaskId","setNewTaskId","fetchTasks","loadTasks","handleAddTask","newTask","updatedAt","priority","handleSaveNewTask","createTask","handleCancelNewTask","taskId","DragDropContext","onDragEnd","destination","source","result","index","reorderedTasks","from","movedTask","splice","updatedTasksWithPriority","movedTaskId","newPriority","updateTaskPriority","Droppable","droppableId","provided","droppableProps","innerRef","sort","a","b","Draggable","draggableId","toString","draggableProps","dragHandleProps","TaskItem","_","api","axios","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","get","post","updatedTask","put","delete","loginUser","email","password","loginWithGoogle","code","authorizationCode","registerUser","firstName","lastName","verifyRegistrationCode","verificationCode","sendVerificationCode","sendForgotPasswordRequest","resetPassword","newPassword","changePassword","currentPassword","getProfile","err","updateProfile","formData","dateString","date","diffInSeconds","futureDiff","ceil","format","days","convertDateToWords","year","month","split","getFullYear","String","getMonth","padStart","getDate","getHours","minutes","getMinutes"],"sourceRoot":""}