{"version":3,"file":"static/js/670.edeea9b0.chunk.js","mappings":"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","sources":["components/auth/VerificationForm.js","components/auth/Register.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { verifyRegistrationCode } from \"../../services/api\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport \"./VerificationForm.css\";\n\nconst VerificationForm = ({\n  theme,\n  email,\n  setEmail,\n  handleSendVerificationCode,\n  setMessage,\n  setError,\n  setIsLoading,\n  setIsVerificationStep,\n  isLoading,\n}) => {\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const navigate = useNavigate();\n  const { login } = useAuth();\n\n  const handleVerifyCode = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setMessage(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await verifyRegistrationCode(email, verificationCode);\n      setMessage(\"Verification successful! You are being redirected to home.\");\n\n      const { token, userInfo } = response.data;\n\n      setTimeout(() => {\n        setIsVerificationStep(false);\n        login(token, userInfo);\n        navigate(\"/tasks\");\n      }, 2000);\n    } catch (err) {\n      setError(err.response?.data?.message || \"Verification failed.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleVerifyCode} className=\"verification-form\">\n      <div className=\"mb-3\">\n        <input\n          type=\"email\"\n          className=\"form-control py-2\"\n          id=\"email\"\n          placeholder=\"Enter your email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <input\n          type=\"text\"\n          className=\"form-control py-2\"\n          id=\"verificationCode\"\n          placeholder=\"Enter verification code\"\n          value={verificationCode}\n          onChange={(e) => setVerificationCode(e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"d-flex flex-row flex-wrap justify-content-between align-items-center mt-3\">\n        <button type=\"submit\" className=\"btn verify-btn\" disabled={isLoading}>\n          {isLoading ? (\n            <span\n              className=\"spinner-border spinner-border-sm text-light\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          ) : (\n            \"Verify Code\"\n          )}\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-link resend-link\"\n          onClick={handleSendVerificationCode}\n        >\n          Resend Code\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default VerificationForm;\n","import  { useState } from \"react\";\nimport { registerUser, sendVerificationCode } from \"../../services/api\";\nimport VerificationForm from \"./VerificationForm\";\nimport \"./Register.css\";\nimport { Link } from \"react-router-dom\";\nimport { FormInput, AlertBanner, LoadingButton } from \"../common\";\nimport { useFormState, useApiError, useLoading, usePasswordValidation } from \"../../hooks\";\nimport { ERROR_MESSAGES } from \"../../constants/appConstants\";\n\nconst Register = ({ theme }) => {\n  const { formData, handleChange } = useFormState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { error, setError, clearError, handleError } = useApiError(false);\n  const { isLoading, startLoading, stopLoading } = useLoading();\n  const { passwordError, validatePasswordMatch, clearPasswordError } = usePasswordValidation();\n\n  const [message, setMessage] = useState(\"\");\n  const [isVerificationStep, setIsVerificationStep] = useState(false);\n  const [hasVerificationCode, setHasVerificationCode] = useState(false);\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    clearError();\n    clearPasswordError();\n    setMessage(\"\");\n\n    if (!validatePasswordMatch(formData.password, formData.confirmPassword)) {\n      return;\n    }\n\n    startLoading();\n    try {\n      const response = await registerUser(\n        formData.firstName,\n        formData.lastName,\n        formData.email,\n        formData.password\n      );\n      setMessage(response.data.message || \"Registration successful!\");\n      setIsVerificationStep(true);\n      setHasVerificationCode(true);\n    } catch (err) {\n      handleError(err, ERROR_MESSAGES.REGISTRATION_FAILED);\n    } finally {\n      stopLoading();\n    }\n  };\n\n  const handleSendVerificationCode = async (e) => {\n    e.preventDefault();\n    clearError();\n    setMessage(\"\");\n    startLoading();\n\n    try {\n      const response = await sendVerificationCode(formData.email);\n      setMessage(response.data.message || \"Verification code sent!\");\n    } catch (err) {\n      handleError(err, \"Failed to send code.\");\n    } finally {\n      stopLoading();\n    }\n  };\n\n  const handleToggleCheckbox = () => {\n    setHasVerificationCode(!hasVerificationCode);\n    if (hasVerificationCode) {\n      setIsVerificationStep(false);\n    }\n  };\n\n  return (\n    <div className=\"register-page d-flex align-items-center justify-content-center\">\n      <div className=\"register-form wider-form\">\n        <h1 className=\"fw-bold mb-2\">\n          {isVerificationStep || hasVerificationCode\n            ? \"Verify Registration\"\n            : \"Register\"}\n        </h1>\n        <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n          {isVerificationStep || hasVerificationCode\n            ? \"Enter your verification code\"\n            : \"Fill in the details to create your account\"}\n        </p>\n\n        <AlertBanner type=\"error\" message={error} onClose={clearError} />\n        <AlertBanner type=\"success\" message={message} onClose={() => setMessage(\"\")} />\n\n        <div className=\"form-check mb-3\">\n          <input\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            id=\"hasVerificationCode\"\n            checked={hasVerificationCode}\n            onChange={handleToggleCheckbox}\n          />\n          <label className=\"form-check-label\" htmlFor=\"hasVerificationCode\">\n            I already have a verification code\n          </label>\n        </div>\n\n        {!isVerificationStep && !hasVerificationCode && (\n          <form onSubmit={handleRegister}>\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <FormInput\n                  type=\"text\"\n                  name=\"firstName\"\n                  placeholder=\"First Name\"\n                  value={formData.firstName}\n                  onChange={handleChange}\n                  required\n                />\n              </div>\n              <div className=\"col-6\">\n                <FormInput\n                  type=\"text\"\n                  name=\"lastName\"\n                  placeholder=\"Last Name\"\n                  value={formData.lastName}\n                  onChange={handleChange}\n                  required\n                />\n              </div>\n            </div>\n\n            <FormInput\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              value={formData.email}\n              onChange={handleChange}\n              required\n            />\n\n            <FormInput\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              value={formData.password}\n              onChange={handleChange}\n              required\n            />\n\n            <FormInput\n              type=\"password\"\n              name=\"confirmPassword\"\n              placeholder=\"Confirm Password\"\n              value={formData.confirmPassword}\n              onChange={handleChange}\n              error={passwordError}\n              required\n            />\n\n            <LoadingButton\n              type=\"submit\"\n              isLoading={isLoading}\n              className=\"register-btn w-100 mb-3\"\n              variant=\"primary\"\n            >\n              Register\n            </LoadingButton>\n          </form>\n        )}\n\n        {(isVerificationStep || hasVerificationCode) && (\n          <VerificationForm\n            email={formData.email}\n            setEmail={(value) => handleChange({ target: { name: \"email\", value } })}\n            handleSendVerificationCode={handleSendVerificationCode}\n            setMessage={setMessage}\n            setError={setError}\n            setIsLoading={startLoading}\n            setIsVerificationStep={setIsVerificationStep}\n            isLoading={isLoading}\n          />\n        )}\n\n        <div className=\"text-center mt-4\">\n          <p className=\"mb-0 d-flex justify-content-center align-items-center gap-1\">\n            Already have an account?{\" \"}\n            <Link to=\"/login\" className=\"login-link\">\n              Login\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n"],"names":["_ref","theme","email","setEmail","handleSendVerificationCode","setMessage","setError","setIsLoading","setIsVerificationStep","isLoading","verificationCode","setVerificationCode","useState","navigate","useNavigate","login","useAuth","_jsxs","onSubmit","async","e","preventDefault","response","verifyRegistrationCode","token","userInfo","data","setTimeout","err","_err$response","_err$response$data","message","className","children","_jsx","type","id","placeholder","value","onChange","target","required","disabled","role","onClick","formData","handleChange","useFormState","firstName","lastName","password","confirmPassword","error","clearError","handleError","useApiError","startLoading","stopLoading","useLoading","passwordError","validatePasswordMatch","clearPasswordError","usePasswordValidation","isVerificationStep","hasVerificationCode","setHasVerificationCode","concat","AlertBanner","onClose","checked","handleToggleCheckbox","htmlFor","registerUser","ERROR_MESSAGES","REGISTRATION_FAILED","FormInput","name","LoadingButton","variant","VerificationForm","sendVerificationCode","Link","to"],"sourceRoot":""}