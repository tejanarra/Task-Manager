{"version":3,"file":"static/js/343.cdacfd37.chunk.js","mappings":"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","sources":["components/common/FormInput.js","components/common/AlertBanner.js","components/common/LoadingButton.js","components/layout/ConfirmationModal.js","components/tasks/taskItem/ReminderCheckbox.js","components/tasks/taskItem/TaskReminders.js","constants/appConstants.js","services/api.js","utils/dateUtils.js","utils/reminderUtils.js","utils/statusUtils.js"],"sourcesContent":["import React from \"react\";\nimport \"./FormInput.css\";\n\n/**\n * Reusable form input component\n * @param {string} type - Input type (text, email, password, etc.)\n * @param {string} id - Input ID\n * @param {string} name - Input name\n * @param {string} value - Input value\n * @param {function} onChange - Change handler\n * @param {string} placeholder - Placeholder text\n * @param {boolean} required - Whether field is required\n * @param {string} className - Additional CSS classes\n * @param {string} label - Label text (optional)\n * @param {string} error - Error message (optional)\n * @param {boolean} disabled - Whether input is disabled\n * @param {Object} rest - Other HTML input attributes\n */\nconst FormInput = ({\n  type = \"text\",\n  id,\n  name,\n  value,\n  onChange,\n  placeholder,\n  required = false,\n  className = \"\",\n  label,\n  error,\n  disabled = false,\n  ...rest\n}) => {\n  return (\n    <div className=\"form-input-wrapper mb-3\">\n      {label && (\n        <label htmlFor={id} className=\"form-label\">\n          {label}\n          {required && <span className=\"text-danger ms-1\">*</span>}\n        </label>\n      )}\n      <input\n        type={type}\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={required}\n        disabled={disabled}\n        className={`form-control py-2 ${error ? \"is-invalid\" : \"\"} ${className}`}\n        {...rest}\n      />\n      {error && <div className=\"invalid-feedback d-block\">{error}</div>}\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React from \"react\";\nimport \"./AlertBanner.css\";\n\n/**\n * Reusable alert banner component\n * @param {string} type - Alert type (success, error, warning, info)\n * @param {string} message - Message to display\n * @param {function} onClose - Close handler (optional)\n * @param {string} className - Additional CSS classes\n */\nconst AlertBanner = ({ type = \"info\", message, onClose, className = \"\" }) => {\n  if (!message) return null;\n\n  const alertClass = {\n    success: \"alert-success\",\n    error: \"alert-danger\",\n    warning: \"alert-warning\",\n    info: \"alert-info\",\n  }[type] || \"alert-info\";\n\n  return (\n    <div className={`alert ${alertClass} ${className} d-flex align-items-center justify-content-between`} role=\"alert\">\n      <span>{message}</span>\n      {onClose && (\n        <button\n          type=\"button\"\n          className=\"btn-close\"\n          onClick={onClose}\n          aria-label=\"Close\"\n        ></button>\n      )}\n    </div>\n  );\n};\n\nexport default AlertBanner;\n","import React from \"react\";\nimport \"./LoadingButton.css\";\n\n/**\n * Reusable button with loading state\n * @param {boolean} isLoading - Whether button is in loading state\n * @param {string} children - Button text content\n * @param {string} loadingText - Text to show when loading (optional)\n * @param {string} type - Button type (button, submit, reset)\n * @param {string} className - Additional CSS classes\n * @param {boolean} disabled - Whether button is disabled\n * @param {function} onClick - Click handler\n * @param {string} variant - Button variant (primary, secondary, danger, etc.)\n * @param {Object} rest - Other button attributes\n */\nconst LoadingButton = ({\n  isLoading = false,\n  children,\n  loadingText = \"Loading...\",\n  type = \"button\",\n  className = \"\",\n  disabled = false,\n  onClick,\n  variant = \"primary\",\n  ...rest\n}) => {\n  const buttonClass = variant === \"primary\"\n    ? \"sign-in-btn\"\n    : `btn-${variant}`;\n\n  return (\n    <button\n      type={type}\n      className={`btn ${buttonClass} ${className}`}\n      disabled={disabled || isLoading}\n      onClick={onClick}\n      {...rest}\n    >\n      {isLoading ? (\n        <>\n          <span\n            className=\"spinner-border spinner-border-sm me-2\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          ></span>\n          {loadingText}\n        </>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\nexport default LoadingButton;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./ConfirmationModal.css\";\nimport { ModalHeader } from \"../common\";\n\nconst ConfirmationModal = ({\n  theme,\n  show,\n  title = \"Confirm Action\",\n  message = \"Are you sure you want to proceed?\",\n  onConfirm,\n  onCancel,\n}) => {\n  if (!show) return null;\n\n  return (\n    <div\n      className=\"custom-modal-overlay d-flex align-items-center justify-content-center\"\n      tabIndex=\"-1\"\n      role=\"dialog\"\n      onClick={onCancel}\n    >\n      <div\n        className=\"custom-modal-content\"\n        role=\"document\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"custom-modal-header\">\n          <h5 className=\"modal2-title fw-bold\">{title}</h5>\n          <button\n            type=\"button\"\n            className=\"btn-close\"\n            aria-label=\"Close\"\n            onClick={onCancel}\n          ></button>\n        </div>\n        <div className=\"custom-modal-body\">\n          <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n            {message}\n          </p>\n        </div>\n        <div className=\"custom-modal-footer d-flex justify-content-end gap-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={onCancel}\n          >\n            Cancel\n          </button>\n          <button type=\"button\" className=\"btn sign-in-btn\" onClick={onConfirm}>\n            Confirm\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationModal;\n","import \"./Styles/ReminderCheckbox.css\";\n\nconst ReminderCheckbox = ({\n  value,\n  label,\n  checked,\n  onChange,\n  className = \"\",\n  disabled = false,\n}) => (\n  <div className={`d-inline-block ${className}`}>\n    <label\n      className={`reminder-checkbox-label d-inline-flex align-items-center ${\n        disabled ? \"disabled\" : \"\"\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        className=\"form-check-input me-2\"\n        checked={checked}\n        onChange={(e) => !disabled && onChange(e.target.checked)}\n        disabled={disabled}\n        aria-label={`Set reminder for ${label}`}\n        aria-describedby={`reminder-${value}-desc`}\n      />\n      <span id={`reminder-${value}-desc`}>{label}</span>\n    </label>\n  </div>\n);\n\nexport default ReminderCheckbox;\n","import React, { useState } from \"react\";\nimport ReminderCheckbox from \"./ReminderCheckbox\";\nimport { formatDateTimeLocal } from \"../../../utils/dateUtils\";\nimport { formatHoursLabel } from \"../../../utils/reminderUtils\";\nimport \"./Styles/TaskReminders.css\";\n\nconst TaskReminders = ({\n  tempDeadline,\n  tempReminders,\n  setTempReminders,\n  theme,\n  ALL_INTERVALS = [],\n}) => {\n  const [customReminder, setCustomReminder] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const now = new Date();\n  const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n  const diffInHours =\n    deadlineDate && deadlineDate > now\n      ? (deadlineDate - now) / (1000 * 60 * 60)\n      : 0;\n\n  // Helper to check if reminder is one-time (not daily/weekly)\n  const isOneTimeReminder = (r) => {\n    return !r.type || r.type === \"one-time\";\n  };\n\n  // Check if daily reminders are active\n  const hasDailyReminders = tempReminders.some((r) => r.type === \"daily\");\n\n  // Check if weekly reminders are active\n  const hasWeeklyReminders = tempReminders.some((r) => r.type === \"weekly\");\n\n  // Toggle daily reminders\n  const toggleDailyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove existing daily reminders and add a single daily reminder template\n        const withoutDaily = prev.filter((r) => r.type !== \"daily\");\n        return [\n          ...withoutDaily,\n          { remindBefore: 24, sent: false, type: \"daily\" },\n        ];\n      } else {\n        // Remove all daily reminders\n        return prev.filter((r) => r.type !== \"daily\");\n      }\n    });\n  };\n\n  // Toggle weekly reminders\n  const toggleWeeklyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove existing weekly reminders and add a single weekly reminder template\n        const withoutWeekly = prev.filter((r) => r.type !== \"weekly\");\n        return [\n          ...withoutWeekly,\n          { remindBefore: 168, sent: false, type: \"weekly\" },\n        ];\n      } else {\n        // Remove all weekly reminders\n        return prev.filter((r) => r.type !== \"weekly\");\n      }\n    });\n  };\n\n  // Default intervals (e.g. 1 hr, 1 day, 1 week) - these are one-time reminders\n  const defaultIntervals = ALL_INTERVALS.filter((i) => i.value <= diffInHours);\n\n  // Custom reminders - one-time reminders that don't match default intervals\n  const customIntervals = tempReminders\n    .filter((r) => {\n      if (!isOneTimeReminder(r)) return false;\n      if (r.remindBefore > diffInHours) return false;\n\n      // Check if this matches any default interval\n      const matchesDefault = ALL_INTERVALS.some(\n        (ai) => Math.abs(ai.value - r.remindBefore) < 0.01\n      );\n\n      return !matchesDefault;\n    })\n    .map((r) => {\n      // If has customDate, show formatted date\n      if (r.customDate) {\n        try {\n          const date = new Date(r.customDate);\n          return {\n            value: r.remindBefore,\n            label: date.toLocaleString(),\n            customDate: r.customDate,\n          };\n        } catch (err) {\n          console.warn(\"Error formatting customDate:\", err);\n        }\n      }\n\n      // Otherwise calculate date from remindBefore\n      if (deadlineDate) {\n        const reminderDate = new Date(\n          deadlineDate.getTime() - r.remindBefore * 3600000\n        );\n        return {\n          value: r.remindBefore,\n          label: reminderDate.toLocaleString(),\n        };\n      }\n\n      // Fallback to hours label\n      return {\n        value: r.remindBefore,\n        label: formatHoursLabel(r.remindBefore),\n      };\n    });\n\n  // Toggle reminder\n  const toggleReminder = (value, checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Check if already exists\n        const existing = prev.find(\n          (r) => isOneTimeReminder(r) && Math.abs(r.remindBefore - value) < 0.01\n        );\n\n        if (!existing) {\n          return [\n            ...prev,\n            { remindBefore: value, sent: false, type: \"one-time\" },\n          ];\n        }\n        return prev;\n      } else {\n        // Remove the reminder\n        return prev.filter(\n          (r) =>\n            !isOneTimeReminder(r) || Math.abs(r.remindBefore - value) >= 0.01\n        );\n      }\n    });\n  };\n\n  // Add custom reminder\n  const handleAddCustomReminder = () => {\n    if (!customReminder) return;\n\n    const selectedDate = new Date(customReminder);\n    if (isNaN(selectedDate.getTime())) {\n      console.warn(\"Invalid date selected\");\n      return;\n    }\n\n    if (!deadlineDate || selectedDate >= deadlineDate) {\n      console.warn(\"Custom reminder must be before deadline\");\n      return;\n    }\n\n    if (selectedDate <= now) {\n      console.warn(\"Custom reminder must be in the future\");\n      return;\n    }\n\n    const hours = (deadlineDate - selectedDate) / (1000 * 60 * 60);\n\n    if (hours > 0 && hours <= diffInHours) {\n      setTempReminders((prev) => {\n        // Check if similar reminder already exists\n        const exists = prev.some(\n          (r) => isOneTimeReminder(r) && Math.abs(r.remindBefore - hours) < 0.01\n        );\n\n        if (!exists) {\n          return [\n            ...prev,\n            {\n              remindBefore: hours,\n              sent: false,\n              type: \"one-time\",\n              customDate: selectedDate.toISOString(),\n            },\n          ];\n        }\n        return prev;\n      });\n      setCustomReminder(\"\");\n    }\n  };\n\n  // Calculate how many days/weeks until deadline\n  const maxDays = Math.floor(diffInHours / 24);\n  const maxWeeks = Math.floor(diffInHours / (24 * 7));\n\n  return (\n    <div className=\"task-reminders-container\">\n      {/* Dropdown Header Bar */}\n      <div className=\"reminders-dropdown\" onClick={() => setIsOpen(!isOpen)}>\n        <div className=\"reminders-dropdown-header\">\n          <h6>\n            <i className=\"bi bi-clock\"></i> Reminders\n            {tempReminders.length > 0 && (\n              <span className=\"reminder-count-badge\">\n                {tempReminders.length}\n              </span>\n            )}\n          </h6>\n          {isOpen ? (\n            <i className=\"bi bi-chevron-up\"></i>\n          ) : (\n            <i className=\"bi bi-chevron-down\"></i>\n          )}\n        </div>\n      </div>\n\n      {/* Collapsible Content */}\n      {isOpen && (\n        <div className=\"reminders-dropdown-content\">\n          {/* Recurring Reminders Section */}\n          {(maxDays > 0 || maxWeeks > 0) && (\n            <div className=\"recurring-reminders-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-arrow-repeat\"></i> Recurring Reminders:\n              </label>\n              <div className=\"recurring-options\">\n                {maxDays > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasDailyReminders}\n                      onChange={(e) => toggleDailyReminders(e.target.checked)}\n                      id=\"daily-reminders\"\n                    />\n                    <label htmlFor=\"daily-reminders\">\n                      Every Day (up to {maxDays} reminder\n                      {maxDays !== 1 ? \"s\" : \"\"})\n                    </label>\n                  </div>\n                )}\n                {maxWeeks > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasWeeklyReminders}\n                      onChange={(e) => toggleWeeklyReminders(e.target.checked)}\n                      id=\"weekly-reminders\"\n                    />\n                    <label htmlFor=\"weekly-reminders\">\n                      Every Week (up to {maxWeeks} reminder\n                      {maxWeeks !== 1 ? \"s\" : \"\"})\n                    </label>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* One-time Reminders Section */}\n          {defaultIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-bell\"></i> One-time Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {defaultIntervals.map((item) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      isOneTimeReminder(r) &&\n                      Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = !!existing;\n                  return (\n                    <ReminderCheckbox\n                      key={item.value}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Custom Reminder Section */}\n          <div className=\"custom-reminder-section\">\n            <label className=\"reminder-section-label\">\n              <i className=\"bi bi-calendar-plus\"></i> Add Custom Reminder:\n            </label>\n            <div className=\"custom-reminder-input-group\">\n              <input\n                type=\"datetime-local\"\n                value={customReminder}\n                onChange={(e) => setCustomReminder(e.target.value)}\n                min={formatDateTimeLocal(now.toISOString())}\n                max={\n                  tempDeadline ? formatDateTimeLocal(tempDeadline) : undefined\n                }\n              />\n              <button\n                className={`btn btn-sm ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-outline-dark\"\n                }`}\n                onClick={handleAddCustomReminder}\n                disabled={!customReminder}\n              >\n                <i className=\"bi bi-plus-lg\"></i> Add\n              </button>\n            </div>\n          </div>\n\n          {/* Custom One-time Reminders Section */}\n          {customIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-calendar-check\"></i> Custom One-time\n                Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {customIntervals.map((item, index) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      isOneTimeReminder(r) &&\n                      Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = !!existing;\n                  return (\n                    <ReminderCheckbox\n                      key={item.customDate || `${item.value}-${index}`}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Active reminders summary */}\n          {tempReminders.length > 0 && (\n            <div className=\"active-reminders-summary\">\n              <small>\n                <i className=\"bi bi-info-circle\"></i> <strong>Active:</strong>\n                {hasDailyReminders && \" Daily\"}\n                {hasDailyReminders && hasWeeklyReminders && \",\"}\n                {hasWeeklyReminders && \" Weekly\"}\n                {(hasDailyReminders || hasWeeklyReminders) &&\n                  tempReminders.filter(isOneTimeReminder).length > 0 &&\n                  \",\"}\n                {tempReminders.filter(isOneTimeReminder).length > 0 &&\n                  ` ${tempReminders.filter(isOneTimeReminder).length} one-time`}\n              </small>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskReminders;\n","// Application Constants\n// Centralized constants to avoid duplication across components\n\n// Reminder Intervals\nexport const REMINDER_INTERVALS = [\n  { value: 1, label: \"1 hr\" },\n  { value: 24, label: \"1 day\" },\n  { value: 168, label: \"1 week\" },\n];\n\n// Task Status Options\nexport const TASK_STATUS = {\n  NOT_STARTED: \"not-started\",\n  IN_PROGRESS: \"in-progress\",\n  COMPLETED: \"completed\",\n};\n\nexport const TASK_STATUS_LABELS = {\n  [TASK_STATUS.NOT_STARTED]: \"Not Started\",\n  [TASK_STATUS.IN_PROGRESS]: \"In Progress\",\n  [TASK_STATUS.COMPLETED]: \"Completed\",\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [TASK_STATUS.COMPLETED]: \"#007a00\",\n  [TASK_STATUS.IN_PROGRESS]: \"#daa520\",\n  [TASK_STATUS.NOT_STARTED]: \"#a00000\",\n};\n\n// LocalStorage Keys\nexport const STORAGE_KEYS = {\n  TOKEN: \"token\",\n  USER_INFO: \"userInfo\",\n  THEME: \"theme\",\n  AI_CHAT_MODE: \"ai_chat_mode\",\n  AI_CHAT_HISTORY: \"ai_chat_history\",\n};\n\n// Date/Time Constants\nexport const TIME_CONSTANTS = {\n  ONE_MINUTE_MS: 60 * 1000,\n  ONE_HOUR_MS: 60 * 60 * 1000,\n  ONE_DAY_MS: 24 * 60 * 60 * 1000,\n  TWO_DAYS_MS: 48 * 60 * 60 * 1000,\n  ONE_WEEK_MS: 7 * 24 * 60 * 60 * 1000,\n  ONE_HOUR_HOURS: 1,\n  ONE_DAY_HOURS: 24,\n  ONE_WEEK_HOURS: 168,\n};\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_URL || \"https://task-manager-sigma-ashen.vercel.app/api\",\n};\n\n// AI Chat Suggestion Prompts\nexport const AI_SUGGESTIONS = [\n  \"Schedule dentist appointment next Tuesday at 3pm\",\n  \"Plan weekend shopping with 1 day reminder\",\n  \"Prepare presentation for Monday with daily reminders\",\n];\n\n// Reminder Types\nexport const REMINDER_TYPES = {\n  ONE_TIME: \"one-time\",\n  DAILY: \"daily\",\n  WEEKLY: \"weekly\",\n};\n\n// Form Validation Messages\nexport const VALIDATION_MESSAGES = {\n  REQUIRED_FIELD: \"This field is required\",\n  INVALID_EMAIL: \"Please enter a valid email address\",\n  PASSWORD_MISMATCH: \"Passwords do not match\",\n  PASSWORD_TOO_SHORT: \"Password must be at least 8 characters\",\n  INVALID_PHONE: \"Please enter a valid phone number\",\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  LOGIN_FAILED: \"Login failed. Please try again.\",\n  REGISTRATION_FAILED: \"Registration failed. Please try again.\",\n  VERIFICATION_FAILED: \"Verification failed. Please try again.\",\n  PASSWORD_RESET_FAILED: \"Password reset failed. Please try again.\",\n  PASSWORD_CHANGE_FAILED: \"Failed to change password. Please try again.\",\n  PROFILE_UPDATE_FAILED: \"Failed to update profile. Please try again.\",\n  TASK_FETCH_FAILED: \"Failed to fetch tasks. Please try again.\",\n  TASK_CREATE_FAILED: \"Failed to create task. Please try again.\",\n  TASK_UPDATE_FAILED: \"Failed to update task. Please try again.\",\n  TASK_DELETE_FAILED: \"Failed to delete task. Please try again.\",\n  NETWORK_ERROR: \"Network error. Please check your connection.\",\n  GENERIC_ERROR: \"Something went wrong. Please try again.\",\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  LOGIN_SUCCESS: \"Login successful!\",\n  REGISTRATION_SUCCESS: \"Registration successful!\",\n  PASSWORD_RESET_SUCCESS: \"Password reset successful!\",\n  PASSWORD_CHANGE_SUCCESS: \"Password changed successfully!\",\n  PROFILE_UPDATE_SUCCESS: \"Profile updated successfully!\",\n  TASK_CREATE_SUCCESS: \"Task created successfully!\",\n  TASK_UPDATE_SUCCESS: \"Task updated successfully!\",\n  TASK_DELETE_SUCCESS: \"Task deleted successfully!\",\n};\n\n// Responsive Breakpoints\nexport const BREAKPOINTS = {\n  MOBILE: 720,\n  TABLET: 1024,\n  DESKTOP: 1025,\n};\n\n// Avatar Configuration\nexport const AVATAR_CONFIG = {\n  MAX_SIZE: 5 * 1024 * 1024, // 5MB\n  ALLOWED_TYPES: [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/gif\"],\n  SCALE_MIN: 1,\n  SCALE_MAX: 2,\n  CROP_SIZE: { width: 200, height: 200 },\n  QUALITY: 0.8,\n};\n\n// Drag and Drop Configuration\nexport const DND_CONFIG = {\n  ACTIVATION_CONSTRAINT: { distance: 10 },\n  TOUCH_DELAY: 200,\n  TOUCH_TOLERANCE: 5,\n};\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n  timeout: 30000, // 30 second timeout\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Enhanced error handler\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    return {\n      message: error.response.data?.error || \"An error occurred\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: \"No response from server. Please check your connection.\",\n      status: 0,\n    };\n  } else {\n    // Error setting up request\n    return {\n      message: error.message || \"An unexpected error occurred\",\n      status: -1,\n    };\n  }\n};\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const fetchTaskById = (taskId) => api.get(`/tasks/${taskId}`);\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n\n// AI-related endpoints\nexport const generateAITask = async (prompt) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat\",\n      { prompt },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport const sendAIChatMessage = async (message, conversationHistory = []) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat-conversation\",\n      { message, conversationHistory },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport default api;\n","import { format } from \"date-fns\";\n\nexport const formatRelativeTime = (dateString) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now - date) / 1000);\n  const justNowThreshold = 60;\n  if (diffInSeconds < 0) {\n    const futureDiff = Math.abs(diffInSeconds);\n    if (futureDiff < justNowThreshold) return \"Just now\";\n    if (futureDiff < 60) return `in ${futureDiff} second${futureDiff !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 3600) return `in ${Math.ceil(futureDiff / 60)} minute${Math.ceil(futureDiff / 60) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 86400) return `in ${Math.ceil(futureDiff / 3600)} hour${Math.ceil(futureDiff / 3600) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 604800) return `in ${Math.ceil(futureDiff / 86400)} day${Math.ceil(futureDiff / 86400) !== 1 ? \"s\" : \"\"}`;\n    return format(date, \"MMM dd, yyyy\");\n  } else {\n    if (diffInSeconds < justNowThreshold) return \"Just now\";\n    if (diffInSeconds < 60) return `${diffInSeconds} second${diffInSeconds !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minute${Math.floor(diffInSeconds / 60) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hour${Math.floor(diffInSeconds / 3600) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 604800) {\n      const days = Math.floor(diffInSeconds / 86400);\n      return days === 1 ? \"Yesterday\" : `${days} days ago`;\n    }\n    return format(date, \"MMM dd, yyyy\");\n  }\n};\n\nexport const convertDateToWords = (dateString) => {\n  const [year, month, day] = dateString.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n  if (isNaN(date)) return \"Invalid Date\";\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return date.toLocaleString(\"en-US\", options);\n};\n\nexport const formatDateTimeLocal = (dateString) => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n};","import { REMINDER_INTERVALS, REMINDER_TYPES, TIME_CONSTANTS } from \"../constants/appConstants\";\n\n/**\n * Formats hours into human-readable label\n * @param {number} hours - Number of hours\n * @returns {string} - Formatted label (e.g., \"1 hr\", \"2 days\", \"1 week\")\n */\nexport const formatHoursLabel = (hours) => {\n  if (hours < 1) {\n    const minutes = Math.round(hours * 60);\n    return `${minutes} min${minutes !== 1 ? \"s\" : \"\"}`;\n  }\n\n  if (hours < TIME_CONSTANTS.ONE_DAY_HOURS) {\n    const formattedHours = hours % 1 === 0 ? hours : hours.toFixed(1);\n    return `${formattedHours} hr${hours !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const days = hours / TIME_CONSTANTS.ONE_DAY_HOURS;\n  if (days < 7) {\n    const formattedDays = days % 1 === 0 ? days : days.toFixed(1);\n    return `${formattedDays} day${days !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const weeks = days / 7;\n  const formattedWeeks = weeks % 1 === 0 ? weeks : weeks.toFixed(1);\n  return `${formattedWeeks} week${weeks !== 1 ? \"s\" : \"\"}`;\n};\n\n/**\n * Normalize and calculate remindBefore for all reminders before saving\n * @param {Array} reminders - List of reminder objects\n * @param {string|Date} deadline - ISO string or Date for task deadline\n * @returns {Array} - Normalized reminders\n */\nexport const normalizeRemindersBeforeSave = (reminders, deadline) => {\n  if (!Array.isArray(reminders) || !deadline) return reminders;\n\n  const deadlineDate = new Date(deadline);\n\n  return reminders.map((r) => {\n    // Skip invalid dates or reminders with explicit remindBefore\n    if (r.remindBefore && !r.customDate) return r;\n\n    // If a customDate exists, calculate remindBefore dynamically\n    if (r.customDate) {\n      const customDate = new Date(r.customDate);\n      if (!isNaN(customDate.getTime()) && customDate < deadlineDate) {\n        const diffHours = (deadlineDate - customDate) / (1000 * 60 * 60);\n        return { ...r, remindBefore: diffHours };\n      }\n    }\n\n    // Fallback: keep as-is\n    return r;\n  });\n};\n\n/**\n * Gets reminder summary for display\n * @param {Array} reminders - Array of reminder objects\n * @returns {string} - Summary text (e.g., \"1 hr, 1 day before\")\n */\nexport const getReminderSummary = (reminders) => {\n  if (!reminders || reminders.length === 0) return \"\";\n\n  const oneTimeReminders = reminders.filter(\n    (r) => !r.type || r.type === REMINDER_TYPES.ONE_TIME\n  );\n\n  const hasDailyReminders = reminders.some((r) => r.type === REMINDER_TYPES.DAILY);\n  const hasWeeklyReminders = reminders.some((r) => r.type === REMINDER_TYPES.WEEKLY);\n\n  const parts = [];\n\n  // Add one-time reminders\n  if (oneTimeReminders.length > 0) {\n    const labels = oneTimeReminders\n      .map((r) => formatHoursLabel(r.remindBefore))\n      .join(\", \");\n    parts.push(labels);\n  }\n\n  // Add recurring reminders\n  if (hasDailyReminders) parts.push(\"Daily\");\n  if (hasWeeklyReminders) parts.push(\"Weekly\");\n\n  return parts.join(\", \");\n};\n\n/**\n * Regenerates recurring reminders (daily or weekly)\n * @param {Array} currentReminders - Current reminder array\n * @param {string} type - \"daily\" or \"weekly\"\n * @param {Date} deadlineDate - Deadline date\n * @param {Date} now - Current date\n * @returns {Array} - Updated reminders array\n */\nexport const regenerateRecurringReminders = (\n  currentReminders,\n  type,\n  deadlineDate,\n  now = new Date()\n) => {\n  // Remove existing reminders of this type\n  const filtered = currentReminders.filter((r) => r.type !== type);\n\n  const diffInHours = (deadlineDate - now) / (1000 * 60 * 60);\n\n  if (type === REMINDER_TYPES.DAILY) {\n    const days = Math.floor(diffInHours / TIME_CONSTANTS.ONE_DAY_HOURS);\n    if (days < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= days; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_DAY_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.DAILY,\n        dayNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  if (type === REMINDER_TYPES.WEEKLY) {\n    const weeks = Math.floor(diffInHours / TIME_CONSTANTS.ONE_WEEK_HOURS);\n    if (weeks < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= weeks; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_WEEK_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.WEEKLY,\n        weekNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  return currentReminders;\n};\n\n/**\n * Checks if a reminder is one-time (not daily/weekly)\n * @param {Object} reminder - Reminder object\n * @returns {boolean} - True if one-time\n */\nexport const isOneTimeReminder = (reminder) => {\n  return !reminder.type || reminder.type === REMINDER_TYPES.ONE_TIME;\n};\n\n/**\n * Gets count of active reminders\n * @param {Array} reminders - Array of reminder objects\n * @returns {number} - Count of active reminders\n */\nexport const getActiveReminderCount = (reminders) => {\n  if (!reminders || !Array.isArray(reminders)) return 0;\n  return reminders.filter((r) => !r.sent).length;\n};\n\n/**\n * Validates a custom reminder date\n * @param {string|Date} customDate - Custom reminder date\n * @param {string|Date} deadline - Task deadline\n * @returns {Object} - { valid: boolean, error: string }\n */\nexport const validateCustomReminder = (customDate, deadline) => {\n  if (!customDate) {\n    return { valid: false, error: \"Please select a reminder date\" };\n  }\n\n  const reminderDate = new Date(customDate);\n  const deadlineDate = new Date(deadline);\n  const now = new Date();\n\n  if (isNaN(reminderDate.getTime())) {\n    return { valid: false, error: \"Invalid reminder date\" };\n  }\n\n  if (reminderDate <= now) {\n    return { valid: false, error: \"Reminder must be in the future\" };\n  }\n\n  if (reminderDate >= deadlineDate) {\n    return { valid: false, error: \"Reminder must be before deadline\" };\n  }\n\n  return { valid: true, error: null };\n};\n\n/**\n * Gets reminder intervals for selection\n * @returns {Array} - Array of interval objects\n */\nexport const getReminderIntervals = () => {\n  return REMINDER_INTERVALS;\n};\n","import { TASK_STATUS, STATUS_COLORS, TASK_STATUS_LABELS } from \"../constants/appConstants\";\n\n/**\n * Gets the color for a task status\n * @param {string} status - The task status\n * @returns {string} - The hex color code\n */\nexport const getStatusColor = (status) => {\n  return STATUS_COLORS[status] || STATUS_COLORS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Gets the label for a task status\n * @param {string} status - The task status\n * @returns {string} - The human-readable label\n */\nexport const getStatusLabel = (status) => {\n  return TASK_STATUS_LABELS[status] || TASK_STATUS_LABELS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Checks if a status is valid\n * @param {string} status - The status to check\n * @returns {boolean} - True if valid\n */\nexport const isValidStatus = (status) => {\n  return Object.values(TASK_STATUS).includes(status);\n};\n\n/**\n * Gets all available statuses\n * @returns {Array} - Array of status objects with value and label\n */\nexport const getAllStatuses = () => {\n  return Object.values(TASK_STATUS).map(status => ({\n    value: status,\n    label: getStatusLabel(status),\n    color: getStatusColor(status),\n  }));\n};\n"],"names":["_ref","type","id","name","value","onChange","placeholder","required","className","label","error","disabled","rest","_objectWithoutProperties","_excluded","_jsxs","children","htmlFor","_jsx","_objectSpread","concat","message","onClose","alertClass","success","warning","info","role","onClick","isLoading","loadingText","variant","buttonClass","_Fragment","theme","show","title","onConfirm","onCancel","tabIndex","e","stopPropagation","checked","target","tempDeadline","tempReminders","setTempReminders","ALL_INTERVALS","customReminder","setCustomReminder","useState","isOpen","setIsOpen","now","Date","deadlineDate","diffInHours","isOneTimeReminder","r","hasDailyReminders","some","hasWeeklyReminders","defaultIntervals","filter","i","customIntervals","remindBefore","ai","Math","abs","map","customDate","date","toLocaleString","err","console","warn","reminderDate","getTime","formatHoursLabel","toggleReminder","prev","find","sent","maxDays","floor","maxWeeks","length","toggleDailyReminders","toggleWeeklyReminders","item","ReminderCheckbox","min","formatDateTimeLocal","toISOString","max","undefined","handleAddCustomReminder","selectedDate","isNaN","hours","index","REMINDER_INTERVALS","TASK_STATUS","NOT_STARTED","IN_PROGRESS","COMPLETED","STATUS_COLORS","STORAGE_KEYS","TOKEN","USER_INFO","THEME","AI_CHAT_MODE","AI_CHAT_HISTORY","TIME_CONSTANTS","ONE_MINUTE_MS","ONE_HOUR_MS","ONE_DAY_MS","TWO_DAYS_MS","ONE_WEEK_MS","ONE_HOUR_HOURS","ONE_DAY_HOURS","ONE_WEEK_HOURS","REMINDER_TYPES","ONE_TIME","DAILY","WEEKLY","VALIDATION_MESSAGES","REQUIRED_FIELD","INVALID_EMAIL","PASSWORD_MISMATCH","PASSWORD_TOO_SHORT","INVALID_PHONE","ERROR_MESSAGES","LOGIN_FAILED","REGISTRATION_FAILED","VERIFICATION_FAILED","PASSWORD_RESET_FAILED","PASSWORD_CHANGE_FAILED","PROFILE_UPDATE_FAILED","TASK_FETCH_FAILED","TASK_CREATE_FAILED","TASK_UPDATE_FAILED","TASK_DELETE_FAILED","NETWORK_ERROR","GENERIC_ERROR","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","handleApiError","_error$response$data","response","data","status","fetchTasks","get","fetchTaskById","taskId","createTask","newTask","post","updateTask","updatedTask","put","deleteTask","delete","updateTaskPriority","priority","loginUser","email","password","loginWithGoogle","async","code","authorizationCode","registerUser","firstName","lastName","verifyRegistrationCode","verificationCode","sendVerificationCode","sendForgotPasswordRequest","resetPassword","newPassword","changePassword","currentPassword","getProfile","updateProfile","formData","generateAITask","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","prompt","sendAIChatMessage","conversationHistory","arguments","formatRelativeTime","dateString","diffInSeconds","futureDiff","ceil","format","days","convertDateToWords","year","month","day","split","Number","getFullYear","String","getMonth","padStart","getDate","getHours","minutes","getMinutes","round","formattedHours","toFixed","formattedDays","weeks","formattedWeeks","normalizeRemindersBeforeSave","reminders","deadline","Array","isArray","diffHours","getReminderSummary","oneTimeReminders","parts","labels","join","push","getStatusColor"],"sourceRoot":""}