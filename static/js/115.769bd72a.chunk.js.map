{"version":3,"file":"static/js/115.769bd72a.chunk.js","mappings":"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","sources":["components/tasks/TaskEditor.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  createTask,\n  updateTask,\n  deleteTask,\n  fetchTaskById,\n} from \"../../services/api\";\nimport TaskReminders from \"./taskItem/TaskReminders\";\nimport ConfirmationModal from \"../layout/ConfirmationModal\";\nimport { formatDateTimeLocal } from \"../../utils/dateUtils\";\nimport { formatHoursLabel, normalizeRemindersBeforeSave } from \"../../utils/reminderUtils\";\nimport { getStatusColor } from \"../../utils/statusUtils\";\nimport \"./TaskEditor.css\";\nimport { REMINDER_INTERVALS, TASK_STATUS } from \"../../constants/appConstants\";\nimport { AlertBanner, LoadingButton } from \"../common\";\n\nconst TaskEditor = ({ theme }) => {\n  const navigate = useNavigate();\n  const { taskId } = useParams();\n  const isNewTask = taskId === \"new\";\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [status, setStatus] = useState(\"not-started\");\n  const [deadline, setDeadline] = useState(null);\n  const [reminders, setReminders] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load task data if editing\n  useEffect(() => {\n    const loadTask = async () => {\n      if (!isNewTask) {\n        try {\n          setIsLoading(true);\n          const response = await fetchTaskById(taskId);\n          const task = response.data;\n\n          if (task) {\n            setTitle(task.title);\n            setDescription(task.description);\n            setStatus(task.status);\n            setDeadline(task.deadline || null);\n            setReminders(Array.isArray(task.reminders) ? task.reminders : []);\n          } else {\n            setError(\"Task not found\");\n            setTimeout(() => navigate(\"/tasks\"), 2000);\n          }\n        } catch (err) {\n          console.error(\"Error loading task:\", err);\n          setError(\"Failed to load task\");\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadTask();\n  }, [taskId, isNewTask, navigate]);\n\n  // Load task from navigation state (for AI-generated tasks)\n  useEffect(() => {\n    const state = window.history.state?.usr;\n    if (state?.task) {\n      const task = state.task;\n      setTitle(task.title || \"\");\n      setDescription(task.description || \"\");\n      setStatus(task.status || \"not-started\");\n      setDeadline(task.deadline || null);\n      setReminders(Array.isArray(task.reminders) ? task.reminders : []);\n    }\n  }, []);\n\n  const handleSave = async () => {\n    if (!title.trim() || !description.trim()) {\n      setError(\"Title and description are required\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    const now = new Date();\n    const deadlineDate = deadline ? new Date(deadline) : null;\n    const diffInHours =\n      deadlineDate && deadlineDate > now\n        ? (deadlineDate - now) / (1000 * 60 * 60)\n        : 0;\n\n    const regenerateRecurringReminders = (reminders) => {\n      const hasDaily = reminders.some((r) => r.type === \"daily\");\n      const hasWeekly = reminders.some((r) => r.type === \"weekly\");\n\n      let filteredReminders = reminders.filter(\n        (r) =>\n          (r.type === \"one-time\" || !r.type) && r.remindBefore <= diffInHours\n      );\n\n      if (hasDaily && diffInHours > 0) {\n        const maxDays = Math.floor(diffInHours / 24);\n        for (let day = 1; day <= maxDays; day++) {\n          filteredReminders.push({\n            remindBefore: day * 24,\n            sent: false,\n            type: \"daily\",\n            dayNumber: day,\n          });\n        }\n      }\n\n      if (hasWeekly && diffInHours > 0) {\n        const maxWeeks = Math.floor(diffInHours / (24 * 7));\n        for (let week = 1; week <= maxWeeks; week++) {\n          filteredReminders.push({\n            remindBefore: week * 24 * 7,\n            sent: false,\n            type: \"weekly\",\n            weekNumber: week,\n          });\n        }\n      }\n\n      return filteredReminders;\n    };\n\n    const finalReminders =\n      diffInHours > 0 ? regenerateRecurringReminders(reminders) : [];\n\n    const taskData = {\n      title: title.trim(),\n      description: description.trim(),\n      status,\n      deadline: deadline ? deadlineDate.toISOString() : null,\n      reminders: finalReminders,\n    };\n\n    try {\n      if (isNewTask) {\n        await createTask({ ...taskData, priority: 1 });\n      } else {\n        await updateTask(taskId, taskData);\n      }\n      navigate(\"/tasks\");\n    } catch (error) {\n      console.error(\"Error saving task:\", error);\n      setError(\"Failed to save task. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    setIsLoading(true);\n    try {\n      await deleteTask(taskId);\n      navigate(\"/tasks\");\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      setError(\"Failed to delete task\");\n      setIsLoading(false);\n      setShowDeleteModal(false);\n    }\n  };\n\n  const handleCancel = () => {\n    navigate(\"/tasks\");\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case \"completed\":\n        return \"#007a00\";\n      case \"in-progress\":\n        return \"#daa520\";\n      default:\n        return \"#a00000\";\n    }\n  };\n\n  const isDeadlineInFuture = deadline && new Date(deadline) > new Date();\n\n  if (isLoading && !isNewTask) {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"task-editor-container\" style={{ position: 'relative' }}>\n          <div className=\"editor-spine\"></div>\n          <div className=\"loading-state\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <p>Loading task...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"container mt-5\">\n        <div\n          className={`task-editor-container ${theme === \"dark\" ? \"dark\" : \"\"}`}\n          style={{ position: 'relative' }}\n        >\n          <div className=\"editor-spine\" style={{ backgroundColor: getStatusColor() }}></div>\n          \n          <div className=\"editor-header\">\n            <button\n              className=\"back-button\"\n              onClick={handleCancel}\n              disabled={isLoading}\n              aria-label=\"Go back to tasks\"\n            >\n              <i className=\"bi bi-arrow-left\"></i>\n            </button>\n            <h2>{isNewTask ? \"Create New Task\" : \"Edit Task\"}</h2>\n            <i\n              className={`bi ${\n                status === \"completed\"\n                  ? \"bi-check-circle-fill\"\n                  : status === \"in-progress\"\n                  ? \"bi-hourglass-split\"\n                  : \"bi-circle\"\n              } status-icon-header`}\n              style={{ color: getStatusColor() }}\n            />\n          </div>\n\n          {error && (\n            <div className=\"alert alert-danger\" role=\"alert\">\n              <i className=\"bi bi-exclamation-triangle me-2\"></i>\n              {error}\n            </div>\n          )}\n\n          <div className=\"editor-form\">\n            <div className=\"form-group\">\n              <label className=\"form-label\">\n                <i className=\"bi bi-pencil-square me-1\"></i>\n                Title <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                placeholder=\"Enter task title...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">\n                <i className=\"bi bi-text-paragraph me-1\"></i>\n                Description <span className=\"required\">*</span>\n              </label>\n              <textarea\n                className=\"form-control\"\n                rows={5}\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                placeholder=\"Enter task description...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label className=\"form-label\">\n                  <i className=\"bi bi-flag me-1\"></i>\n                  Status\n                </label>\n                <select\n                  className=\"form-select\"\n                  value={status}\n                  onChange={(e) => setStatus(e.target.value)}\n                  disabled={isLoading}\n                  style={{ color: getStatusColor() }}\n                >\n                  <option value=\"not-started\">Not Started</option>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">\n                  <i className=\"bi bi-calendar-event me-1\"></i>\n                  Deadline\n                </label>\n                <input\n                  type=\"datetime-local\"\n                  className=\"form-control\"\n                  value={deadline ? formatDateTimeLocal(deadline) : \"\"}\n                  onChange={(e) => setDeadline(e.target.value)}\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            {isDeadlineInFuture && (\n              <div className=\"form-group reminders-section\">\n                <label className=\"form-label\">\n                  <i className=\"bi bi-clock-history me-1\"></i>\n                  Reminders\n                </label>\n                <TaskReminders\n                  tempDeadline={deadline}\n                  tempReminders={reminders}\n                  setTempReminders={setReminders}\n                  theme={theme}\n                  ALL_INTERVALS={REMINDER_INTERVALS}\n                />\n              </div>\n            )}\n          </div>\n\n          <div className=\"editor-actions\">\n            {!isNewTask && (\n              <button\n                className=\"btn btn-danger\"\n                onClick={() => setShowDeleteModal(true)}\n                disabled={isLoading}\n              >\n                <i className=\"bi bi-trash me-2\"></i>\n                Delete Task\n              </button>\n            )}\n            <div className=\"action-group\">\n              <button\n                className=\"btn btn-secondary\"\n                onClick={handleCancel}\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"btn btn-primary\"\n                onClick={handleSave}\n                disabled={!title.trim() || !description.trim() || isLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <span className=\"spinner-border spinner-border-sm me-2\"></span>\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"bi bi-check-lg me-2\"></i>\n                    {isNewTask ? \"Create Task\" : \"Save Changes\"}\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ConfirmationModal\n        theme={theme}\n        show={showDeleteModal}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        onConfirm={handleDelete}\n        onCancel={() => setShowDeleteModal(false)}\n      />\n    </>\n  );\n};\n\nexport default TaskEditor;"],"names":["_ref","theme","navigate","useNavigate","taskId","useParams","isNewTask","title","setTitle","useState","description","setDescription","status","setStatus","deadline","setDeadline","reminders","setReminders","isLoading","setIsLoading","showDeleteModal","setShowDeleteModal","error","setError","useEffect","async","task","fetchTaskById","data","Array","isArray","setTimeout","err","console","loadTask","_window$history$state","state","window","history","usr","handleCancel","getStatusColor","isDeadlineInFuture","Date","_jsx","className","children","_jsxs","style","position","role","_Fragment","concat","backgroundColor","onClick","disabled","color","type","value","onChange","e","target","placeholder","rows","formatDateTimeLocal","TaskReminders","tempDeadline","tempReminders","setTempReminders","ALL_INTERVALS","REMINDER_INTERVALS","trim","now","deadlineDate","diffInHours","finalReminders","hasDaily","some","r","hasWeekly","filteredReminders","filter","remindBefore","maxDays","Math","floor","day","push","sent","dayNumber","maxWeeks","week","weekNumber","regenerateRecurringReminders","taskData","toISOString","createTask","_objectSpread","priority","updateTask","ConfirmationModal","show","message","onConfirm","deleteTask","onCancel"],"sourceRoot":""}