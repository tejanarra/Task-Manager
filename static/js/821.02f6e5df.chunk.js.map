{"version":3,"file":"static/js/821.02f6e5df.chunk.js","mappings":"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","sources":["components/ConfirmationModal.js","components/taskItem/TaskCard.js","components/AIChatModal/QuickMode.js","utils/reminderHelpers.js","components/AIChatModal/ChatMessage.js","components/taskItem/TaskItem.js","components/AIChatModal/ChatMode.js","components/AIChatModal/TaskPreviewModal.js","components/AIChatModal/AIChatModal.js","components/TaskList.js","components/taskItem/ReminderCheckbox.js","components/taskItem/TaskReminders.js","services/api.js","utils/dateUtils.js"],"sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Styles/ConfirmationModal.css\";\n\nconst ConfirmationModal = ({\n  theme,\n  show,\n  title = \"Confirm Action\",\n  message = \"Are you sure you want to proceed?\",\n  onConfirm,\n  onCancel,\n}) => {\n  if (!show) return null;\n\n  return (\n    <div\n      className=\"custom-modal-overlay d-flex align-items-center justify-content-center\"\n      tabIndex=\"-1\"\n      role=\"dialog\"\n      onClick={onCancel}\n    >\n      <div\n        className=\"custom-modal-content\"\n        role=\"document\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"custom-modal-header\">\n          <h5 className=\"modal2-title fw-bold\">{title}</h5>\n          <button\n            type=\"button\"\n            className=\"btn-close\"\n            aria-label=\"Close\"\n            onClick={onCancel}\n          ></button>\n        </div>\n        <div className=\"custom-modal-body\">\n          <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n            {message}\n          </p>\n        </div>\n        <div className=\"custom-modal-footer d-flex justify-content-end gap-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={onCancel}\n          >\n            Cancel\n          </button>\n          <button type=\"button\" className=\"btn sign-in-btn\" onClick={onConfirm}>\n            Confirm\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationModal;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { formatRelativeTime } from \"../../utils/dateUtils\";\nimport \"./Styles/TaskCard.css\";\n\nconst TaskCard = ({ theme, task }) => {\n  const navigate = useNavigate();\n\n  const handleClick = () => {\n    navigate(`/tasks/${task.id}/edit`);\n  };\n\n  const getStripColor = (status) => {\n    switch (status) {\n      case \"completed\":\n        return \"#007a00\";\n      case \"in-progress\":\n        return \"#daa520\";\n      default:\n        return \"#a00000\";\n    }\n  };\n\n  const stripColor = getStripColor(task.status);\n\n  const getReminderSummary = () => {\n    if (!task.reminders || task.reminders.length === 0) return null;\n\n    const dailyCount = task.reminders.filter((r) => r.type === \"daily\").length;\n    const weeklyCount = task.reminders.filter((r) => r.type === \"weekly\").length;\n    const oneTimeCount = task.reminders.filter(\n      (r) => r.type === \"one-time\" || !r.type\n    ).length;\n\n    const parts = [];\n    if (dailyCount > 0) parts.push(`Daily (${dailyCount})`);\n    if (weeklyCount > 0) parts.push(`Weekly (${weeklyCount})`);\n    if (oneTimeCount > 0) parts.push(`One-time (${oneTimeCount})`);\n\n    return parts.length > 0 ? parts.join(\", \") : null;\n  };\n\n  const reminderSummary = getReminderSummary();\n\n  return (\n    <div\n      className={`task-card ${theme === \"dark\" ? \"dark\" : \"\"}`}\n      onClick={handleClick}\n    >\n      <div\n        className=\"task-strip\"\n        style={{ backgroundColor: stripColor }}\n      ></div>\n\n      <div className=\"task-card-content\">\n        <i\n          className={`bi ${\n            task.status === \"completed\"\n              ? \"bi-check-circle\"\n              : task.status === \"in-progress\"\n              ? \"bi-hourglass\"\n              : \"bi-ban\"\n          } status-icon`}\n          style={{ color: stripColor }}\n        />\n\n        <h5 className=\"task-title\" style={{ color: stripColor }}>\n          {task.title}\n        </h5>\n        <p className=\"task-description\">{task.description}</p>\n\n        <div className=\"task-metadata\">\n          <div className=\"task-metadata-item\">\n            <strong>Created</strong>\n            <span>{formatRelativeTime(task.createdAt)}</span>\n          </div>\n          <div className=\"task-metadata-item\">\n            <strong>Deadline</strong>\n            <span>\n              {task.deadline\n                ? formatRelativeTime(task.deadline)\n                : \"No deadline set\"}\n            </span>\n          </div>\n        </div>\n\n        {reminderSummary && (\n          <div\n            className=\"reminder-indicator\"\n            title={`Reminders: ${reminderSummary}`}\n          >\n            <i className=\"bi bi-clock\"></i>\n            <small>{reminderSummary}</small>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TaskCard;","import { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { generateAITask } from \"../../services/api\";\n\nconst QuickMode = ({ setError, onClose }) => {\n  const navigate = useNavigate();\n  const [quickPrompt, setQuickPrompt] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n\n  const handleQuickGenerate = async () => {\n    if (!quickPrompt.trim()) return;\n    setIsLoading(true);\n    setError(null);\n\n    const result = await generateAITask(quickPrompt);\n    setIsLoading(false);\n\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const aiTask = result.data;\n    const newTask = {\n      title: aiTask.title,\n      description: aiTask.description,\n      status: aiTask.status || \"not-started\",\n      deadline: aiTask.deadline,\n      reminders: aiTask.reminders || [],\n    };\n\n    // Close modal and navigate to editor with task data\n    onClose();\n    navigate(\"/tasks/new/edit\", { state: { task: newTask } });\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleQuickGenerate();\n    }\n  };\n\n  return (\n    <div className=\"quick-mode\">\n      <div className=\"quick-mode-content\">\n        <label className=\"form-label\">Describe your task:</label>\n        <textarea\n          ref={inputRef}\n          className=\"form-control\"\n          rows={4}\n          value={quickPrompt}\n          onChange={(e) => setQuickPrompt(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\"E.g., 'Prepare project report by Friday 5PM with reminders 1 day and 1 hour before'\"\n          disabled={isLoading}\n        />\n        <div className=\"quick-mode-suggestions\">\n          <small>Try these:</small>\n          {[\n            \"Schedule dentist appointment next Tuesday at 3pm\",\n            \"Plan weekend shopping with 1 day reminder\",\n            \"Prepare presentation for Monday with daily reminders\",\n          ].map((text) => (\n            <button\n              key={text}\n              className=\"suggestion-chip\"\n              onClick={() => setQuickPrompt(text)}\n              disabled={isLoading}\n            >\n              {text}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"modal-actions\">\n        <button\n          className=\"btn btn-secondary\"\n          onClick={onClose}\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={handleQuickGenerate}\n          disabled={!quickPrompt.trim() || isLoading}\n        >\n          {isLoading ? (\n            <>\n              <span className=\"spinner-border spinner-border-sm me-2\"></span>{\" \"}\n              Generating...\n            </>\n          ) : (\n            <>\n              <i className=\"bi bi-magic me-2\"></i> Generate Task\n            </>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickMode;\n","/**\n * Normalize and calculate remindBefore for all reminders before saving.\n * @param {Array} reminders - List of reminder objects\n * @param {string|Date} deadline - ISO string or Date for task deadline\n * @returns {Array} normalized reminders\n */\nexport const normalizeRemindersBeforeSave = (reminders, deadline) => {\n  if (!Array.isArray(reminders) || !deadline) return reminders;\n\n  const deadlineDate = new Date(deadline);\n\n  return reminders.map((r) => {\n    // Skip invalid dates or reminders with explicit remindBefore\n    if (r.remindBefore && !r.customDate) return r;\n\n    // If a customDate exists, calculate remindBefore dynamically\n    if (r.customDate) {\n      const customDate = new Date(r.customDate);\n      if (!isNaN(customDate.getTime()) && customDate < deadlineDate) {\n        const diffHours = (deadlineDate - customDate) / (1000 * 60 * 60);\n        return { ...r, remindBefore: diffHours };\n      }\n    }\n\n    // Fallback: keep as-is\n    return r;\n  });\n};\n","import React from \"react\";\n\nconst ChatMessage = ({ msg, user, theme }) => {\n  const userAvatar = user.avatar;\n  const initials =\n    (user.firstName?.[0]?.toUpperCase() || \"\") +\n    (user.lastName?.[0]?.toUpperCase() || \"\");\n  const displayInitials = initials || \"?\";\n\n  // Format timestamp for WhatsApp-like display\n  const formatTime = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now - date) / (1000 * 60 * 60);\n\n    // If message is from today, show time only\n    if (diffInHours < 24 && date.getDate() === now.getDate()) {\n      return date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n    }\n\n    // If yesterday\n    if (diffInHours < 48 && date.getDate() === now.getDate() - 1) {\n      return `Yesterday ${date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })}`;\n    }\n\n    // Otherwise show date and time\n    return (\n      date.toLocaleDateString([], {\n        month: \"short\",\n        day: \"numeric\",\n      }) +\n      \" \" +\n      date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })\n    );\n  };\n\n  // Format message content with basic markdown-like formatting\n  const formatMessageContent = (content) => {\n    if (!content) return \"\";\n\n    // Split by numbered lists (1., 2., etc.)\n    const parts = content.split(/(\\d+\\.\\s+[^\\n]+)/g);\n\n    return parts.map((part, index) => {\n      // Check if this is a numbered list item\n      if (/^\\d+\\.\\s+/.test(part)) {\n        const match = part.match(/^(\\d+)\\.\\s+(.+)/);\n        if (match) {\n          return (\n            <div\n              key={index}\n              style={{ marginLeft: \"0.5rem\", marginTop: \"0.25rem\" }}\n            >\n              <strong>{match[1]}.</strong> {match[2]}\n            </div>\n          );\n        }\n      }\n\n      // Process inline formatting\n      const processedPart = part\n        .split(/(\\*\\*[^*]+\\*\\*)/g) // Bold text\n        .map((segment, i) => {\n          if (segment.startsWith(\"**\") && segment.endsWith(\"**\")) {\n            return <strong key={i}>{segment.slice(2, -2)}</strong>;\n          }\n          return segment;\n        });\n\n      return <span key={index}>{processedPart}</span>;\n    });\n  };\n\n  return (\n    <div className={`chat-message ${msg.role}`}>\n      <div className=\"message-avatar\">\n        {msg.role === \"user\" ? (\n          userAvatar ? (\n            <img\n              src={userAvatar}\n              alt=\"User\"\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: \"50%\",\n                objectFit: \"cover\",\n              }}\n            />\n          ) : (\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: \"50%\",\n                backgroundColor: theme === \"dark\" ? \"#ffffff\" : \"#000000\",\n                color: theme === \"dark\" ? \"#000000\" : \"#ffffff\",\n                fontWeight: \"bold\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                fontSize: \"0.85rem\",\n              }}\n            >\n              {displayInitials}\n            </div>\n          )\n        ) : (\n          <i className=\"bi bi-robot\"></i>\n        )}\n      </div>\n      <div className=\"message-content\">\n        <div className=\"message-text\">\n          <div className=\"message-text-content\">\n            {formatMessageContent(msg.content)}\n          </div>\n          <div className=\"message-time\">\n            {formatTime(msg.timestamp)}\n            {msg.role === \"user\" && (\n              <i\n                className=\"bi bi-check-all\"\n                style={{ fontSize: \"0.75rem\" }}\n              ></i>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { deleteTask, updateTask } from \"../../services/api\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ConfirmationModal from \"../ConfirmationModal\";\nimport TaskReminders from \"./TaskReminders\";\nimport { formatRelativeTime, formatDateTimeLocal } from \"../../utils/dateUtils\";\nimport \"./Styles/TaskItem.css\";\n\nconst ALL_INTERVALS = [\n  { value: 1, label: \"1 hr\" },\n  { value: 24, label: \"1 day\" },\n  { value: 168, label: \"1 week\" },\n];\n\nfunction formatHoursLabel(h) {\n  if (h < 1) return `${Math.round(h * 60)} min`;\n  if (Number.isInteger(h)) return `${h} hr${h > 1 ? \"s\" : \"\"}`;\n  return `${h} hrs`;\n}\n\nconst TaskItem = ({\n  theme,\n  task,\n  setTasks,\n  isNewTask = false,\n  onSave = () => {},\n  onCancel = () => {},\n}) => {\n  const [isEditing, setIsEditing] = useState(isNewTask);\n  const [tempTitle, setTempTitle] = useState(task.title);\n  const [tempDescription, setTempDescription] = useState(task.description);\n  const [tempStatus, setTempStatus] = useState(task.status);\n  const [tempDeadline, setTempDeadline] = useState(task.deadline || null);\n  const [tempReminders, setTempReminders] = useState(\n    Array.isArray(task.reminders) ? task.reminders : []\n  );\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const cardRef = useRef(null);\n\n  // ✅ Ensure reminders update when the AI-created task is previewed\n  useEffect(() => {\n    if (Array.isArray(task.reminders) && task.reminders.length > 0) {\n      setTempReminders(task.reminders);\n    }\n  }, [task.reminders]);\n\n  const handleCancel = useCallback(() => {\n    setTempTitle(task.title);\n    setTempDescription(task.description);\n    setTempStatus(task.status);\n    setTempDeadline(task.deadline || null);\n    setTempReminders(Array.isArray(task.reminders) ? task.reminders : []);\n    isNewTask ? onCancel(task.id) : setIsEditing(false);\n  }, [\n    task.title,\n    task.description,\n    task.status,\n    task.deadline,\n    task.reminders,\n    isNewTask,\n    onCancel,\n    task.id,\n  ]);\n\n  useEffect(() => {\n    const handleClickOutside = (e) => {\n      if (isEditing && cardRef.current && !cardRef.current.contains(e.target)) {\n        handleCancel();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [isEditing, handleCancel]);\n\n  const handleSave = async () => {\n    if (!tempTitle.trim() || !tempDescription.trim()) return;\n\n    setIsLoading(true);\n\n    const changed =\n      tempTitle !== task.title ||\n      tempDescription !== task.description ||\n      tempStatus !== task.status ||\n      tempDeadline !== task.deadline ||\n      JSON.stringify(tempReminders) !== JSON.stringify(task.reminders);\n\n    if (!changed && !isNewTask) {\n      setIsEditing(false);\n      setIsLoading(false);\n      return;\n    }\n\n    const now = new Date();\n    const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n    const diffInHours =\n      deadlineDate && deadlineDate > now\n        ? (deadlineDate - now) / (1000 * 60 * 60)\n        : 0;\n\n    const regenerateRecurringReminders = (reminders) => {\n      const hasDaily = reminders.some((r) => r.type === \"daily\");\n      const hasWeekly = reminders.some((r) => r.type === \"weekly\");\n\n      let filteredReminders = reminders.filter(\n        (r) =>\n          (r.type === \"one-time\" || !r.type) && r.remindBefore <= diffInHours\n      );\n\n      if (hasDaily && diffInHours > 0) {\n        const maxDays = Math.floor(diffInHours / 24);\n        for (let day = 1; day <= maxDays; day++) {\n          filteredReminders.push({\n            remindBefore: day * 24,\n            sent: false,\n            type: \"daily\",\n            dayNumber: day,\n          });\n        }\n      }\n\n      if (hasWeekly && diffInHours > 0) {\n        const maxWeeks = Math.floor(diffInHours / (24 * 7));\n        for (let week = 1; week <= maxWeeks; week++) {\n          filteredReminders.push({\n            remindBefore: week * 24 * 7,\n            sent: false,\n            type: \"weekly\",\n            weekNumber: week,\n          });\n        }\n      }\n\n      return filteredReminders;\n    };\n\n    const finalReminders =\n      diffInHours > 0 ? regenerateRecurringReminders(tempReminders) : [];\n\n    const updatedTaskData = {\n      title: tempTitle.trim(),\n      description: tempDescription.trim(),\n      status: tempStatus,\n      deadline: tempDeadline ? deadlineDate.toISOString() : null,\n      reminders: finalReminders,\n    };\n\n    try {\n      if (isNewTask) {\n        onSave({ ...task, ...updatedTaskData });\n      } else {\n        const response = await updateTask(task.id, updatedTaskData);\n        setTasks((prev) =>\n          prev.map((t) => (t.id === response.data.id ? response.data : t))\n        );\n        setIsEditing(false);\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = () => setShowDeleteModal(true);\n  const confirmDelete = async () => {\n    setIsLoading(true);\n    try {\n      await deleteTask(task.id);\n      setTasks((prev) => prev.filter((t) => t.id !== task.id));\n      setShowDeleteModal(false);\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    } finally {\n      setIsLoading(false);\n      setShowDeleteModal(false);\n    }\n  };\n\n  const getStripColor = (status) => {\n    switch (status) {\n      case \"completed\":\n        return \"#007a00\";\n      case \"in-progress\":\n        return \"#daa520\";\n      default:\n        return \"#a00000\";\n    }\n  };\n\n  const stripColor = getStripColor(task.status);\n  const isDeadlineInFuture =\n    tempDeadline && new Date(tempDeadline) > new Date();\n\n  // ✅ Fixed — correctly include \"one-time\" reminders\n  const getReminderSummary = () => {\n    if (!tempReminders || tempReminders.length === 0) return null;\n\n    const dailyCount = tempReminders.filter((r) => r.type === \"daily\").length;\n    const weeklyCount = tempReminders.filter((r) => r.type === \"weekly\").length;\n    const oneTimeCount = tempReminders.filter(\n      (r) => r.type === \"one-time\" || !r.type\n    ).length;\n\n    const parts = [];\n    if (dailyCount > 0) parts.push(`Daily (${dailyCount})`);\n    if (weeklyCount > 0) parts.push(`Weekly (${weeklyCount})`);\n    if (oneTimeCount > 0) parts.push(`One-time (${oneTimeCount})`);\n\n    return parts.length > 0 ? parts.join(\", \") : null;\n  };\n\n  const reminderSummary = getReminderSummary();\n\n  return (\n    <>\n      <div\n        ref={cardRef}\n        className={`task-card ${theme === \"dark\" ? \"dark\" : \"\"} ${\n          isLoading ? \"loading\" : \"\"\n        } ${isNewTask ? \"new-task\" : \"\"}`}\n        onClick={() => !isEditing && setIsEditing(true)}\n      >\n        <div\n          className=\"task-strip\"\n          style={{ backgroundColor: stripColor }}\n        ></div>\n\n        <div className=\"task-card-content\">\n          {!isEditing && (\n            <i\n              className={`bi ${\n                task.status === \"completed\"\n                  ? \"bi-check-circle\"\n                  : task.status === \"in-progress\"\n                  ? \"bi-hourglass\"\n                  : \"bi-ban\"\n              } status-icon`}\n              style={{ color: stripColor }}\n            />\n          )}\n\n          {isEditing ? (\n            <div className=\"task-form-grid\">\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={tempTitle}\n                  onChange={(e) => setTempTitle(e.target.value)}\n                  placeholder=\"Enter task title...\"\n                />\n              </div>\n\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Description</label>\n                <textarea\n                  className=\"form-control\"\n                  rows={3}\n                  value={tempDescription}\n                  onChange={(e) => setTempDescription(e.target.value)}\n                  placeholder=\"Enter task description...\"\n                />\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Status</label>\n                <select\n                  className=\"form-select\"\n                  value={tempStatus}\n                  onChange={(e) => setTempStatus(e.target.value)}\n                >\n                  <option value=\"not-started\">Not Started</option>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Deadline</label>\n                <input\n                  type=\"datetime-local\"\n                  className=\"form-control\"\n                  value={tempDeadline ? formatDateTimeLocal(tempDeadline) : \"\"}\n                  onChange={(e) => setTempDeadline(e.target.value)}\n                />\n              </div>\n\n              {isDeadlineInFuture && (\n                <div className=\"task-form-group full-width\">\n                  <TaskReminders\n                    tempDeadline={tempDeadline}\n                    tempReminders={tempReminders}\n                    setTempReminders={setTempReminders}\n                    theme={theme}\n                    ALL_INTERVALS={ALL_INTERVALS}\n                    formatHoursLabel={formatHoursLabel}\n                  />\n                </div>\n              )}\n            </div>\n          ) : (\n            <>\n              <h5 className=\"task-title\" style={{ color: stripColor }}>\n                {tempTitle}\n              </h5>\n              <p className=\"task-description\">{tempDescription}</p>\n            </>\n          )}\n\n          <div className=\"task-metadata\">\n            <div className=\"task-metadata-item\">\n              <strong>Created</strong>\n              <span>{formatRelativeTime(task.createdAt)}</span>\n            </div>\n            <div className=\"task-metadata-item\">\n              <strong>Deadline</strong>\n              <span>\n                {task.deadline\n                  ? formatRelativeTime(task.deadline)\n                  : \"No deadline set\"}\n              </span>\n            </div>\n          </div>\n\n          {isEditing && (\n            <div className=\"task-actions\">\n              {!isNewTask && (\n                <button\n                  className={`btn ${\n                    theme === \"dark\" ? \"btn-outline-danger\" : \"btn-secondary\"\n                  }`}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleDelete();\n                  }}\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Deleting...\" : \"Delete\"}\n                </button>\n              )}\n              <button\n                className={`btn ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-dark\"\n                }`}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleSave();\n                }}\n                disabled={\n                  !tempTitle.trim() || !tempDescription.trim() || isLoading\n                }\n              >\n                {isLoading ? \"Saving...\" : \"Save\"}\n              </button>\n            </div>\n          )}\n\n          {/* ✅ Reminders now always show when available */}\n          {!isEditing && reminderSummary && (\n            <div\n              className=\"reminder-indicator\"\n              title={`Reminders: ${reminderSummary}`}\n            >\n              <i className=\"bi bi-clock\"></i>\n              <small>{reminderSummary}</small>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <ConfirmationModal\n        theme={theme}\n        show={showDeleteModal}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        onConfirm={confirmDelete}\n        onCancel={() => setShowDeleteModal(false)}\n      />\n    </>\n  );\n};\n\nexport default TaskItem;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { normalizeRemindersBeforeSave } from \"../../utils/reminderHelpers\";\n\nimport {\n  sendAIChatMessage,\n  generateAITask,\n  updateTask,\n  deleteTask,\n  createTask,\n} from \"../../services/api\";\nimport ChatMessage from \"./ChatMessage\";\nimport TaskItem from \"../taskItem/TaskItem\";\nimport { useAuth } from \"../../context/AuthContext\";\n\nconst CHAT_HISTORY_KEY = \"ai_chat_history\";\n\nconst ChatMode = ({ setError, theme, refreshTasks }) => {\n  const { user } = useAuth();\n  \n  // Load chat history from localStorage on mount\n  const [chatMessages, setChatMessages] = useState(() => {\n    try {\n      const saved = localStorage.getItem(CHAT_HISTORY_KEY);\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error(\"Error loading chat history:\", error);\n      return [];\n    }\n  });\n  \n  const [chatInput, setChatInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewTask, setPreviewTask] = useState(null);\n  const chatEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatMessages, previewTask]);\n\n  // Save chat history to localStorage whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(chatMessages));\n    } catch (error) {\n      console.error(\"Error saving chat history:\", error);\n    }\n  }, [chatMessages]);\n\n  /* ====================================================\n     Send Message to AI (chatConversation)\n  ==================================================== */\n  const handleChatSend = async () => {\n    if (!chatInput.trim()) return;\n\n    const userMessage = {\n      role: \"user\",\n      content: chatInput.trim(),\n      timestamp: new Date().toISOString(),\n    };\n\n    setChatMessages((prev) => [...prev, userMessage]);\n    setChatInput(\"\");\n    setIsLoading(true);\n    setError(null);\n\n    const conversationHistory = chatMessages.map((msg) => ({\n      role: msg.role,\n      content: msg.content,\n    }));\n\n    const result = await sendAIChatMessage(\n      userMessage.content,\n      conversationHistory\n    );\n\n    setIsLoading(false);\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const { reply, previewUpdate } = result.data;\n\n    if (previewUpdate && previewUpdate.reminders) {\n      previewUpdate.reminders = normalizeRemindersBeforeSave(\n        previewUpdate.reminders,\n        previewUpdate.deadline\n      );\n    }\n\n    // Add assistant's reply\n    setChatMessages((prev) => [\n      ...prev,\n      {\n        role: \"assistant\",\n        content: reply,\n        timestamp: new Date().toISOString(),\n      },\n    ]);\n\n    // If AI suggests update/delete – show inline TaskItem\n    if (previewUpdate) {\n      setPreviewTask({\n        ...previewUpdate,\n        _aiSuggested: true,\n        isUpdate:\n          previewUpdate.action === \"update\" ||\n          previewUpdate.action === \"delete\",\n        isNewTask: previewUpdate.action === \"create\" || previewUpdate.isNewTask,\n        createdAt: previewUpdate.createdAt || new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n  };\n\n  /* ====================================================\n     Generate new task from chat\n  ==================================================== */\n  const handleGenerateFromChat = async () => {\n    if (chatMessages.length === 0) {\n      setError(\"No conversation found to generate task from\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    const conversationSummary = chatMessages\n      .map(\n        (msg) => `${msg.role === \"user\" ? \"User\" : \"Assistant\"}: ${msg.content}`\n      )\n      .join(\"\\n\");\n\n    const contextualPrompt = `Based on this conversation, create a task:\\n\\n${conversationSummary}\\n\\nCreate a detailed task with appropriate deadline and reminders.`;\n\n    const result = await generateAITask(contextualPrompt);\n    setIsLoading(false);\n\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const aiTask = result.data;\n    setPreviewTask({\n      ...aiTask,\n      id: `temp-${Date.now()}`,\n      status: aiTask.status || \"not-started\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      priority: 1,\n      _aiSuggested: true,\n      isNewTask: true,\n      action: \"create\",\n    });\n  };\n\n  /* ====================================================\n     Confirm or Cancel AI Update / Delete\n  ==================================================== */\n  const handleConfirmUpdate = async (task) => {\n    try {\n      if (!task) return;\n      setIsLoading(true);\n      setError(null);\n\n      // Normalize reminders before saving\n      const normalizedReminders = normalizeRemindersBeforeSave(\n        task.reminders || [],\n        task.deadline\n      );\n\n      let resultMessage = \"\";\n\n      if (task.action === \"delete\") {\n        await deleteTask(task.id);\n        resultMessage = `🗑️ Deleted task \"${task.title}\".`;\n      } else if (task.action === \"create\") {\n        await createTask({\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          deadline: task.deadline,\n          reminders: normalizedReminders,\n        });\n        resultMessage = `✨ Created new task \"${task.title}\".`;\n      } else {\n        await updateTask(task.id, {\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          deadline: task.deadline,\n          reminders: normalizedReminders,\n        });\n        resultMessage = `✅ Updated task \"${task.title}\".`;\n      }\n\n      await refreshTasks();\n      setPreviewTask(null);\n      setChatMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: resultMessage,\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n    } catch (error) {\n      console.error(\"Error applying AI update:\", error);\n      setError(\"Failed to apply update.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCancelPreview = () => setPreviewTask(null);\n\n  /* ====================================================\n     Helpers\n  ==================================================== */\n  const resetChat = () => {\n    setChatMessages([]);\n    setError(null);\n    setPreviewTask(null);\n    try {\n      localStorage.removeItem(CHAT_HISTORY_KEY);\n    } catch (error) {\n      console.error(\"Error clearing chat history:\", error);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleChatSend();\n    }\n  };\n\n  /* ====================================================\n     RENDER\n  ==================================================== */\n  return (\n    <div className=\"chat-mode\">\n      <div className=\"chat-messages\">\n        {/* Empty Chat State */}\n        {chatMessages.length === 0 && !previewTask ? (\n          <div className=\"chat-empty-state\">\n            <i className=\"bi bi-chat-heart\"></i>\n            <p>Start a conversation with AI</p>\n            <small>Ask questions or describe your task step by step</small>\n          </div>\n        ) : (\n          chatMessages.map((msg, index) => (\n            <ChatMessage key={index} msg={msg} user={user} theme={theme} />\n          ))\n        )}\n\n        {/* Inline Task Preview using TaskItem */}\n        {previewTask && (\n          <div className=\"chat-message assistant\">\n            <div className=\"message-avatar\">\n              <i className=\"bi bi-robot\"></i>\n            </div>\n            <div className=\"message-content w-100\">\n              {previewTask.action === \"delete\" ? (\n                <div\n                  className={`ai-delete-preview p-3 rounded ${\n                    theme === \"dark\"\n                      ? \"bg-dark text-light\"\n                      : \"bg-light text-dark\"\n                  }`}\n                >\n                  <h6 className=\"mb-2\">\n                    🗑️ Confirm delete: <strong>{previewTask.title}</strong>?\n                  </h6>\n                  <div className=\"d-flex gap-2\">\n                    <button\n                      className=\"btn btn-danger btn-sm\"\n                      onClick={() => handleConfirmUpdate(previewTask)}\n                      disabled={isLoading}\n                    >\n                      {isLoading ? \"Deleting...\" : \"Delete\"}\n                    </button>\n                    <button\n                      className=\"btn btn-secondary btn-sm\"\n                      onClick={handleCancelPreview}\n                      disabled={isLoading}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <TaskItem\n                  theme={theme}\n                  task={{\n                    ...previewTask,\n                    title: previewTask.title || \"\",\n                    description: previewTask.description || \"\",\n                    reminders: Array.isArray(previewTask.reminders)\n                      ? previewTask.reminders\n                      : [],\n                  }}\n                  isNewTask={true}\n                  onSave={handleConfirmUpdate}\n                  onCancel={handleCancelPreview}\n                />\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Typing indicator */}\n        {isLoading && (\n          <div className=\"chat-message assistant\">\n            <div className=\"message-avatar\">\n              <i className=\"bi bi-robot\"></i>\n            </div>\n            <div className=\"message-content\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={chatEndRef} />\n      </div>\n\n      {/* Chat Input */}\n      <div className=\"chat-input-container\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          className=\"form-control\"\n          value={chatInput}\n          onChange={(e) => setChatInput(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <button\n          className=\"send-button\"\n          onClick={handleChatSend}\n          disabled={!chatInput.trim() || isLoading}\n        >\n          <i className=\"bi bi-send-fill\"></i>\n        </button>\n      </div>\n\n      {/* Chat Footer Actions */}\n      <div className=\"chat-actions\">\n        <button\n          className=\"btn btn-sm btn-outline-secondary\"\n          onClick={resetChat}\n          disabled={isLoading || chatMessages.length === 0}\n        >\n          <i className=\"bi bi-arrow-clockwise me-1\"></i> Clear Chat\n        </button>\n        <button\n          className=\"btn btn-sm btn-primary\"\n          onClick={handleGenerateFromChat}\n          disabled={isLoading || chatMessages.length === 0}\n        >\n          <i className=\"bi bi-magic me-1\"></i> Generate Task\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMode;","import TaskItem from \"../taskItem/TaskItem\";\n\nconst TaskPreviewModal = ({ theme, task, onClose, onSave }) => (\n  <div className=\"ai-preview-overlay\" onClick={onClose}>\n    <div className=\"ai-preview-modal\" onClick={(e) => e.stopPropagation()}>\n      <h5 className=\"mb-3\">\n        <i className=\"bi bi-eye\"></i> Task Preview\n      </h5>\n\n      <TaskItem\n        theme={theme}\n        task={task}\n        isNewTask={true}\n        onSave={onSave}\n        onCancel={onClose}\n      />\n\n      <div className=\"text-end mt-2\">\n        <button className=\"btn btn-secondary\" onClick={onClose}>\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default TaskPreviewModal;\n","import React, { useState, useEffect } from \"react\";\nimport QuickMode from \"./QuickMode\";\nimport ChatMode from \"./ChatMode\";\nimport TaskPreviewModal from \"./TaskPreviewModal\";\nimport \"./Styles/AIChatModal.css\";\n\nconst AIChatModal = ({\n  show,\n  onClose,\n  onTaskGenerated,\n  theme,\n  refreshTasks,\n}) => {\n  const [mode, setMode] = useState(\"quick\");\n  const [previewTask, setPreviewTask] = useState(null);\n  const [error, setError] = useState(null);\n  const [isClosing, setIsClosing] = useState(false);\n\n  // Load last used mode from localStorage\n  useEffect(() => {\n    try {\n      const savedMode = localStorage.getItem(\"ai_chat_mode\");\n      if (savedMode && (savedMode === \"quick\" || savedMode === \"chat\")) {\n        setMode(savedMode);\n      }\n    } catch (error) {\n      console.error(\"Error loading chat mode:\", error);\n    }\n  }, []);\n\n  // Save mode preference when it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"ai_chat_mode\", mode);\n    } catch (error) {\n      console.error(\"Error saving chat mode:\", error);\n    }\n  }, [mode]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === \"Escape\" && show && !previewTask) {\n        handleClose();\n      }\n    };\n\n    if (show) {\n      document.addEventListener(\"keydown\", handleEscape);\n      // Prevent body scroll when modal is open\n      document.body.style.overflow = \"hidden\";\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape);\n      document.body.style.overflow = \"unset\";\n    };\n  }, [show, previewTask]);\n\n  const handleClose = () => {\n    setIsClosing(true);\n    // Small delay for animation\n    setTimeout(() => {\n      setIsClosing(false);\n      setError(null);\n      onClose();\n    }, 250);\n  };\n\n  const handleOverlayClick = (e) => {\n    if (e.target === e.currentTarget && !previewTask) {\n      handleClose();\n    }\n  };\n\n  if (!show && !isClosing) return null;\n\n  return (\n    <div\n      className={`ai-modal-overlay ${isClosing ? \"closing\" : \"\"}`}\n      onClick={handleOverlayClick}\n    >\n      <div\n        className={`ai-modal-content ${theme === \"dark\" ? \"dark-mode\" : \"\"} ${\n          isClosing ? \"closing\" : \"\"\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"ai-modal-header\">\n          <h3>\n            <i className=\"bi bi-robot\"></i> AI Task Assistant\n          </h3>\n          <button\n            className=\"close-button\"\n            onClick={handleClose}\n            aria-label=\"Close AI Assistant\"\n          >\n            <i className=\"bi bi-x-lg\"></i>\n          </button>\n        </div>\n\n        {/* Mode Selector */}\n        <div className=\"ai-mode-selector\">\n          <button\n            className={`mode-button ${mode === \"quick\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"quick\")}\n            aria-pressed={mode === \"quick\"}\n          >\n            <i className=\"bi bi-lightning-charge\"></i> Quick\n          </button>\n          <button\n            className={`mode-button ${mode === \"chat\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"chat\")}\n            aria-pressed={mode === \"chat\"}\n          >\n            <i className=\"bi bi-chat-dots\"></i> Chat\n          </button>\n        </div>\n\n        {/* Error Banner */}\n        {error && (\n          <div className=\"error-banner\">\n            <i className=\"bi bi-exclamation-triangle\"></i> {error}\n            <button\n              onClick={() => setError(null)}\n              style={{\n                marginLeft: \"auto\",\n                background: \"none\",\n                border: \"none\",\n                color: \"inherit\",\n                cursor: \"pointer\",\n                padding: \"0 4px\",\n              }}\n              aria-label=\"Dismiss error\"\n            >\n              <i className=\"bi bi-x-lg\"></i>\n            </button>\n          </div>\n        )}\n\n        {/* Mode Content */}\n        {mode === \"quick\" ? (\n          <QuickMode\n            setError={setError}\n            setPreviewTask={setPreviewTask}\n            onTaskGenerated={onTaskGenerated}\n            onClose={handleClose}\n            theme={theme}\n          />\n        ) : (\n          <ChatMode\n            setError={setError}\n            theme={theme}\n            refreshTasks={refreshTasks}\n            onClose={handleClose}\n          />\n        )}\n      </div>\n\n      {/* Preview Modal */}\n      {previewTask && (\n        <TaskPreviewModal\n          theme={theme}\n          task={previewTask}\n          onClose={() => setPreviewTask(null)}\n          onSave={(task) => {\n            onTaskGenerated(task);\n            setPreviewTask(null);\n            handleClose();\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AIChatModal;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchTasks, updateTaskPriority } from \"../services/api\";\nimport { useAuth } from \"../context/AuthContext\";\nimport TaskCard from \"./taskItem/TaskCard\";\nimport AIChatModal from \"./AIChatModal/AIChatModal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Styles/TaskList.css\";\n\nimport {\n  DndContext,\n  closestCenter,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n  MouseSensor,\n  TouchSensor,\n} from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  arrayMove,\n  useSortable,\n  rectSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\n\n// ---------- Sortable Task Card ----------\nconst SortableTask = ({ task, theme }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({\n    id: task.id,\n    transition: {\n      duration: 250,\n      easing: \"cubic-bezier(0.25, 0.8, 0.25, 1)\",\n    },\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition:\n      transition || \"transform 250ms cubic-bezier(0.25, 0.8, 0.25, 1)\",\n    opacity: isDragging ? 0 : 1,\n    cursor: \"grab\",\n    // FIXED: Changed from \"none\" to \"manipulation\" to allow scrolling\n    touchAction: \"manipulation\",\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <TaskCard theme={theme} task={task} />\n    </div>\n  );\n};\n\n// ---------- Main TaskList Component ----------\nconst TaskList = ({ theme }) => {\n  const navigate = useNavigate();\n  const { user, logout } = useAuth();\n  const [tasks, setTasks] = useState(null);\n  const [showAIModal, setShowAIModal] = useState(false);\n  const [activeId, setActiveId] = useState(null);\n\n  // IMPROVED: Better touch sensor configuration for mobile\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        delay: 200, // Reduced from 250ms for better responsiveness\n        tolerance: 5, // Reduced from 8 for more precise control\n      },\n    }),\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    })\n  );\n\n  const loadTasks = useCallback(async () => {\n    if (user) {\n      try {\n        const response = await fetchTasks();\n        setTasks(response.data);\n      } catch (error) {\n        console.error(\"Error loading tasks:\", error);\n        if (error.response && error.response.status === 403) logout();\n      }\n    }\n  }, [user, logout]);\n\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n\n  const refreshTasks = async () => {\n    try {\n      const response = await fetchTasks();\n      setTasks(response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error refreshing tasks:\", error);\n    }\n  };\n\n  // ---------- Drag & Drop ----------\n  const handleDragStart = (event) => {\n    setActiveId(event.active.id);\n  };\n\n  const handleDragEnd = async (event) => {\n    const { active, over } = event;\n    setActiveId(null);\n\n    if (!over || active.id === over.id) return;\n\n    setTasks((prevTasks) => {\n      const oldIndex = prevTasks.findIndex((t) => t.id === active.id);\n      const newIndex = prevTasks.findIndex((t) => t.id === over.id);\n\n      if (oldIndex === -1 || newIndex === -1) return prevTasks;\n\n      const reordered = arrayMove(prevTasks, oldIndex, newIndex);\n\n      // Update priorities in the backend\n      const updatePromises = reordered.map((task, idx) => {\n        const newPriority = idx + 1;\n        if (task.priority !== newPriority) {\n          return updateTaskPriority(task.id, newPriority).catch((err) => {\n            console.error(`Error updating priority for task ${task.id}:`, err);\n          });\n        }\n        return Promise.resolve();\n      });\n\n      Promise.all(updatePromises);\n\n      // Return reordered array with updated priorities\n      return reordered.map((task, idx) => ({\n        ...task,\n        priority: idx + 1,\n      }));\n    });\n  };\n\n  const handleDragCancel = () => {\n    setActiveId(null);\n  };\n\n  // ---------- Task Management ----------\n  const handleAddTask = () => {\n    navigate(\"/tasks/new/edit\");\n  };\n\n  const handleAITaskGenerated = (aiGeneratedTask) => {\n    // Navigate to editor with task data\n    navigate(\"/tasks/new/edit\", { state: { task: aiGeneratedTask } });\n  };\n\n  // ---------- Shimmer Loader ----------\n  const renderShimmerLoader = () => (\n    <div className=\"container mt-5\">\n      <div className=\"task-container\">\n        <div className=\"card-body p-3\">\n          <div className=\"d-flex flex-row justify-content-between align-items-center mb-3 header-container\">\n            <h2 className=\"card-title mb-0\">Your Tasks</h2>\n            <div className=\"d-flex gap-2 button-group\">\n              <button\n                className={`btn btn-outline-${\n                  theme === \"dark\" ? \"light\" : \"dark\"\n                } ai-button`}\n                disabled\n              >\n                <i className=\"bi bi-robot me-2\"></i>\n                <span className=\"button-text\">AI Assistant</span>\n              </button>\n\n              <button\n                className={`btn btn-outline-${\n                  theme === \"dark\" ? \"light\" : \"dark\"\n                } d-flex align-items-center gap-2`}\n                disabled\n              >\n                <i className=\"bi bi-plus-circle\"></i>\n                <span className=\"button-text\">New Task</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"shimmer-list\">\n            {Array.from({ length: 5 }).map((_, index) => (\n              <div key={index} className=\"shimmer-task-item\">\n                <div className=\"shimmer-task-header\"></div>\n                <div className=\"shimmer-task-body\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (!tasks) return renderShimmerLoader();\n\n  // Sort tasks by priority\n  const sortedTasks = [...tasks].sort((a, b) => a.priority - b.priority);\n  const activeTask = activeId ? tasks.find((t) => t.id === activeId) : null;\n\n  // ---------- Render ----------\n  return (\n    <>\n      <div className=\"container mt-5\">\n        <div className=\"task-container\">\n          <div className=\"card-body p-3\">\n            <div className=\"d-flex flex-row justify-content-between align-items-center mb-3 header-container\">\n              <h2 className=\"card-title mb-0\">Your Tasks</h2>\n              <div className=\"d-flex gap-2 button-group\">\n                <button\n                  className={`btn btn-outline-${\n                    theme === \"dark\" ? \"light\" : \"dark\"\n                  } ai-button`}\n                  onClick={() => setShowAIModal(true)}\n                >\n                  <i className=\"bi bi-robot me-2\"></i>\n                  <span className=\"button-text\">AI Assistant</span>\n                </button>\n\n                <button\n                  className={`btn btn-outline-${\n                    theme === \"dark\" ? \"light\" : \"dark\"\n                  } d-flex align-items-center gap-2`}\n                  onClick={handleAddTask}\n                >\n                  <i className=\"bi bi-plus-circle\"></i>\n                  <span className=\"button-text\">New Task</span>\n                </button>\n              </div>\n            </div>\n\n            {tasks.length === 0 ? (\n              <div className=\"empty-state\">\n                <i className=\"bi bi-clipboard-check empty-state-icon\"></i>\n                <p\n                  className={`text-${\n                    theme === \"dark\" ? \"light\" : \"muted\"\n                  } mb-2`}\n                >\n                  No tasks yet\n                </p>\n                <small className=\"text-muted\">\n                  Create your first task or use AI Assistant to get started\n                </small>\n              </div>\n            ) : (\n              <DndContext\n                sensors={sensors}\n                collisionDetection={closestCenter}\n                onDragStart={handleDragStart}\n                onDragEnd={handleDragEnd}\n                onDragCancel={handleDragCancel}\n              >\n                <SortableContext\n                  items={sortedTasks.map((t) => t.id)}\n                  strategy={rectSortingStrategy}\n                >\n                  <div className=\"task-list\">\n                    {sortedTasks.map((task) => (\n                      <SortableTask key={task.id} task={task} theme={theme} />\n                    ))}\n                  </div>\n                </SortableContext>\n\n                <DragOverlay\n                  adjustScale={false}\n                  dropAnimation={{\n                    duration: 300,\n                    easing: \"cubic-bezier(0.25, 0.8, 0.25, 1)\",\n                  }}\n                  style={{\n                    cursor: \"grabbing\",\n                  }}\n                >\n                  {activeTask ? (\n                    <div\n                      style={{\n                        transform: \"scale(1.03) rotate(2deg)\",\n                        cursor: \"grabbing\",\n                        boxShadow:\n                          \"0 12px 24px rgba(0, 0, 0, 0.25), 0 4px 8px rgba(0, 0, 0, 0.15)\",\n                        borderRadius: \"10px\",\n                        transition:\n                          \"all 150ms cubic-bezier(0.25, 0.8, 0.25, 1)\",\n                      }}\n                    >\n                      <TaskCard theme={theme} task={activeTask} />\n                    </div>\n                  ) : null}\n                </DragOverlay>\n              </DndContext>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <AIChatModal\n        show={showAIModal}\n        onClose={() => setShowAIModal(false)}\n        onTaskGenerated={handleAITaskGenerated}\n        theme={theme}\n        refreshTasks={refreshTasks}\n      />\n    </>\n  );\n};\n\nexport default TaskList;\n","import \"./Styles/ReminderCheckbox.css\";\n\nconst ReminderCheckbox = ({\n  value,\n  label,\n  checked,\n  onChange,\n  className = \"\",\n  disabled = false,\n}) => (\n  <div className={`d-inline-block ${className}`}>\n    <label\n      className={`reminder-checkbox-label d-inline-flex align-items-center ${\n        disabled ? \"disabled\" : \"\"\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        className=\"form-check-input me-2\"\n        checked={checked}\n        onChange={(e) => !disabled && onChange(e.target.checked)}\n        disabled={disabled}\n        aria-label={`Set reminder for ${label}`}\n        aria-describedby={`reminder-${value}-desc`}\n      />\n      <span id={`reminder-${value}-desc`}>{label}</span>\n    </label>\n  </div>\n);\n\nexport default ReminderCheckbox;\n","import React, { useState } from \"react\";\nimport ReminderCheckbox from \"./ReminderCheckbox\";\nimport { formatDateTimeLocal } from \"../../utils/dateUtils\";\nimport \"./Styles/TaskReminders.css\";\n\nexport const formatHoursLabel = (h) => {\n  if (h < 1) return `${Math.round(h * 60)} min`;\n  if (h < 24)\n    return `${h % 1 === 0 ? h : h.toFixed(1)} hr${h !== 1 ? \"s\" : \"\"}`;\n  const days = h / 24;\n  if (days < 7)\n    return `${days % 1 === 0 ? days : days.toFixed(1)} day${\n      days !== 1 ? \"s\" : \"\"\n    }`;\n  const weeks = days / 7;\n  return `${weeks % 1 === 0 ? weeks : weeks.toFixed(1)} week${\n    weeks !== 1 ? \"s\" : \"\"\n  }`;\n};\n\nconst TaskReminders = ({\n  tempDeadline,\n  tempReminders,\n  setTempReminders,\n  theme,\n  ALL_INTERVALS,\n}) => {\n  const [customReminder, setCustomReminder] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const now = new Date();\n  const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n  const diffInHours =\n    deadlineDate && deadlineDate > now\n      ? (deadlineDate - now) / (1000 * 60 * 60)\n      : 0;\n\n  // Helper to check if reminder is one-time (not daily/weekly)\n  const isOneTimeReminder = (r) => {\n    return !r.type || r.type === \"one-time\";\n  };\n\n  // Check if daily reminders are active\n  const hasDailyReminders = tempReminders.some((r) => r.type === \"daily\");\n\n  // Check if weekly reminders are active\n  const hasWeeklyReminders = tempReminders.some((r) => r.type === \"weekly\");\n\n  // Toggle daily reminders\n  const toggleDailyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove existing daily reminders and add a single daily reminder template\n        const withoutDaily = prev.filter((r) => r.type !== \"daily\");\n        return [\n          ...withoutDaily,\n          { remindBefore: 24, sent: false, type: \"daily\" },\n        ];\n      } else {\n        // Remove all daily reminders\n        return prev.filter((r) => r.type !== \"daily\");\n      }\n    });\n  };\n\n  // Toggle weekly reminders\n  const toggleWeeklyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove existing weekly reminders and add a single weekly reminder template\n        const withoutWeekly = prev.filter((r) => r.type !== \"weekly\");\n        return [\n          ...withoutWeekly,\n          { remindBefore: 168, sent: false, type: \"weekly\" },\n        ];\n      } else {\n        // Remove all weekly reminders\n        return prev.filter((r) => r.type !== \"weekly\");\n      }\n    });\n  };\n\n  // Default intervals (e.g. 1 hr, 1 day, 1 week) - these are one-time reminders\n  const defaultIntervals = ALL_INTERVALS.filter((i) => i.value <= diffInHours);\n\n  // Custom reminders - one-time reminders that don't match default intervals\n  const customIntervals = tempReminders\n    .filter((r) => {\n      if (!isOneTimeReminder(r)) return false;\n      if (r.remindBefore > diffInHours) return false;\n\n      // Check if this matches any default interval\n      const matchesDefault = ALL_INTERVALS.some(\n        (ai) => Math.abs(ai.value - r.remindBefore) < 0.01\n      );\n\n      return !matchesDefault;\n    })\n    .map((r) => {\n      // If has customDate, show formatted date\n      if (r.customDate) {\n        try {\n          const date = new Date(r.customDate);\n          return {\n            value: r.remindBefore,\n            label: date.toLocaleString(),\n            customDate: r.customDate,\n          };\n        } catch (err) {\n          console.warn(\"Error formatting customDate:\", err);\n        }\n      }\n\n      // Otherwise calculate date from remindBefore\n      if (deadlineDate) {\n        const reminderDate = new Date(\n          deadlineDate.getTime() - r.remindBefore * 3600000\n        );\n        return {\n          value: r.remindBefore,\n          label: reminderDate.toLocaleString(),\n        };\n      }\n\n      // Fallback to hours label\n      return {\n        value: r.remindBefore,\n        label: formatHoursLabel(r.remindBefore),\n      };\n    });\n\n  // Toggle reminder\n  const toggleReminder = (value, checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Check if already exists\n        const existing = prev.find(\n          (r) => isOneTimeReminder(r) && Math.abs(r.remindBefore - value) < 0.01\n        );\n\n        if (!existing) {\n          return [\n            ...prev,\n            { remindBefore: value, sent: false, type: \"one-time\" },\n          ];\n        }\n        return prev;\n      } else {\n        // Remove the reminder\n        return prev.filter(\n          (r) =>\n            !isOneTimeReminder(r) || Math.abs(r.remindBefore - value) >= 0.01\n        );\n      }\n    });\n  };\n\n  // Add custom reminder\n  const handleAddCustomReminder = () => {\n    if (!customReminder) return;\n\n    const selectedDate = new Date(customReminder);\n    if (isNaN(selectedDate.getTime())) {\n      console.warn(\"Invalid date selected\");\n      return;\n    }\n\n    if (!deadlineDate || selectedDate >= deadlineDate) {\n      console.warn(\"Custom reminder must be before deadline\");\n      return;\n    }\n\n    if (selectedDate <= now) {\n      console.warn(\"Custom reminder must be in the future\");\n      return;\n    }\n\n    const hours = (deadlineDate - selectedDate) / (1000 * 60 * 60);\n\n    if (hours > 0 && hours <= diffInHours) {\n      setTempReminders((prev) => {\n        // Check if similar reminder already exists\n        const exists = prev.some(\n          (r) => isOneTimeReminder(r) && Math.abs(r.remindBefore - hours) < 0.01\n        );\n\n        if (!exists) {\n          return [\n            ...prev,\n            {\n              remindBefore: hours,\n              sent: false,\n              type: \"one-time\",\n              customDate: selectedDate.toISOString(),\n            },\n          ];\n        }\n        return prev;\n      });\n      setCustomReminder(\"\");\n    }\n  };\n\n  // Calculate how many days/weeks until deadline\n  const maxDays = Math.floor(diffInHours / 24);\n  const maxWeeks = Math.floor(diffInHours / (24 * 7));\n\n  return (\n    <div className=\"task-reminders-container\">\n      {/* Dropdown Header Bar */}\n      <div className=\"reminders-dropdown\" onClick={() => setIsOpen(!isOpen)}>\n        <div className=\"reminders-dropdown-header\">\n          <h6>\n            <i className=\"bi bi-clock\"></i> Reminders\n            {tempReminders.length > 0 && (\n              <span className=\"reminder-count-badge\">\n                {tempReminders.length}\n              </span>\n            )}\n          </h6>\n          {isOpen ? (\n            <i className=\"bi bi-chevron-up\"></i>\n          ) : (\n            <i className=\"bi bi-chevron-down\"></i>\n          )}\n        </div>\n      </div>\n\n      {/* Collapsible Content */}\n      {isOpen && (\n        <div className=\"reminders-dropdown-content\">\n          {/* Recurring Reminders Section */}\n          {(maxDays > 0 || maxWeeks > 0) && (\n            <div className=\"recurring-reminders-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-arrow-repeat\"></i> Recurring Reminders:\n              </label>\n              <div className=\"recurring-options\">\n                {maxDays > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasDailyReminders}\n                      onChange={(e) => toggleDailyReminders(e.target.checked)}\n                      id=\"daily-reminders\"\n                    />\n                    <label htmlFor=\"daily-reminders\">\n                      Every Day (up to {maxDays} reminder\n                      {maxDays !== 1 ? \"s\" : \"\"})\n                    </label>\n                  </div>\n                )}\n                {maxWeeks > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasWeeklyReminders}\n                      onChange={(e) => toggleWeeklyReminders(e.target.checked)}\n                      id=\"weekly-reminders\"\n                    />\n                    <label htmlFor=\"weekly-reminders\">\n                      Every Week (up to {maxWeeks} reminder\n                      {maxWeeks !== 1 ? \"s\" : \"\"})\n                    </label>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* One-time Reminders Section */}\n          {defaultIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-bell\"></i> One-time Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {defaultIntervals.map((item) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      isOneTimeReminder(r) &&\n                      Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = !!existing;\n                  return (\n                    <ReminderCheckbox\n                      key={item.value}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Custom Reminder Section */}\n          <div className=\"custom-reminder-section\">\n            <label className=\"reminder-section-label\">\n              <i className=\"bi bi-calendar-plus\"></i> Add Custom Reminder:\n            </label>\n            <div className=\"custom-reminder-input-group\">\n              <input\n                type=\"datetime-local\"\n                value={customReminder}\n                onChange={(e) => setCustomReminder(e.target.value)}\n                min={formatDateTimeLocal(now.toISOString())}\n                max={\n                  tempDeadline ? formatDateTimeLocal(tempDeadline) : undefined\n                }\n              />\n              <button\n                className={`btn btn-sm ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-outline-dark\"\n                }`}\n                onClick={handleAddCustomReminder}\n                disabled={!customReminder}\n              >\n                <i className=\"bi bi-plus-lg\"></i> Add\n              </button>\n            </div>\n          </div>\n\n          {/* Custom One-time Reminders Section */}\n          {customIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-calendar-check\"></i> Custom One-time\n                Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {customIntervals.map((item, index) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      isOneTimeReminder(r) &&\n                      Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = !!existing;\n                  return (\n                    <ReminderCheckbox\n                      key={item.customDate || `${item.value}-${index}`}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Active reminders summary */}\n          {tempReminders.length > 0 && (\n            <div className=\"active-reminders-summary\">\n              <small>\n                <i className=\"bi bi-info-circle\"></i> <strong>Active:</strong>\n                {hasDailyReminders && \" Daily\"}\n                {hasDailyReminders && hasWeeklyReminders && \",\"}\n                {hasWeeklyReminders && \" Weekly\"}\n                {(hasDailyReminders || hasWeeklyReminders) &&\n                  tempReminders.filter(isOneTimeReminder).length > 0 &&\n                  \",\"}\n                {tempReminders.filter(isOneTimeReminder).length > 0 &&\n                  ` ${tempReminders.filter(isOneTimeReminder).length} one-time`}\n              </small>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskReminders;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n  timeout: 30000, // 30 second timeout\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Enhanced error handler\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    return {\n      message: error.response.data?.error || \"An error occurred\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: \"No response from server. Please check your connection.\",\n      status: 0,\n    };\n  } else {\n    // Error setting up request\n    return {\n      message: error.message || \"An unexpected error occurred\",\n      status: -1,\n    };\n  }\n};\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const fetchTaskById = (taskId) => api.get(`/tasks/${taskId}`);\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n\n// AI-related endpoints\nexport const generateAITask = async (prompt) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat\",\n      { prompt },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport const sendAIChatMessage = async (message, conversationHistory = []) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat-conversation\",\n      { message, conversationHistory },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport default api;\n","import { format } from \"date-fns\";\n\nexport const formatRelativeTime = (dateString) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now - date) / 1000);\n  const justNowThreshold = 60;\n  if (diffInSeconds < 0) {\n    const futureDiff = Math.abs(diffInSeconds);\n    if (futureDiff < justNowThreshold) return \"Just now\";\n    if (futureDiff < 60) return `in ${futureDiff} second${futureDiff !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 3600) return `in ${Math.ceil(futureDiff / 60)} minute${Math.ceil(futureDiff / 60) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 86400) return `in ${Math.ceil(futureDiff / 3600)} hour${Math.ceil(futureDiff / 3600) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 604800) return `in ${Math.ceil(futureDiff / 86400)} day${Math.ceil(futureDiff / 86400) !== 1 ? \"s\" : \"\"}`;\n    return format(date, \"MMM dd, yyyy\");\n  } else {\n    if (diffInSeconds < justNowThreshold) return \"Just now\";\n    if (diffInSeconds < 60) return `${diffInSeconds} second${diffInSeconds !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minute${Math.floor(diffInSeconds / 60) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hour${Math.floor(diffInSeconds / 3600) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 604800) {\n      const days = Math.floor(diffInSeconds / 86400);\n      return days === 1 ? \"Yesterday\" : `${days} days ago`;\n    }\n    return format(date, \"MMM dd, yyyy\");\n  }\n};\n\nexport const convertDateToWords = (dateString) => {\n  const [year, month, day] = dateString.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n  if (isNaN(date)) return \"Invalid Date\";\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return date.toLocaleString(\"en-US\", options);\n};\n\nexport const formatDateTimeLocal = (dateString) => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n};"],"names":["_ref","theme","show","title","message","onConfirm","onCancel","_jsx","className","tabIndex","role","onClick","children","_jsxs","e","stopPropagation","type","concat","task","navigate","useNavigate","stripColor","status","getStripColor","reminderSummary","getReminderSummary","reminders","length","dailyCount","filter","r","weeklyCount","oneTimeCount","parts","push","join","handleClick","id","style","backgroundColor","color","description","formatRelativeTime","createdAt","deadline","setError","onClose","quickPrompt","setQuickPrompt","useState","isLoading","setIsLoading","inputRef","useRef","useEffect","current","focus","handleQuickGenerate","async","trim","result","generateAITask","success","error","aiTask","data","newTask","state","ref","rows","value","onChange","target","onKeyDown","key","shiftKey","preventDefault","placeholder","disabled","map","text","_Fragment","normalizeRemindersBeforeSave","Array","isArray","deadlineDate","Date","remindBefore","customDate","isNaN","getTime","diffHours","_objectSpread","_user$firstName","_user$firstName$","_user$lastName","_user$lastName$","msg","user","userAvatar","avatar","displayInitials","firstName","toUpperCase","lastName","src","alt","width","height","borderRadius","objectFit","fontWeight","display","alignItems","justifyContent","fontSize","content","split","part","index","test","match","marginLeft","marginTop","processedPart","segment","i","startsWith","endsWith","slice","formatMessageContent","timestamp","date","now","diffInHours","getDate","toLocaleTimeString","hour","minute","toLocaleDateString","month","day","formatTime","ALL_INTERVALS","label","formatHoursLabel","h","Math","round","Number","isInteger","setTasks","isNewTask","onSave","isEditing","setIsEditing","tempTitle","setTempTitle","tempDescription","setTempDescription","tempStatus","setTempStatus","tempDeadline","setTempDeadline","tempReminders","setTempReminders","showDeleteModal","setShowDeleteModal","cardRef","handleCancel","useCallback","handleClickOutside","contains","document","addEventListener","removeEventListener","isDeadlineInFuture","formatDateTimeLocal","TaskReminders","JSON","stringify","finalReminders","hasDaily","some","hasWeekly","filteredReminders","maxDays","floor","sent","dayNumber","maxWeeks","week","weekNumber","regenerateRecurringReminders","updatedTaskData","toISOString","response","updateTask","prev","t","console","handleSave","ConfirmationModal","deleteTask","CHAT_HISTORY_KEY","refreshTasks","useAuth","chatMessages","setChatMessages","saved","localStorage","getItem","parse","chatInput","setChatInput","previewTask","setPreviewTask","chatEndRef","_chatEndRef$current","scrollIntoView","behavior","setItem","handleChatSend","userMessage","conversationHistory","sendAIChatMessage","reply","previewUpdate","_aiSuggested","isUpdate","action","updatedAt","handleConfirmUpdate","normalizedReminders","resultMessage","createTask","handleCancelPreview","ChatMessage","TaskItem","resetChat","removeItem","conversationSummary","contextualPrompt","priority","onTaskGenerated","mode","setMode","isClosing","setIsClosing","savedMode","handleEscape","handleClose","body","overflow","setTimeout","currentTarget","background","border","cursor","padding","QuickMode","ChatMode","TaskPreviewModal","SortableTask","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","duration","easing","CSS","Transform","toString","opacity","touchAction","TaskCard","_ref2","logout","tasks","showAIModal","setShowAIModal","activeId","setActiveId","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","PointerSensor","loadTasks","fetchTasks","from","_","sortedTasks","sort","a","b","activeTask","find","handleAddTask","DndContext","collisionDetection","closestCenter","onDragStart","event","active","onDragEnd","over","prevTasks","oldIndex","findIndex","newIndex","reordered","arrayMove","updatePromises","idx","newPriority","updateTaskPriority","catch","err","Promise","resolve","all","onDragCancel","handleDragCancel","SortableContext","items","strategy","rectSortingStrategy","DragOverlay","adjustScale","dropAnimation","boxShadow","AIChatModal","aiGeneratedTask","checked","toFixed","days","weeks","customReminder","setCustomReminder","isOpen","setIsOpen","isOneTimeReminder","hasDailyReminders","hasWeeklyReminders","defaultIntervals","customIntervals","ai","abs","toLocaleString","warn","reminderDate","toggleReminder","toggleDailyReminders","htmlFor","toggleWeeklyReminders","item","ReminderCheckbox","min","max","undefined","handleAddCustomReminder","selectedDate","hours","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","Authorization","reject","handleApiError","_error$response$data","get","fetchTaskById","taskId","post","updatedTask","put","delete","loginUser","email","password","loginWithGoogle","code","authorizationCode","registerUser","verifyRegistrationCode","verificationCode","sendVerificationCode","sendForgotPasswordRequest","resetPassword","newPassword","changePassword","currentPassword","getProfile","updateProfile","formData","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","prompt","arguments","dateString","diffInSeconds","futureDiff","ceil","format","convertDateToWords","year","getFullYear","String","getMonth","padStart","getHours","minutes","getMinutes"],"sourceRoot":""}