{"version":3,"file":"static/js/492.c69f5265.chunk.js","mappings":"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","sources":["components/tasks/AIChatModal/QuickMode.js","components/tasks/AIChatModal/ChatMessage.js","components/tasks/taskItem/TaskItem.js","components/tasks/AIChatModal/ChatMode.js","components/tasks/AIChatModal/TaskPreviewModal.js","components/tasks/AIChatModal/AIChatModal.js","components/tasks/TaskList.js","components/tasks/taskItem/TaskCard.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { generateAITask } from \"../../../services/api\";\nimport { AI_SUGGESTIONS } from \"../../../constants/appConstants\";\n\nconst QuickMode = ({ setError, onClose }) => {\n  const navigate = useNavigate();\n  const [quickPrompt, setQuickPrompt] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n\n  const handleQuickGenerate = async () => {\n    if (!quickPrompt.trim()) return;\n    setIsLoading(true);\n    setError(null);\n\n    const result = await generateAITask(quickPrompt);\n    setIsLoading(false);\n\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const aiTask = result.data;\n    const newTask = {\n      title: aiTask.title,\n      description: aiTask.description,\n      status: aiTask.status || \"not-started\",\n      deadline: aiTask.deadline,\n      reminders: aiTask.reminders || [],\n    };\n\n    // Close modal and navigate to editor with task data\n    onClose();\n    navigate(\"/tasks/new/edit\", { state: { task: newTask } });\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleQuickGenerate();\n    }\n  };\n\n  return (\n    <div className=\"quick-mode\">\n      <div className=\"quick-mode-content\">\n        <label className=\"form-label\">Describe your task:</label>\n        <textarea\n          ref={inputRef}\n          className=\"form-control\"\n          rows={4}\n          value={quickPrompt}\n          onChange={(e) => setQuickPrompt(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\"E.g., 'Prepare project report by Friday 5PM with reminders 1 day and 1 hour before'\"\n          disabled={isLoading}\n        />\n        <div className=\"quick-mode-suggestions\">\n          <small>Try these:</small>\n          {[\n            \"Schedule dentist appointment next Tuesday at 3pm\",\n            \"Plan weekend shopping with 1 day reminder\",\n            \"Prepare presentation for Monday with daily reminders\",\n          ].map((text) => (\n            <button\n              key={text}\n              className=\"suggestion-chip\"\n              onClick={() => setQuickPrompt(text)}\n              disabled={isLoading}\n            >\n              {text}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"modal-actions\">\n        <button\n          className=\"btn btn-secondary\"\n          onClick={onClose}\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={handleQuickGenerate}\n          disabled={!quickPrompt.trim() || isLoading}\n        >\n          {isLoading ? (\n            <>\n              <span className=\"spinner-border spinner-border-sm me-2\"></span>{\" \"}\n              Generating...\n            </>\n          ) : (\n            <>\n              <i className=\"bi bi-magic me-2\"></i> Generate Task\n            </>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickMode;\n","import React from \"react\";\n\nconst ChatMessage = ({ msg, user, theme }) => {\n  const userAvatar = user.avatar;\n  const initials =\n    (user.firstName?.[0]?.toUpperCase() || \"\") +\n    (user.lastName?.[0]?.toUpperCase() || \"\");\n  const displayInitials = initials || \"?\";\n\n  // Format timestamp for WhatsApp-like display\n  const formatTime = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now - date) / (1000 * 60 * 60);\n\n    // If message is from today, show time only\n    if (diffInHours < 24 && date.getDate() === now.getDate()) {\n      return date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n    }\n\n    // If yesterday\n    if (diffInHours < 48 && date.getDate() === now.getDate() - 1) {\n      return `Yesterday ${date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })}`;\n    }\n\n    // Otherwise show date and time\n    return (\n      date.toLocaleDateString([], {\n        month: \"short\",\n        day: \"numeric\",\n      }) +\n      \" \" +\n      date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })\n    );\n  };\n\n  // Format message content with basic markdown-like formatting\n  const formatMessageContent = (content) => {\n    if (!content) return \"\";\n\n    // Split by numbered lists (1., 2., etc.)\n    const parts = content.split(/(\\d+\\.\\s+[^\\n]+)/g);\n\n    return parts.map((part, index) => {\n      // Check if this is a numbered list item\n      if (/^\\d+\\.\\s+/.test(part)) {\n        const match = part.match(/^(\\d+)\\.\\s+(.+)/);\n        if (match) {\n          return (\n            <div\n              key={index}\n              style={{ marginLeft: \"0.5rem\", marginTop: \"0.25rem\" }}\n            >\n              <strong>{match[1]}.</strong> {match[2]}\n            </div>\n          );\n        }\n      }\n\n      // Process inline formatting\n      const processedPart = part\n        .split(/(\\*\\*[^*]+\\*\\*)/g) // Bold text\n        .map((segment, i) => {\n          if (segment.startsWith(\"**\") && segment.endsWith(\"**\")) {\n            return <strong key={i}>{segment.slice(2, -2)}</strong>;\n          }\n          return segment;\n        });\n\n      return <span key={index}>{processedPart}</span>;\n    });\n  };\n\n  return (\n    <div className={`chat-message ${msg.role}`}>\n      <div className=\"message-avatar\">\n        {msg.role === \"user\" ? (\n          userAvatar ? (\n            <img\n              src={userAvatar}\n              alt=\"User\"\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: \"50%\",\n                objectFit: \"cover\",\n              }}\n            />\n          ) : (\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: \"50%\",\n                backgroundColor: theme === \"dark\" ? \"#ffffff\" : \"#000000\",\n                color: theme === \"dark\" ? \"#000000\" : \"#ffffff\",\n                fontWeight: \"bold\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                fontSize: \"0.85rem\",\n              }}\n            >\n              {displayInitials}\n            </div>\n          )\n        ) : (\n          <i className=\"bi bi-robot\"></i>\n        )}\n      </div>\n      <div className=\"message-content\">\n        <div className=\"message-text\">\n          <div className=\"message-text-content\">\n            {formatMessageContent(msg.content)}\n          </div>\n          <div className=\"message-time\">\n            {formatTime(msg.timestamp)}\n            {msg.role === \"user\" && (\n              <i\n                className=\"bi bi-check-all\"\n                style={{ fontSize: \"0.75rem\" }}\n              ></i>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { deleteTask, updateTask } from \"../../../services/api\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ConfirmationModal from \"../../layout/ConfirmationModal\";\nimport TaskReminders from \"./TaskReminders\";\nimport { formatRelativeTime, formatDateTimeLocal } from \"../../../utils/dateUtils\";\nimport { formatHoursLabel, getReminderSummary, normalizeRemindersBeforeSave } from \"../../../utils/reminderUtils\";\nimport { getStatusColor } from \"../../../utils/statusUtils\";\nimport { REMINDER_INTERVALS } from \"../../../constants/appConstants\";\nimport \"./Styles/TaskItem.css\";\n\nconst TaskItem = ({\n  theme,\n  task,\n  setTasks,\n  isNewTask = false,\n  onSave = () => {},\n  onCancel = () => {},\n}) => {\n  const [isEditing, setIsEditing] = useState(isNewTask);\n  const [tempTitle, setTempTitle] = useState(task.title);\n  const [tempDescription, setTempDescription] = useState(task.description);\n  const [tempStatus, setTempStatus] = useState(task.status);\n  const [tempDeadline, setTempDeadline] = useState(task.deadline || null);\n  const [tempReminders, setTempReminders] = useState(\n    Array.isArray(task.reminders) ? task.reminders : []\n  );\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const cardRef = useRef(null);\n\n  // ✅ Ensure reminders update when the AI-created task is previewed\n  useEffect(() => {\n    if (Array.isArray(task.reminders) && task.reminders.length > 0) {\n      setTempReminders(task.reminders);\n    }\n  }, [task.reminders]);\n\n  const handleCancel = useCallback(() => {\n    setTempTitle(task.title);\n    setTempDescription(task.description);\n    setTempStatus(task.status);\n    setTempDeadline(task.deadline || null);\n    setTempReminders(Array.isArray(task.reminders) ? task.reminders : []);\n    isNewTask ? onCancel(task.id) : setIsEditing(false);\n  }, [\n    task.title,\n    task.description,\n    task.status,\n    task.deadline,\n    task.reminders,\n    isNewTask,\n    onCancel,\n    task.id,\n  ]);\n\n  useEffect(() => {\n    const handleClickOutside = (e) => {\n      if (isEditing && cardRef.current && !cardRef.current.contains(e.target)) {\n        handleCancel();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [isEditing, handleCancel]);\n\n  const handleSave = async () => {\n    if (!tempTitle.trim() || !tempDescription.trim()) return;\n\n    setIsLoading(true);\n\n    const changed =\n      tempTitle !== task.title ||\n      tempDescription !== task.description ||\n      tempStatus !== task.status ||\n      tempDeadline !== task.deadline ||\n      JSON.stringify(tempReminders) !== JSON.stringify(task.reminders);\n\n    if (!changed && !isNewTask) {\n      setIsEditing(false);\n      setIsLoading(false);\n      return;\n    }\n\n    const now = new Date();\n    const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n    const diffInHours =\n      deadlineDate && deadlineDate > now\n        ? (deadlineDate - now) / (1000 * 60 * 60)\n        : 0;\n\n    const regenerateRecurringReminders = (reminders) => {\n      const hasDaily = reminders.some((r) => r.type === \"daily\");\n      const hasWeekly = reminders.some((r) => r.type === \"weekly\");\n\n      let filteredReminders = reminders.filter(\n        (r) =>\n          (r.type === \"one-time\" || !r.type) && r.remindBefore <= diffInHours\n      );\n\n      if (hasDaily && diffInHours > 0) {\n        const maxDays = Math.floor(diffInHours / 24);\n        for (let day = 1; day <= maxDays; day++) {\n          filteredReminders.push({\n            remindBefore: day * 24,\n            sent: false,\n            type: \"daily\",\n            dayNumber: day,\n          });\n        }\n      }\n\n      if (hasWeekly && diffInHours > 0) {\n        const maxWeeks = Math.floor(diffInHours / (24 * 7));\n        for (let week = 1; week <= maxWeeks; week++) {\n          filteredReminders.push({\n            remindBefore: week * 24 * 7,\n            sent: false,\n            type: \"weekly\",\n            weekNumber: week,\n          });\n        }\n      }\n\n      return filteredReminders;\n    };\n\n    const finalReminders =\n      diffInHours > 0 ? regenerateRecurringReminders(tempReminders) : [];\n\n    const updatedTaskData = {\n      title: tempTitle.trim(),\n      description: tempDescription.trim(),\n      status: tempStatus,\n      deadline: tempDeadline ? deadlineDate.toISOString() : null,\n      reminders: finalReminders,\n    };\n\n    try {\n      if (isNewTask) {\n        onSave({ ...task, ...updatedTaskData });\n      } else {\n        const response = await updateTask(task.id, updatedTaskData);\n        setTasks((prev) =>\n          prev.map((t) => (t.id === response.data.id ? response.data : t))\n        );\n        setIsEditing(false);\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = () => setShowDeleteModal(true);\n  const confirmDelete = async () => {\n    setIsLoading(true);\n    try {\n      await deleteTask(task.id);\n      setTasks((prev) => prev.filter((t) => t.id !== task.id));\n      setShowDeleteModal(false);\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    } finally {\n      setIsLoading(false);\n      setShowDeleteModal(false);\n    }\n  };\n\n  const getStripColor = (status) => {\n    switch (status) {\n      case \"completed\":\n        return \"#007a00\";\n      case \"in-progress\":\n        return \"#daa520\";\n      default:\n        return \"#a00000\";\n    }\n  };\n\n  const stripColor = getStripColor(task.status);\n  const isDeadlineInFuture =\n    tempDeadline && new Date(tempDeadline) > new Date();\n\n  // ✅ Fixed — correctly include \"one-time\" reminders\n  const getReminderSummary = () => {\n    if (!tempReminders || tempReminders.length === 0) return null;\n\n    const dailyCount = tempReminders.filter((r) => r.type === \"daily\").length;\n    const weeklyCount = tempReminders.filter((r) => r.type === \"weekly\").length;\n    const oneTimeCount = tempReminders.filter(\n      (r) => r.type === \"one-time\" || !r.type\n    ).length;\n\n    const parts = [];\n    if (dailyCount > 0) parts.push(`Daily (${dailyCount})`);\n    if (weeklyCount > 0) parts.push(`Weekly (${weeklyCount})`);\n    if (oneTimeCount > 0) parts.push(`One-time (${oneTimeCount})`);\n\n    return parts.length > 0 ? parts.join(\", \") : null;\n  };\n\n  const reminderSummary = getReminderSummary();\n\n  return (\n    <>\n      <div\n        ref={cardRef}\n        className={`task-card ${theme === \"dark\" ? \"dark\" : \"\"} ${\n          isLoading ? \"loading\" : \"\"\n        } ${isNewTask ? \"new-task\" : \"\"}`}\n        onClick={() => !isEditing && setIsEditing(true)}\n      >\n        <div\n          className=\"task-strip\"\n          style={{ backgroundColor: stripColor }}\n        ></div>\n\n        <div className=\"task-card-content\">\n          {!isEditing && (\n            <i\n              className={`bi ${\n                task.status === \"completed\"\n                  ? \"bi-check-circle\"\n                  : task.status === \"in-progress\"\n                  ? \"bi-hourglass\"\n                  : \"bi-ban\"\n              } status-icon`}\n              style={{ color: stripColor }}\n            />\n          )}\n\n          {isEditing ? (\n            <div className=\"task-form-grid\">\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={tempTitle}\n                  onChange={(e) => setTempTitle(e.target.value)}\n                  placeholder=\"Enter task title...\"\n                />\n              </div>\n\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Description</label>\n                <textarea\n                  className=\"form-control\"\n                  rows={3}\n                  value={tempDescription}\n                  onChange={(e) => setTempDescription(e.target.value)}\n                  placeholder=\"Enter task description...\"\n                />\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Status</label>\n                <select\n                  className=\"form-select\"\n                  value={tempStatus}\n                  onChange={(e) => setTempStatus(e.target.value)}\n                >\n                  <option value=\"not-started\">Not Started</option>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Deadline</label>\n                <input\n                  type=\"datetime-local\"\n                  className=\"form-control\"\n                  value={tempDeadline ? formatDateTimeLocal(tempDeadline) : \"\"}\n                  onChange={(e) => setTempDeadline(e.target.value)}\n                />\n              </div>\n\n              {isDeadlineInFuture && (\n                <div className=\"task-form-group full-width\">\n                  <TaskReminders\n                    tempDeadline={tempDeadline}\n                    tempReminders={tempReminders}\n                    setTempReminders={setTempReminders}\n                    theme={theme}\n                    ALL_INTERVALS={REMINDER_INTERVALS}\n                  />\n                </div>\n              )}\n            </div>\n          ) : (\n            <>\n              <h5 className=\"task-title\" style={{ color: stripColor }}>\n                {tempTitle}\n              </h5>\n              <p className=\"task-description\">{tempDescription}</p>\n            </>\n          )}\n\n          <div className=\"task-metadata\">\n            <div className=\"task-metadata-item\">\n              <strong>Created</strong>\n              <span>{formatRelativeTime(task.createdAt)}</span>\n            </div>\n            <div className=\"task-metadata-item\">\n              <strong>Deadline</strong>\n              <span>\n                {task.deadline\n                  ? formatRelativeTime(task.deadline)\n                  : \"No deadline set\"}\n              </span>\n            </div>\n          </div>\n\n          {isEditing && (\n            <div className=\"task-actions\">\n              {!isNewTask && (\n                <button\n                  className={`btn ${\n                    theme === \"dark\" ? \"btn-outline-danger\" : \"btn-secondary\"\n                  }`}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleDelete();\n                  }}\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Deleting...\" : \"Delete\"}\n                </button>\n              )}\n              <button\n                className={`btn ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-dark\"\n                }`}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleSave();\n                }}\n                disabled={\n                  !tempTitle.trim() || !tempDescription.trim() || isLoading\n                }\n              >\n                {isLoading ? \"Saving...\" : \"Save\"}\n              </button>\n            </div>\n          )}\n\n          {/* ✅ Reminders now always show when available */}\n          {!isEditing && reminderSummary && (\n            <div\n              className=\"reminder-indicator\"\n              title={`Reminders: ${reminderSummary}`}\n            >\n              <i className=\"bi bi-clock\"></i>\n              <small>{reminderSummary}</small>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <ConfirmationModal\n        theme={theme}\n        show={showDeleteModal}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        onConfirm={confirmDelete}\n        onCancel={() => setShowDeleteModal(false)}\n      />\n    </>\n  );\n};\n\nexport default TaskItem;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { normalizeRemindersBeforeSave } from \"../../../utils/reminderUtils\";\n\nimport {\n  sendAIChatMessage,\n  generateAITask,\n  updateTask,\n  deleteTask,\n  createTask,\n} from \"../../../services/api\";\nimport ChatMessage from \"./ChatMessage\";\nimport TaskItem from \"../taskItem/TaskItem\";\nimport { useAuth } from \"../../../context/AuthContext\";\nimport { STORAGE_KEYS } from \"../../../constants/appConstants\";\n\nconst CHAT_HISTORY_KEY = STORAGE_KEYS.AI_CHAT_HISTORY;\n\nconst ChatMode = ({ setError, theme, refreshTasks }) => {\n  const { user } = useAuth();\n  \n  // Load chat history from localStorage on mount\n  const [chatMessages, setChatMessages] = useState(() => {\n    try {\n      const saved = localStorage.getItem(CHAT_HISTORY_KEY);\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error(\"Error loading chat history:\", error);\n      return [];\n    }\n  });\n  \n  const [chatInput, setChatInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewTask, setPreviewTask] = useState(null);\n  const chatEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatMessages, previewTask]);\n\n  // Save chat history to localStorage whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(chatMessages));\n    } catch (error) {\n      console.error(\"Error saving chat history:\", error);\n    }\n  }, [chatMessages]);\n\n  /* ====================================================\n     Send Message to AI (chatConversation)\n  ==================================================== */\n  const handleChatSend = async () => {\n    if (!chatInput.trim()) return;\n\n    const userMessage = {\n      role: \"user\",\n      content: chatInput.trim(),\n      timestamp: new Date().toISOString(),\n    };\n\n    setChatMessages((prev) => [...prev, userMessage]);\n    setChatInput(\"\");\n    setIsLoading(true);\n    setError(null);\n\n    const conversationHistory = chatMessages.map((msg) => ({\n      role: msg.role,\n      content: msg.content,\n    }));\n\n    const result = await sendAIChatMessage(\n      userMessage.content,\n      conversationHistory\n    );\n\n    setIsLoading(false);\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const { reply, previewUpdate } = result.data;\n\n    if (previewUpdate && previewUpdate.reminders) {\n      previewUpdate.reminders = normalizeRemindersBeforeSave(\n        previewUpdate.reminders,\n        previewUpdate.deadline\n      );\n    }\n\n    // Add assistant's reply\n    setChatMessages((prev) => [\n      ...prev,\n      {\n        role: \"assistant\",\n        content: reply,\n        timestamp: new Date().toISOString(),\n      },\n    ]);\n\n    // If AI suggests update/delete – show inline TaskItem\n    if (previewUpdate) {\n      setPreviewTask({\n        ...previewUpdate,\n        _aiSuggested: true,\n        isUpdate:\n          previewUpdate.action === \"update\" ||\n          previewUpdate.action === \"delete\",\n        isNewTask: previewUpdate.action === \"create\" || previewUpdate.isNewTask,\n        createdAt: previewUpdate.createdAt || new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n  };\n\n  /* ====================================================\n     Generate new task from chat\n  ==================================================== */\n  const handleGenerateFromChat = async () => {\n    if (chatMessages.length === 0) {\n      setError(\"No conversation found to generate task from\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    const conversationSummary = chatMessages\n      .map(\n        (msg) => `${msg.role === \"user\" ? \"User\" : \"Assistant\"}: ${msg.content}`\n      )\n      .join(\"\\n\");\n\n    const contextualPrompt = `Based on this conversation, create a task:\\n\\n${conversationSummary}\\n\\nCreate a detailed task with appropriate deadline and reminders.`;\n\n    const result = await generateAITask(contextualPrompt);\n    setIsLoading(false);\n\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const aiTask = result.data;\n    setPreviewTask({\n      ...aiTask,\n      id: `temp-${Date.now()}`,\n      status: aiTask.status || \"not-started\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      priority: 1,\n      _aiSuggested: true,\n      isNewTask: true,\n      action: \"create\",\n    });\n  };\n\n  /* ====================================================\n     Confirm or Cancel AI Update / Delete\n  ==================================================== */\n  const handleConfirmUpdate = async (task) => {\n    try {\n      if (!task) return;\n      setIsLoading(true);\n      setError(null);\n\n      // Normalize reminders before saving\n      const normalizedReminders = normalizeRemindersBeforeSave(\n        task.reminders || [],\n        task.deadline\n      );\n\n      let resultMessage = \"\";\n\n      if (task.action === \"delete\") {\n        await deleteTask(task.id);\n        resultMessage = `🗑️ Deleted task \"${task.title}\".`;\n      } else if (task.action === \"create\") {\n        await createTask({\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          deadline: task.deadline,\n          reminders: normalizedReminders,\n        });\n        resultMessage = `✨ Created new task \"${task.title}\".`;\n      } else {\n        await updateTask(task.id, {\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          deadline: task.deadline,\n          reminders: normalizedReminders,\n        });\n        resultMessage = `✅ Updated task \"${task.title}\".`;\n      }\n\n      await refreshTasks();\n      setPreviewTask(null);\n      setChatMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: resultMessage,\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n    } catch (error) {\n      console.error(\"Error applying AI update:\", error);\n      setError(\"Failed to apply update.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCancelPreview = () => setPreviewTask(null);\n\n  /* ====================================================\n     Helpers\n  ==================================================== */\n  const resetChat = () => {\n    setChatMessages([]);\n    setError(null);\n    setPreviewTask(null);\n    try {\n      localStorage.removeItem(CHAT_HISTORY_KEY);\n    } catch (error) {\n      console.error(\"Error clearing chat history:\", error);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleChatSend();\n    }\n  };\n\n  /* ====================================================\n     RENDER\n  ==================================================== */\n  return (\n    <div className=\"chat-mode\">\n      <div className=\"chat-messages\">\n        {/* Empty Chat State */}\n        {chatMessages.length === 0 && !previewTask ? (\n          <div className=\"chat-empty-state\">\n            <i className=\"bi bi-chat-heart\"></i>\n            <p>Start a conversation with AI</p>\n            <small>Ask questions or describe your task step by step</small>\n          </div>\n        ) : (\n          chatMessages.map((msg, index) => (\n            <ChatMessage key={index} msg={msg} user={user} theme={theme} />\n          ))\n        )}\n\n        {/* Inline Task Preview using TaskItem */}\n        {previewTask && (\n          <div className=\"chat-message assistant\">\n            <div className=\"message-avatar\">\n              <i className=\"bi bi-robot\"></i>\n            </div>\n            <div className=\"message-content w-100\">\n              {previewTask.action === \"delete\" ? (\n                <div\n                  className={`ai-delete-preview p-3 rounded ${\n                    theme === \"dark\"\n                      ? \"bg-dark text-light\"\n                      : \"bg-light text-dark\"\n                  }`}\n                >\n                  <h6 className=\"mb-2\">\n                    🗑️ Confirm delete: <strong>{previewTask.title}</strong>?\n                  </h6>\n                  <div className=\"d-flex gap-2\">\n                    <button\n                      className=\"btn btn-danger btn-sm\"\n                      onClick={() => handleConfirmUpdate(previewTask)}\n                      disabled={isLoading}\n                    >\n                      {isLoading ? \"Deleting...\" : \"Delete\"}\n                    </button>\n                    <button\n                      className=\"btn btn-secondary btn-sm\"\n                      onClick={handleCancelPreview}\n                      disabled={isLoading}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <TaskItem\n                  theme={theme}\n                  task={{\n                    ...previewTask,\n                    title: previewTask.title || \"\",\n                    description: previewTask.description || \"\",\n                    reminders: Array.isArray(previewTask.reminders)\n                      ? previewTask.reminders\n                      : [],\n                  }}\n                  isNewTask={true}\n                  onSave={handleConfirmUpdate}\n                  onCancel={handleCancelPreview}\n                />\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Typing indicator */}\n        {isLoading && (\n          <div className=\"chat-message assistant\">\n            <div className=\"message-avatar\">\n              <i className=\"bi bi-robot\"></i>\n            </div>\n            <div className=\"message-content\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={chatEndRef} />\n      </div>\n\n      {/* Chat Input */}\n      <div className=\"chat-input-container\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          className=\"form-control\"\n          value={chatInput}\n          onChange={(e) => setChatInput(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <button\n          className=\"send-button\"\n          onClick={handleChatSend}\n          disabled={!chatInput.trim() || isLoading}\n        >\n          <i className=\"bi bi-send-fill\"></i>\n        </button>\n      </div>\n\n      {/* Chat Footer Actions */}\n      <div className=\"chat-actions\">\n        <button\n          className=\"btn btn-sm btn-outline-secondary\"\n          onClick={resetChat}\n          disabled={isLoading || chatMessages.length === 0}\n        >\n          <i className=\"bi bi-arrow-clockwise me-1\"></i> Clear Chat\n        </button>\n        <button\n          className=\"btn btn-sm btn-primary\"\n          onClick={handleGenerateFromChat}\n          disabled={isLoading || chatMessages.length === 0}\n        >\n          <i className=\"bi bi-magic me-1\"></i> Generate Task\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMode;","import TaskItem from \"../taskItem/TaskItem\";\n\nconst TaskPreviewModal = ({ theme, task, onClose, onSave }) => (\n  <div className=\"ai-preview-overlay\" onClick={onClose}>\n    <div className=\"ai-preview-modal\" onClick={(e) => e.stopPropagation()}>\n      <h5 className=\"mb-3\">\n        <i className=\"bi bi-eye\"></i> Task Preview\n      </h5>\n\n      <TaskItem\n        theme={theme}\n        task={task}\n        isNewTask={true}\n        onSave={onSave}\n        onCancel={onClose}\n      />\n\n      <div className=\"text-end mt-2\">\n        <button className=\"btn btn-secondary\" onClick={onClose}>\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default TaskPreviewModal;\n","import { useState, useEffect, useCallback } from \"react\";\nimport QuickMode from \"./QuickMode\";\nimport ChatMode from \"./ChatMode\";\nimport TaskPreviewModal from \"./TaskPreviewModal\";\nimport \"./Styles/AIChatModal.css\";\nimport { STORAGE_KEYS, AI_SUGGESTIONS } from \"../../../constants/appConstants\";\n\nconst AIChatModal = ({\n  show,\n  onClose,\n  onTaskGenerated,\n  theme,\n  refreshTasks,\n}) => {\n  const [mode, setMode] = useState(\"quick\");\n  const [previewTask, setPreviewTask] = useState(null);\n  const [error, setError] = useState(null);\n  const [isClosing, setIsClosing] = useState(false);\n\n  // Load last used mode from localStorage\n  useEffect(() => {\n    try {\n      const savedMode = localStorage.getItem(\"ai_chat_mode\");\n      if (savedMode && (savedMode === \"quick\" || savedMode === \"chat\")) {\n        setMode(savedMode);\n      }\n    } catch (error) {\n      console.error(\"Error loading chat mode:\", error);\n    }\n  }, []);\n\n  // Save mode preference when it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"ai_chat_mode\", mode);\n    } catch (error) {\n      console.error(\"Error saving chat mode:\", error);\n    }\n  }, [mode]);\n\n  const handleClose = useCallback(() => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setIsClosing(false);\n      setError(null);\n      onClose();\n    }, 250);\n  }, [onClose]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === \"Escape\" && show && !previewTask) {\n        handleClose();\n      }\n    };\n\n    if (show) {\n      document.addEventListener(\"keydown\", handleEscape);\n      document.body.style.overflow = \"hidden\";\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape);\n      document.body.style.overflow = \"unset\";\n    };\n  }, [show, previewTask, handleClose]);\n\n  const handleOverlayClick = (e) => {\n    if (e.target === e.currentTarget && !previewTask) {\n      handleClose();\n    }\n  };\n\n  if (!show && !isClosing) return null;\n\n  return (\n    <div\n      className={`ai-modal-overlay ${isClosing ? \"closing\" : \"\"}`}\n      onClick={handleOverlayClick}\n    >\n      <div\n        className={`ai-modal-content ${theme === \"dark\" ? \"dark-mode\" : \"\"} ${\n          isClosing ? \"closing\" : \"\"\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"ai-modal-header\">\n          <h3>\n            <i className=\"bi bi-robot\"></i> AI Task Assistant\n          </h3>\n          <button\n            className=\"close-button\"\n            onClick={handleClose}\n            aria-label=\"Close AI Assistant\"\n          >\n            <i className=\"bi bi-x-lg\"></i>\n          </button>\n        </div>\n\n        {/* Mode Selector */}\n        <div className=\"ai-mode-selector\">\n          <button\n            className={`mode-button ${mode === \"quick\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"quick\")}\n            aria-pressed={mode === \"quick\"}\n          >\n            <i className=\"bi bi-lightning-charge\"></i> Quick\n          </button>\n          <button\n            className={`mode-button ${mode === \"chat\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"chat\")}\n            aria-pressed={mode === \"chat\"}\n          >\n            <i className=\"bi bi-chat-dots\"></i> Chat\n          </button>\n        </div>\n\n        {/* Error Banner */}\n        {error && (\n          <div className=\"error-banner\">\n            <i className=\"bi bi-exclamation-triangle\"></i> {error}\n            <button\n              onClick={() => setError(null)}\n              style={{\n                marginLeft: \"auto\",\n                background: \"none\",\n                border: \"none\",\n                color: \"inherit\",\n                cursor: \"pointer\",\n                padding: \"0 4px\",\n              }}\n              aria-label=\"Dismiss error\"\n            >\n              <i className=\"bi bi-x-lg\"></i>\n            </button>\n          </div>\n        )}\n\n        {/* Mode Content */}\n        {mode === \"quick\" ? (\n          <QuickMode\n            setError={setError}\n            setPreviewTask={setPreviewTask}\n            onTaskGenerated={onTaskGenerated}\n            onClose={handleClose}\n            theme={theme}\n          />\n        ) : (\n          <ChatMode\n            setError={setError}\n            theme={theme}\n            refreshTasks={refreshTasks}\n            onClose={handleClose}\n          />\n        )}\n      </div>\n\n      {/* Preview Modal */}\n      {previewTask && (\n        <TaskPreviewModal\n          theme={theme}\n          task={previewTask}\n          onClose={() => setPreviewTask(null)}\n          onSave={(task) => {\n            onTaskGenerated(task);\n            setPreviewTask(null);\n            handleClose();\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AIChatModal;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchTasks, updateTaskPriority } from \"../../services/api\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport TaskCard from \"./taskItem/TaskCard\";\nimport AIChatModal from \"./AIChatModal/AIChatModal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./TaskList.css\";\nimport { DND_CONFIG } from \"../../constants/appConstants\";\n\nimport {\n  DndContext,\n  closestCenter,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n  MouseSensor,\n  TouchSensor,\n} from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  arrayMove,\n  useSortable,\n  rectSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\n\n// ---------- Sortable Task Card ----------\nconst SortableTask = ({ task, theme }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({\n    id: task.id,\n    transition: {\n      duration: 250,\n      easing: \"cubic-bezier(0.25, 0.8, 0.25, 1)\",\n    },\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition:\n      transition || \"transform 250ms cubic-bezier(0.25, 0.8, 0.25, 1)\",\n    opacity: isDragging ? 0 : 1,\n    cursor: \"grab\",\n    // FIXED: Changed from \"none\" to \"manipulation\" to allow scrolling\n    touchAction: \"manipulation\",\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <TaskCard theme={theme} task={task} />\n    </div>\n  );\n};\n\n// ---------- Main TaskList Component ----------\nconst TaskList = ({ theme }) => {\n  const navigate = useNavigate();\n  const { user, logout } = useAuth();\n  const [tasks, setTasks] = useState(null);\n  const [showAIModal, setShowAIModal] = useState(false);\n  const [activeId, setActiveId] = useState(null);\n\n  // IMPROVED: Better touch sensor configuration for mobile\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        delay: 200, // Reduced from 250ms for better responsiveness\n        tolerance: 5, // Reduced from 8 for more precise control\n      },\n    }),\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    })\n  );\n\n  const loadTasks = useCallback(async () => {\n    if (user) {\n      try {\n        const response = await fetchTasks();\n        // Backend now returns { tasks: [...], pagination: {...} }\n        setTasks(response.data.tasks || response.data);\n      } catch (error) {\n        console.error(\"Error loading tasks:\", error);\n        if (error.response && error.response.status === 403) logout();\n      }\n    }\n  }, [user, logout]);\n\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n\n  const refreshTasks = async () => {\n    try {\n      const response = await fetchTasks();\n      // Backend now returns { tasks: [...], pagination: {...} }\n      const tasksData = response.data.tasks || response.data;\n      setTasks(tasksData);\n      return tasksData;\n    } catch (error) {\n      console.error(\"Error refreshing tasks:\", error);\n    }\n  };\n\n  // ---------- Drag & Drop ----------\n  const handleDragStart = (event) => {\n    setActiveId(event.active.id);\n  };\n\n  const handleDragEnd = async (event) => {\n    const { active, over } = event;\n    setActiveId(null);\n\n    if (!over || active.id === over.id) return;\n\n    setTasks((prevTasks) => {\n      const oldIndex = prevTasks.findIndex((t) => t.id === active.id);\n      const newIndex = prevTasks.findIndex((t) => t.id === over.id);\n\n      if (oldIndex === -1 || newIndex === -1) return prevTasks;\n\n      const reordered = arrayMove(prevTasks, oldIndex, newIndex);\n\n      // Update priorities in the backend\n      const updatePromises = reordered.map((task, idx) => {\n        const newPriority = idx + 1;\n        if (task.priority !== newPriority) {\n          return updateTaskPriority(task.id, newPriority).catch((err) => {\n            console.error(`Error updating priority for task ${task.id}:`, err);\n          });\n        }\n        return Promise.resolve();\n      });\n\n      Promise.all(updatePromises);\n\n      // Return reordered array with updated priorities\n      return reordered.map((task, idx) => ({\n        ...task,\n        priority: idx + 1,\n      }));\n    });\n  };\n\n  const handleDragCancel = () => {\n    setActiveId(null);\n  };\n\n  // ---------- Task Management ----------\n  const handleAddTask = () => {\n    navigate(\"/tasks/new/edit\");\n  };\n\n  const handleAITaskGenerated = (aiGeneratedTask) => {\n    // Navigate to editor with task data\n    navigate(\"/tasks/new/edit\", { state: { task: aiGeneratedTask } });\n  };\n\n  // ---------- Shimmer Loader ----------\n  const renderShimmerLoader = () => (\n    <div className=\"container mt-5\">\n      <div className=\"task-container\">\n        <div className=\"card-body p-3\">\n          <div className=\"d-flex flex-row justify-content-between align-items-center mb-3 header-container\">\n            <h2 className=\"card-title mb-0\">Your Tasks</h2>\n            <div className=\"d-flex gap-2 button-group\">\n              <button\n                className={`btn btn-outline-${\n                  theme === \"dark\" ? \"light\" : \"dark\"\n                } ai-button`}\n                disabled\n              >\n                <i className=\"bi bi-robot me-2\"></i>\n                <span className=\"button-text\">AI Assistant</span>\n              </button>\n\n              <button\n                className={`btn btn-outline-${\n                  theme === \"dark\" ? \"light\" : \"dark\"\n                } d-flex align-items-center gap-2`}\n                disabled\n              >\n                <i className=\"bi bi-plus-circle\"></i>\n                <span className=\"button-text\">New Task</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"shimmer-list\">\n            {Array.from({ length: 5 }).map((_, index) => (\n              <div key={index} className=\"shimmer-task-item\">\n                <div className=\"shimmer-task-header\"></div>\n                <div className=\"shimmer-task-body\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (!tasks) return renderShimmerLoader();\n\n  // Sort tasks by priority\n  const sortedTasks = [...tasks].sort((a, b) => a.priority - b.priority);\n  const activeTask = activeId ? tasks.find((t) => t.id === activeId) : null;\n\n  // ---------- Render ----------\n  return (\n    <>\n      <div className=\"container mt-5\">\n        <div className=\"task-container\">\n          <div className=\"card-body p-3\">\n            <div className=\"d-flex flex-row justify-content-between align-items-center mb-3 header-container\">\n              <h2 className=\"card-title mb-0\">Your Tasks</h2>\n              <div className=\"d-flex gap-2 button-group\">\n                <button\n                  className={`btn btn-outline-${\n                    theme === \"dark\" ? \"light\" : \"dark\"\n                  } ai-button`}\n                  onClick={() => setShowAIModal(true)}\n                >\n                  <i className=\"bi bi-robot me-2\"></i>\n                  <span className=\"button-text\">AI Assistant</span>\n                </button>\n\n                <button\n                  className={`btn btn-outline-${\n                    theme === \"dark\" ? \"light\" : \"dark\"\n                  } d-flex align-items-center gap-2`}\n                  onClick={handleAddTask}\n                >\n                  <i className=\"bi bi-plus-circle\"></i>\n                  <span className=\"button-text\">New Task</span>\n                </button>\n              </div>\n            </div>\n\n            {tasks.length === 0 ? (\n              <div className=\"empty-state\">\n                <i className=\"bi bi-clipboard-check empty-state-icon\"></i>\n                <p\n                  className={`text-${\n                    theme === \"dark\" ? \"light\" : \"muted\"\n                  } mb-2`}\n                >\n                  No tasks yet\n                </p>\n                <small className=\"text-muted\">\n                  Create your first task or use AI Assistant to get started\n                </small>\n              </div>\n            ) : (\n              <DndContext\n                sensors={sensors}\n                collisionDetection={closestCenter}\n                onDragStart={handleDragStart}\n                onDragEnd={handleDragEnd}\n                onDragCancel={handleDragCancel}\n              >\n                <SortableContext\n                  items={sortedTasks.map((t) => t.id)}\n                  strategy={rectSortingStrategy}\n                >\n                  <div className=\"task-list\">\n                    {sortedTasks.map((task) => (\n                      <SortableTask key={task.id} task={task} theme={theme} />\n                    ))}\n                  </div>\n                </SortableContext>\n\n                <DragOverlay\n                  adjustScale={false}\n                  dropAnimation={{\n                    duration: 300,\n                    easing: \"cubic-bezier(0.25, 0.8, 0.25, 1)\",\n                  }}\n                  style={{\n                    cursor: \"grabbing\",\n                  }}\n                >\n                  {activeTask ? (\n                    <div\n                      style={{\n                        transform: \"scale(1.03) rotate(2deg)\",\n                        cursor: \"grabbing\",\n                        boxShadow:\n                          \"0 12px 24px rgba(0, 0, 0, 0.25), 0 4px 8px rgba(0, 0, 0, 0.15)\",\n                        borderRadius: \"10px\",\n                        transition:\n                          \"all 150ms cubic-bezier(0.25, 0.8, 0.25, 1)\",\n                      }}\n                    >\n                      <TaskCard theme={theme} task={activeTask} />\n                    </div>\n                  ) : null}\n                </DragOverlay>\n              </DndContext>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <AIChatModal\n        show={showAIModal}\n        onClose={() => setShowAIModal(false)}\n        onTaskGenerated={handleAITaskGenerated}\n        theme={theme}\n        refreshTasks={refreshTasks}\n      />\n    </>\n  );\n};\n\nexport default TaskList;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { formatRelativeTime } from \"../../../utils/dateUtils\";\nimport { getStatusColor } from \"../../../utils/statusUtils\";\nimport { getReminderSummary } from \"../../../utils/reminderUtils\";\nimport \"./Styles/TaskCard.css\";\n\nconst TaskCard = ({ theme, task, demoMode = false }) => {\n  const navigate = useNavigate();\n\n  const handleClick = () => {\n    if (!demoMode) {\n      navigate(`/tasks/${task.id}/edit`);\n    }\n  };\n\n  const stripColor = getStatusColor(task.status);\n  const reminderSummary = getReminderSummary(task.reminders);\n\n  return (\n    <div\n      className={`task-card ${theme === \"dark\" ? \"dark\" : \"\"}`}\n      onClick={handleClick}\n    >\n      <div className=\"task-strip\" style={{ backgroundColor: stripColor }}></div>\n\n      <div className=\"task-card-content\">\n        <i\n          className={`bi ${\n            task.status === \"completed\"\n              ? \"bi-check-circle\"\n              : task.status === \"in-progress\"\n              ? \"bi-hourglass\"\n              : \"bi-ban\"\n          } status-icon`}\n          style={{ color: stripColor }}\n        />\n\n        <h5 className=\"task-title\" style={{ color: stripColor }}>\n          {task.title}\n        </h5>\n        <p className=\"task-description\">{task.description}</p>\n\n        <div className=\"task-metadata\">\n          <div className=\"task-metadata-item\">\n            <strong>Created</strong>\n            <span>{formatRelativeTime(task.createdAt)}</span>\n          </div>\n          <div className=\"task-metadata-item\">\n            <strong>Deadline</strong>\n            <span>\n              {task.deadline\n                ? formatRelativeTime(task.deadline)\n                : \"No deadline set\"}\n            </span>\n          </div>\n        </div>\n\n        {reminderSummary && (\n          <div\n            className=\"reminder-indicator\"\n            title={`Reminders: ${reminderSummary}`}\n          >\n            <i className=\"bi bi-clock\"></i>\n            <small>{reminderSummary}</small>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TaskCard;\n"],"names":["_ref","setError","onClose","navigate","useNavigate","quickPrompt","setQuickPrompt","useState","isLoading","setIsLoading","inputRef","useRef","useEffect","current","focus","handleQuickGenerate","async","trim","result","generateAITask","success","error","aiTask","data","newTask","title","description","status","deadline","reminders","state","task","_jsxs","className","children","_jsx","ref","rows","value","onChange","e","target","onKeyDown","key","shiftKey","preventDefault","placeholder","disabled","map","text","onClick","_Fragment","_user$firstName","_user$firstName$","_user$lastName","_user$lastName$","msg","user","theme","userAvatar","avatar","displayInitials","firstName","toUpperCase","lastName","concat","role","src","alt","style","width","height","borderRadius","objectFit","backgroundColor","color","fontWeight","display","alignItems","justifyContent","fontSize","content","split","part","index","test","match","marginLeft","marginTop","processedPart","segment","i","startsWith","endsWith","slice","formatMessageContent","timestamp","date","Date","now","diffInHours","getDate","toLocaleTimeString","hour","minute","toLocaleDateString","month","day","formatTime","setTasks","isNewTask","onSave","onCancel","isEditing","setIsEditing","tempTitle","setTempTitle","tempDescription","setTempDescription","tempStatus","setTempStatus","tempDeadline","setTempDeadline","tempReminders","setTempReminders","Array","isArray","showDeleteModal","setShowDeleteModal","cardRef","length","handleCancel","useCallback","id","handleClickOutside","contains","document","addEventListener","removeEventListener","stripColor","getStripColor","isDeadlineInFuture","reminderSummary","getReminderSummary","dailyCount","filter","r","type","weeklyCount","oneTimeCount","parts","push","join","formatDateTimeLocal","TaskReminders","ALL_INTERVALS","REMINDER_INTERVALS","formatRelativeTime","createdAt","stopPropagation","JSON","stringify","deadlineDate","finalReminders","hasDaily","some","hasWeekly","filteredReminders","remindBefore","maxDays","Math","floor","sent","dayNumber","maxWeeks","week","weekNumber","regenerateRecurringReminders","updatedTaskData","toISOString","_objectSpread","response","updateTask","prev","t","console","handleSave","ConfirmationModal","show","message","onConfirm","deleteTask","CHAT_HISTORY_KEY","STORAGE_KEYS","AI_CHAT_HISTORY","refreshTasks","useAuth","chatMessages","setChatMessages","saved","localStorage","getItem","parse","chatInput","setChatInput","previewTask","setPreviewTask","chatEndRef","_chatEndRef$current","scrollIntoView","behavior","setItem","handleChatSend","userMessage","conversationHistory","sendAIChatMessage","reply","previewUpdate","normalizeRemindersBeforeSave","_aiSuggested","isUpdate","action","updatedAt","handleConfirmUpdate","normalizedReminders","resultMessage","createTask","handleCancelPreview","ChatMessage","TaskItem","resetChat","removeItem","conversationSummary","contextualPrompt","priority","onTaskGenerated","mode","setMode","isClosing","setIsClosing","savedMode","handleClose","setTimeout","handleEscape","body","overflow","currentTarget","background","border","cursor","padding","QuickMode","ChatMode","TaskPreviewModal","SortableTask","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","duration","easing","CSS","Transform","toString","opacity","touchAction","TaskCard","_ref2","logout","tasks","showAIModal","setShowAIModal","activeId","setActiveId","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","PointerSensor","loadTasks","fetchTasks","from","_","sortedTasks","sort","a","b","activeTask","find","handleAddTask","DndContext","collisionDetection","closestCenter","onDragStart","event","active","onDragEnd","over","prevTasks","oldIndex","findIndex","newIndex","reordered","arrayMove","updatePromises","idx","newPriority","updateTaskPriority","catch","err","Promise","resolve","all","onDragCancel","handleDragCancel","SortableContext","items","strategy","rectSortingStrategy","DragOverlay","adjustScale","dropAnimation","boxShadow","AIChatModal","aiGeneratedTask","tasksData","demoMode","getStatusColor","handleClick"],"sourceRoot":""}