{"version":3,"file":"static/js/291.d0f24d18.chunk.js","mappings":"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","sources":["components/common/FormInput.js","components/common/AlertBanner.js","components/common/LoadingButton.js","constants/appConstants.js","hooks/useFormState.js","hooks/useApiError.js","utils/errorUtils.js","hooks/useLoading.js","hooks/usePasswordValidation.js","services/api.js","utils/reminderUtils.js"],"sourcesContent":["import React from \"react\";\nimport \"./FormInput.css\";\n\n/**\n * Reusable form input component\n * @param {string} type - Input type (text, email, password, etc.)\n * @param {string} id - Input ID\n * @param {string} name - Input name\n * @param {string} value - Input value\n * @param {function} onChange - Change handler\n * @param {string} placeholder - Placeholder text\n * @param {boolean} required - Whether field is required\n * @param {string} className - Additional CSS classes\n * @param {string} label - Label text (optional)\n * @param {string} error - Error message (optional)\n * @param {boolean} disabled - Whether input is disabled\n * @param {Object} rest - Other HTML input attributes\n */\nconst FormInput = ({\n  type = \"text\",\n  id,\n  name,\n  value,\n  onChange,\n  placeholder,\n  required = false,\n  className = \"\",\n  label,\n  error,\n  disabled = false,\n  ...rest\n}) => {\n  return (\n    <div className=\"form-input-wrapper mb-3\">\n      {label && (\n        <label htmlFor={id} className=\"form-label\">\n          {label}\n          {required && <span className=\"text-danger ms-1\">*</span>}\n        </label>\n      )}\n      <input\n        type={type}\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={required}\n        disabled={disabled}\n        className={`form-control py-2 ${error ? \"is-invalid\" : \"\"} ${className}`}\n        {...rest}\n      />\n      {error && <div className=\"invalid-feedback d-block\">{error}</div>}\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React from \"react\";\nimport \"./AlertBanner.css\";\n\n/**\n * Reusable alert banner component\n * @param {string} type - Alert type (success, error, warning, info)\n * @param {string} message - Message to display\n * @param {function} onClose - Close handler (optional)\n * @param {string} className - Additional CSS classes\n */\nconst AlertBanner = ({ type = \"info\", message, onClose, className = \"\" }) => {\n  if (!message) return null;\n\n  const alertClass = {\n    success: \"alert-success\",\n    error: \"alert-danger\",\n    warning: \"alert-warning\",\n    info: \"alert-info\",\n  }[type] || \"alert-info\";\n\n  return (\n    <div className={`alert ${alertClass} ${className} d-flex align-items-center justify-content-between`} role=\"alert\">\n      <span>{message}</span>\n      {onClose && (\n        <button\n          type=\"button\"\n          className=\"btn-close\"\n          onClick={onClose}\n          aria-label=\"Close\"\n        ></button>\n      )}\n    </div>\n  );\n};\n\nexport default AlertBanner;\n","import React from \"react\";\nimport \"./LoadingButton.css\";\n\n/**\n * Reusable button with loading state\n * @param {boolean} isLoading - Whether button is in loading state\n * @param {string} children - Button text content\n * @param {string} loadingText - Text to show when loading (optional)\n * @param {string} type - Button type (button, submit, reset)\n * @param {string} className - Additional CSS classes\n * @param {boolean} disabled - Whether button is disabled\n * @param {function} onClick - Click handler\n * @param {string} variant - Button variant (primary, secondary, danger, etc.)\n * @param {Object} rest - Other button attributes\n */\nconst LoadingButton = ({\n  isLoading = false,\n  children,\n  loadingText = \"Loading...\",\n  type = \"button\",\n  className = \"\",\n  disabled = false,\n  onClick,\n  variant = \"primary\",\n  ...rest\n}) => {\n  const buttonClass = variant === \"primary\"\n    ? \"sign-in-btn\"\n    : `btn-${variant}`;\n\n  return (\n    <button\n      type={type}\n      className={`btn ${buttonClass} ${className}`}\n      disabled={disabled || isLoading}\n      onClick={onClick}\n      {...rest}\n    >\n      {isLoading ? (\n        <>\n          <span\n            className=\"spinner-border spinner-border-sm me-2\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          ></span>\n          {loadingText}\n        </>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\nexport default LoadingButton;\n","// Application Constants\n// Centralized constants to avoid duplication across components\n\n// Reminder Intervals\nexport const REMINDER_INTERVALS = [\n  { value: 1, label: \"1 hr\" },\n  { value: 24, label: \"1 day\" },\n  { value: 168, label: \"1 week\" },\n];\n\n// Task Status Options\nexport const TASK_STATUS = {\n  NOT_STARTED: \"not-started\",\n  IN_PROGRESS: \"in-progress\",\n  COMPLETED: \"completed\",\n};\n\nexport const TASK_STATUS_LABELS = {\n  [TASK_STATUS.NOT_STARTED]: \"Not Started\",\n  [TASK_STATUS.IN_PROGRESS]: \"In Progress\",\n  [TASK_STATUS.COMPLETED]: \"Completed\",\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [TASK_STATUS.COMPLETED]: \"#007a00\",\n  [TASK_STATUS.IN_PROGRESS]: \"#daa520\",\n  [TASK_STATUS.NOT_STARTED]: \"#a00000\",\n};\n\n// LocalStorage Keys\nexport const STORAGE_KEYS = {\n  TOKEN: \"token\",\n  USER_INFO: \"userInfo\",\n  THEME: \"theme\",\n  AI_CHAT_MODE: \"ai_chat_mode\",\n  AI_CHAT_HISTORY: \"ai_chat_history\",\n};\n\n// Date/Time Constants\nexport const TIME_CONSTANTS = {\n  ONE_MINUTE_MS: 60 * 1000,\n  ONE_HOUR_MS: 60 * 60 * 1000,\n  ONE_DAY_MS: 24 * 60 * 60 * 1000,\n  TWO_DAYS_MS: 48 * 60 * 60 * 1000,\n  ONE_WEEK_MS: 7 * 24 * 60 * 60 * 1000,\n  ONE_HOUR_HOURS: 1,\n  ONE_DAY_HOURS: 24,\n  ONE_WEEK_HOURS: 168,\n};\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_URL || \"https://task-manager-sigma-ashen.vercel.app/api\",\n};\n\n// AI Chat Suggestion Prompts\nexport const AI_SUGGESTIONS = [\n  \"Schedule dentist appointment next Tuesday at 3pm\",\n  \"Plan weekend shopping with 1 day reminder\",\n  \"Prepare presentation for Monday with daily reminders\",\n];\n\n// Reminder Types\nexport const REMINDER_TYPES = {\n  ONE_TIME: \"one-time\",\n  DAILY: \"daily\",\n  WEEKLY: \"weekly\",\n};\n\n// Form Validation Messages\nexport const VALIDATION_MESSAGES = {\n  REQUIRED_FIELD: \"This field is required\",\n  INVALID_EMAIL: \"Please enter a valid email address\",\n  PASSWORD_MISMATCH: \"Passwords do not match\",\n  PASSWORD_TOO_SHORT: \"Password must be at least 8 characters\",\n  INVALID_PHONE: \"Please enter a valid phone number\",\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  LOGIN_FAILED: \"Login failed. Please try again.\",\n  REGISTRATION_FAILED: \"Registration failed. Please try again.\",\n  VERIFICATION_FAILED: \"Verification failed. Please try again.\",\n  PASSWORD_RESET_FAILED: \"Password reset failed. Please try again.\",\n  PASSWORD_CHANGE_FAILED: \"Failed to change password. Please try again.\",\n  PROFILE_UPDATE_FAILED: \"Failed to update profile. Please try again.\",\n  TASK_FETCH_FAILED: \"Failed to fetch tasks. Please try again.\",\n  TASK_CREATE_FAILED: \"Failed to create task. Please try again.\",\n  TASK_UPDATE_FAILED: \"Failed to update task. Please try again.\",\n  TASK_DELETE_FAILED: \"Failed to delete task. Please try again.\",\n  NETWORK_ERROR: \"Network error. Please check your connection.\",\n  GENERIC_ERROR: \"Something went wrong. Please try again.\",\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  LOGIN_SUCCESS: \"Login successful!\",\n  REGISTRATION_SUCCESS: \"Registration successful!\",\n  PASSWORD_RESET_SUCCESS: \"Password reset successful!\",\n  PASSWORD_CHANGE_SUCCESS: \"Password changed successfully!\",\n  PROFILE_UPDATE_SUCCESS: \"Profile updated successfully!\",\n  TASK_CREATE_SUCCESS: \"Task created successfully!\",\n  TASK_UPDATE_SUCCESS: \"Task updated successfully!\",\n  TASK_DELETE_SUCCESS: \"Task deleted successfully!\",\n};\n\n// Responsive Breakpoints\nexport const BREAKPOINTS = {\n  MOBILE: 720,\n  TABLET: 1024,\n  DESKTOP: 1025,\n};\n\n// Avatar Configuration\nexport const AVATAR_CONFIG = {\n  MAX_SIZE: 5 * 1024 * 1024, // 5MB\n  ALLOWED_TYPES: [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/gif\"],\n  SCALE_MIN: 1,\n  SCALE_MAX: 2,\n  CROP_SIZE: { width: 200, height: 200 },\n  QUALITY: 0.8,\n};\n\n// Drag and Drop Configuration\nexport const DND_CONFIG = {\n  ACTIVATION_CONSTRAINT: { distance: 10 },\n  TOUCH_DELAY: 200,\n  TOUCH_TOLERANCE: 5,\n};\n","import { useState, useCallback } from \"react\";\n\n/**\n * Custom hook for managing form state\n * @param {Object} initialState - Initial form values\n * @returns {Object} - { formData, handleChange, setFormData, resetForm }\n */\nconst useFormState = (initialState = {}) => {\n  const [formData, setFormData] = useState(initialState);\n\n  const handleChange = useCallback((e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value,\n    }));\n  }, []);\n\n  const resetForm = useCallback(() => {\n    setFormData(initialState);\n  }, [initialState]);\n\n  const setFieldValue = useCallback((name, value) => {\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  }, []);\n\n  return {\n    formData,\n    handleChange,\n    setFormData,\n    resetForm,\n    setFieldValue,\n  };\n};\n\nexport default useFormState;\n","import { useState, useCallback } from \"react\";\nimport { getErrorMessage, isAuthorizationError } from \"../utils/errorUtils\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\n\n/**\n * Custom hook for handling API errors\n * @param {boolean} handleAuth - Whether to handle authorization errors (default: true)\n * @returns {Object} - { error, setError, clearError, handleError }\n */\nconst useApiError = (handleAuth = true) => {\n  const [error, setError] = useState(\"\");\n  const { logout } = useAuth();\n  const navigate = useNavigate();\n\n  const clearError = useCallback(() => {\n    setError(\"\");\n  }, []);\n\n  const handleError = useCallback(\n    (err, defaultMessage) => {\n      console.error(\"API Error:\", err);\n\n      // Handle authorization errors\n      if (handleAuth && isAuthorizationError(err)) {\n        logout();\n        navigate(\"/login\");\n        setError(\"Session expired. Please login again.\");\n        return;\n      }\n\n      // Set error message\n      const message = getErrorMessage(err, defaultMessage);\n      setError(message);\n    },\n    [handleAuth, logout, navigate]\n  );\n\n  return {\n    error,\n    setError,\n    clearError,\n    handleError,\n  };\n};\n\nexport default useApiError;\n","import { ERROR_MESSAGES } from \"../constants/appConstants\";\n\n/**\n * Extracts error message from API error response\n * @param {Error} error - The error object from API call\n * @param {string} defaultMessage - Default message if none found\n * @returns {string} - The error message to display\n */\nexport const getErrorMessage = (error, defaultMessage = ERROR_MESSAGES.GENERIC_ERROR) => {\n  if (!error) return defaultMessage;\n\n  // Check for response data message\n  if (error.response?.data?.message) {\n    return error.response.data.message;\n  }\n\n  // Check for response data error\n  if (error.response?.data?.error) {\n    return error.response.data.error;\n  }\n\n  // Check for error message\n  if (error.message) {\n    return error.message;\n  }\n\n  return defaultMessage;\n};\n\n/**\n * Checks if error is an authorization error (403)\n * @param {Error} error - The error object\n * @returns {boolean} - True if 403 error\n */\nexport const isAuthorizationError = (error) => {\n  return error?.response?.status === 403 || error?.status === 403;\n};\n\n/**\n * Checks if error is an authentication error (401)\n * @param {Error} error - The error object\n * @returns {boolean} - True if 401 error\n */\nexport const isAuthenticationError = (error) => {\n  return error?.response?.status === 401 || error?.status === 401;\n};\n\n/**\n * Checks if error is a validation error (400 or 422)\n * @param {Error} error - The error object\n * @returns {boolean} - True if validation error\n */\nexport const isValidationError = (error) => {\n  const status = error?.response?.status || error?.status;\n  return status === 400 || status === 422;\n};\n\n/**\n * Checks if error is a network error\n * @param {Error} error - The error object\n * @returns {boolean} - True if network error\n */\nexport const isNetworkError = (error) => {\n  return error.message === \"Network Error\" || !error.response;\n};\n\n/**\n * Gets HTTP status code from error\n * @param {Error} error - The error object\n * @returns {number|null} - Status code or null\n */\nexport const getStatusCode = (error) => {\n  return error?.response?.status || error?.status || null;\n};\n\n/**\n * Formats validation errors from API response\n * @param {Error} error - The error object\n * @returns {Object} - Object with field names as keys and error messages as values\n */\nexport const getValidationErrors = (error) => {\n  if (!isValidationError(error)) return {};\n\n  const errors = error?.response?.data?.errors || {};\n  return errors;\n};\n","import { useState, useCallback } from \"react\";\n\n/**\n * Custom hook for managing loading state\n * @param {boolean} initialState - Initial loading state (default: false)\n * @returns {Object} - { isLoading, startLoading, stopLoading, setIsLoading }\n */\nconst useLoading = (initialState = false) => {\n  const [isLoading, setIsLoading] = useState(initialState);\n\n  const startLoading = useCallback(() => {\n    setIsLoading(true);\n  }, []);\n\n  const stopLoading = useCallback(() => {\n    setIsLoading(false);\n  }, []);\n\n  return {\n    isLoading,\n    startLoading,\n    stopLoading,\n    setIsLoading,\n  };\n};\n\nexport default useLoading;\n","import { useState, useCallback } from \"react\";\nimport { VALIDATION_MESSAGES } from \"../constants/appConstants\";\n\n/**\n * Custom hook for password validation\n * @returns {Object} - { passwordError, validatePassword, validatePasswordMatch, clearPasswordError }\n */\nconst usePasswordValidation = () => {\n  const [passwordError, setPasswordError] = useState(\"\");\n\n  const clearPasswordError = useCallback(() => {\n    setPasswordError(\"\");\n  }, []);\n\n  const validatePassword = useCallback((password) => {\n    if (!password) {\n      setPasswordError(VALIDATION_MESSAGES.REQUIRED_FIELD);\n      return false;\n    }\n\n    if (password.length < 8) {\n      setPasswordError(VALIDATION_MESSAGES.PASSWORD_TOO_SHORT);\n      return false;\n    }\n\n    clearPasswordError();\n    return true;\n  }, [clearPasswordError]);\n\n  const validatePasswordMatch = useCallback((password, confirmPassword) => {\n    if (password !== confirmPassword) {\n      setPasswordError(VALIDATION_MESSAGES.PASSWORD_MISMATCH);\n      return false;\n    }\n\n    clearPasswordError();\n    return true;\n  }, [clearPasswordError]);\n\n  const validatePasswordStrength = useCallback((password) => {\n    const hasUpperCase = /[A-Z]/.test(password);\n    const hasLowerCase = /[a-z]/.test(password);\n    const hasNumbers = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n\n    return {\n      isStrong: hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar,\n      hasUpperCase,\n      hasLowerCase,\n      hasNumbers,\n      hasSpecialChar,\n    };\n  }, []);\n\n  return {\n    passwordError,\n    validatePassword,\n    validatePasswordMatch,\n    validatePasswordStrength,\n    clearPasswordError,\n  };\n};\n\nexport default usePasswordValidation;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n  timeout: 30000, // 30 second timeout\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Enhanced error handler\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    return {\n      message: error.response.data?.error || \"An error occurred\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: \"No response from server. Please check your connection.\",\n      status: 0,\n    };\n  } else {\n    // Error setting up request\n    return {\n      message: error.message || \"An unexpected error occurred\",\n      status: -1,\n    };\n  }\n};\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const fetchTaskById = (taskId) => api.get(`/tasks/${taskId}`);\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n\n// AI-related endpoints\nexport const generateAITask = async (prompt) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat\",\n      { prompt },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport const sendAIChatMessage = async (message, conversationHistory = []) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat-conversation\",\n      { message, conversationHistory },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport default api;\n","import { REMINDER_INTERVALS, REMINDER_TYPES, TIME_CONSTANTS } from \"../constants/appConstants\";\n\n/**\n * Formats hours into human-readable label\n * @param {number} hours - Number of hours\n * @returns {string} - Formatted label (e.g., \"1 hr\", \"2 days\", \"1 week\")\n */\nexport const formatHoursLabel = (hours) => {\n  if (hours < 1) {\n    const minutes = Math.round(hours * 60);\n    return `${minutes} min${minutes !== 1 ? \"s\" : \"\"}`;\n  }\n\n  if (hours < TIME_CONSTANTS.ONE_DAY_HOURS) {\n    const formattedHours = hours % 1 === 0 ? hours : hours.toFixed(1);\n    return `${formattedHours} hr${hours !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const days = hours / TIME_CONSTANTS.ONE_DAY_HOURS;\n  if (days < 7) {\n    const formattedDays = days % 1 === 0 ? days : days.toFixed(1);\n    return `${formattedDays} day${days !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const weeks = days / 7;\n  const formattedWeeks = weeks % 1 === 0 ? weeks : weeks.toFixed(1);\n  return `${formattedWeeks} week${weeks !== 1 ? \"s\" : \"\"}`;\n};\n\n/**\n * Normalize and calculate remindBefore for all reminders before saving\n * @param {Array} reminders - List of reminder objects\n * @param {string|Date} deadline - ISO string or Date for task deadline\n * @returns {Array} - Normalized reminders\n */\nexport const normalizeRemindersBeforeSave = (reminders, deadline) => {\n  if (!Array.isArray(reminders) || !deadline) return reminders;\n\n  const deadlineDate = new Date(deadline);\n\n  return reminders.map((r) => {\n    // Skip invalid dates or reminders with explicit remindBefore\n    if (r.remindBefore && !r.customDate) return r;\n\n    // If a customDate exists, calculate remindBefore dynamically\n    if (r.customDate) {\n      const customDate = new Date(r.customDate);\n      if (!isNaN(customDate.getTime()) && customDate < deadlineDate) {\n        const diffHours = (deadlineDate - customDate) / (1000 * 60 * 60);\n        return { ...r, remindBefore: diffHours };\n      }\n    }\n\n    // Fallback: keep as-is\n    return r;\n  });\n};\n\n/**\n * Gets reminder summary for display\n * @param {Array} reminders - Array of reminder objects\n * @returns {string} - Summary text (e.g., \"1 hr, 1 day before\")\n */\nexport const getReminderSummary = (reminders) => {\n  if (!reminders || reminders.length === 0) return \"\";\n\n  const oneTimeReminders = reminders.filter(\n    (r) => !r.type || r.type === REMINDER_TYPES.ONE_TIME\n  );\n\n  const hasDailyReminders = reminders.some((r) => r.type === REMINDER_TYPES.DAILY);\n  const hasWeeklyReminders = reminders.some((r) => r.type === REMINDER_TYPES.WEEKLY);\n\n  const parts = [];\n\n  // Add one-time reminders\n  if (oneTimeReminders.length > 0) {\n    const labels = oneTimeReminders\n      .map((r) => formatHoursLabel(r.remindBefore))\n      .join(\", \");\n    parts.push(labels);\n  }\n\n  // Add recurring reminders\n  if (hasDailyReminders) parts.push(\"Daily\");\n  if (hasWeeklyReminders) parts.push(\"Weekly\");\n\n  return parts.join(\", \");\n};\n\n/**\n * Regenerates recurring reminders (daily or weekly)\n * @param {Array} currentReminders - Current reminder array\n * @param {string} type - \"daily\" or \"weekly\"\n * @param {Date} deadlineDate - Deadline date\n * @param {Date} now - Current date\n * @returns {Array} - Updated reminders array\n */\nexport const regenerateRecurringReminders = (\n  currentReminders,\n  type,\n  deadlineDate,\n  now = new Date()\n) => {\n  // Remove existing reminders of this type\n  const filtered = currentReminders.filter((r) => r.type !== type);\n\n  const diffInHours = (deadlineDate - now) / (1000 * 60 * 60);\n\n  if (type === REMINDER_TYPES.DAILY) {\n    const days = Math.floor(diffInHours / TIME_CONSTANTS.ONE_DAY_HOURS);\n    if (days < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= days; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_DAY_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.DAILY,\n        dayNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  if (type === REMINDER_TYPES.WEEKLY) {\n    const weeks = Math.floor(diffInHours / TIME_CONSTANTS.ONE_WEEK_HOURS);\n    if (weeks < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= weeks; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_WEEK_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.WEEKLY,\n        weekNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  return currentReminders;\n};\n\n/**\n * Checks if a reminder is one-time (not daily/weekly)\n * @param {Object} reminder - Reminder object\n * @returns {boolean} - True if one-time\n */\nexport const isOneTimeReminder = (reminder) => {\n  return !reminder.type || reminder.type === REMINDER_TYPES.ONE_TIME;\n};\n\n/**\n * Gets count of active reminders\n * @param {Array} reminders - Array of reminder objects\n * @returns {number} - Count of active reminders\n */\nexport const getActiveReminderCount = (reminders) => {\n  if (!reminders || !Array.isArray(reminders)) return 0;\n  return reminders.filter((r) => !r.sent).length;\n};\n\n/**\n * Validates a custom reminder date\n * @param {string|Date} customDate - Custom reminder date\n * @param {string|Date} deadline - Task deadline\n * @returns {Object} - { valid: boolean, error: string }\n */\nexport const validateCustomReminder = (customDate, deadline) => {\n  if (!customDate) {\n    return { valid: false, error: \"Please select a reminder date\" };\n  }\n\n  const reminderDate = new Date(customDate);\n  const deadlineDate = new Date(deadline);\n  const now = new Date();\n\n  if (isNaN(reminderDate.getTime())) {\n    return { valid: false, error: \"Invalid reminder date\" };\n  }\n\n  if (reminderDate <= now) {\n    return { valid: false, error: \"Reminder must be in the future\" };\n  }\n\n  if (reminderDate >= deadlineDate) {\n    return { valid: false, error: \"Reminder must be before deadline\" };\n  }\n\n  return { valid: true, error: null };\n};\n\n/**\n * Gets reminder intervals for selection\n * @returns {Array} - Array of interval objects\n */\nexport const getReminderIntervals = () => {\n  return REMINDER_INTERVALS;\n};\n"],"names":["_ref","type","id","name","value","onChange","placeholder","required","className","label","error","disabled","rest","_objectWithoutProperties","_excluded","_jsxs","children","htmlFor","_jsx","_objectSpread","concat","message","onClose","alertClass","success","warning","info","role","onClick","isLoading","loadingText","variant","buttonClass","_Fragment","REMINDER_INTERVALS","TASK_STATUS","NOT_STARTED","IN_PROGRESS","COMPLETED","STATUS_COLORS","STORAGE_KEYS","TOKEN","USER_INFO","THEME","AI_CHAT_MODE","AI_CHAT_HISTORY","TIME_CONSTANTS","ONE_MINUTE_MS","ONE_HOUR_MS","ONE_DAY_MS","TWO_DAYS_MS","ONE_WEEK_MS","ONE_HOUR_HOURS","ONE_DAY_HOURS","ONE_WEEK_HOURS","REMINDER_TYPES","ONE_TIME","DAILY","WEEKLY","VALIDATION_MESSAGES","REQUIRED_FIELD","INVALID_EMAIL","PASSWORD_MISMATCH","PASSWORD_TOO_SHORT","INVALID_PHONE","ERROR_MESSAGES","LOGIN_FAILED","REGISTRATION_FAILED","VERIFICATION_FAILED","PASSWORD_RESET_FAILED","PASSWORD_CHANGE_FAILED","PROFILE_UPDATE_FAILED","TASK_FETCH_FAILED","TASK_CREATE_FAILED","TASK_UPDATE_FAILED","TASK_DELETE_FAILED","NETWORK_ERROR","GENERIC_ERROR","initialState","arguments","length","undefined","formData","setFormData","useState","handleChange","useCallback","e","checked","target","prev","resetForm","setFieldValue","handleAuth","setError","logout","useAuth","navigate","useNavigate","clearError","handleError","err","defaultMessage","console","_error$response3","response","status","isAuthorizationError","_error$response","_error$response$data","_error$response2","_error$response2$data","data","getErrorMessage","setIsLoading","startLoading","stopLoading","usePasswordValidation","passwordError","setPasswordError","clearPasswordError","validatePassword","password","validatePasswordMatch","confirmPassword","validatePasswordStrength","hasUpperCase","test","hasLowerCase","hasNumbers","hasSpecialChar","isStrong","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","handleApiError","fetchTasks","get","fetchTaskById","taskId","createTask","newTask","post","updateTask","updatedTask","put","deleteTask","delete","updateTaskPriority","priority","loginUser","email","loginWithGoogle","async","code","authorizationCode","registerUser","firstName","lastName","verifyRegistrationCode","verificationCode","sendVerificationCode","sendForgotPasswordRequest","resetPassword","newPassword","changePassword","currentPassword","getProfile","updateProfile","generateAITask","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","prompt","sendAIChatMessage","conversationHistory","formatHoursLabel","hours","minutes","Math","round","formattedHours","toFixed","days","formattedDays","weeks","formattedWeeks","normalizeRemindersBeforeSave","reminders","deadline","Array","isArray","deadlineDate","Date","map","r","remindBefore","customDate","isNaN","getTime","diffHours","getReminderSummary","oneTimeReminders","filter","hasDailyReminders","some","hasWeeklyReminders","parts","labels","join","push"],"sourceRoot":""}