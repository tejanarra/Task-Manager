{"version":3,"file":"static/js/343.15abc7cd.chunk.js","mappings":"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","sources":["components/layout/ConfirmationModal.js","components/tasks/taskItem/ReminderCheckbox.js","components/tasks/taskItem/TaskReminders.js","constants/appConstants.js","services/api.js","utils/dateUtils.js","utils/reminderUtils.js","utils/statusUtils.js"],"sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./ConfirmationModal.css\";\n\nconst ConfirmationModal = ({\n  theme,\n  show,\n  title = \"Confirm Action\",\n  message = \"Are you sure you want to proceed?\",\n  onConfirm,\n  onCancel,\n}) => {\n  if (!show) return null;\n\n  return (\n    <div\n      className=\"custom-modal-overlay d-flex align-items-center justify-content-center\"\n      tabIndex=\"-1\"\n      role=\"dialog\"\n      onClick={onCancel}\n    >\n      <div\n        className=\"custom-modal-content\"\n        role=\"document\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"custom-modal-header\">\n          <h5 className=\"modal2-title fw-bold\">{title}</h5>\n          <button\n            type=\"button\"\n            className=\"btn-close\"\n            aria-label=\"Close\"\n            onClick={onCancel}\n          ></button>\n        </div>\n        <div className=\"custom-modal-body\">\n          <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n            {message}\n          </p>\n        </div>\n        <div className=\"custom-modal-footer d-flex justify-content-end gap-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={onCancel}\n          >\n            Cancel\n          </button>\n          <button type=\"button\" className=\"btn sign-in-btn\" onClick={onConfirm}>\n            Confirm\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationModal;\n","import \"./Styles/ReminderCheckbox.css\";\n\nconst ReminderCheckbox = ({\n  value,\n  label,\n  checked,\n  onChange,\n  className = \"\",\n  disabled = false,\n}) => (\n  <div className={`d-inline-block ${className}`}>\n    <label\n      className={`reminder-checkbox-label d-inline-flex align-items-center ${\n        disabled ? \"disabled\" : \"\"\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        className=\"form-check-input me-2\"\n        checked={checked}\n        onChange={(e) => !disabled && onChange(e.target.checked)}\n        disabled={disabled}\n        aria-label={`Set reminder for ${label}`}\n        aria-describedby={`reminder-${value}-desc`}\n      />\n      <span id={`reminder-${value}-desc`}>{label}</span>\n    </label>\n  </div>\n);\n\nexport default ReminderCheckbox;\n","import React, { useState } from \"react\";\nimport ReminderCheckbox from \"./ReminderCheckbox\";\nimport { formatDateTimeLocal } from \"../../../utils/dateUtils\";\nimport { formatHoursLabel } from \"../../../utils/reminderUtils\";\nimport \"./Styles/TaskReminders.css\";\n\nconst TaskReminders = ({\n  tempDeadline,\n  tempReminders,\n  setTempReminders,\n  theme,\n  ALL_INTERVALS = [],\n}) => {\n  const [customReminder, setCustomReminder] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const now = new Date();\n  const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n  const diffInHours =\n    deadlineDate && deadlineDate > now\n      ? (deadlineDate - now) / (1000 * 60 * 60)\n      : 0;\n\n  // Helper to check if reminder is one-time (not daily/weekly)\n  const isOneTimeReminder = (r) => {\n    return !r.type || r.type === \"one-time\";\n  };\n\n  // Check if daily reminders are active\n  const hasDailyReminders = tempReminders.some((r) => r.type === \"daily\");\n\n  // Check if weekly reminders are active\n  const hasWeeklyReminders = tempReminders.some((r) => r.type === \"weekly\");\n\n  // Toggle daily reminders\n  const toggleDailyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove existing daily reminders and add a single daily reminder template\n        const withoutDaily = prev.filter((r) => r.type !== \"daily\");\n        return [\n          ...withoutDaily,\n          { remindBefore: 24, sent: false, type: \"daily\" },\n        ];\n      } else {\n        // Remove all daily reminders\n        return prev.filter((r) => r.type !== \"daily\");\n      }\n    });\n  };\n\n  // Toggle weekly reminders\n  const toggleWeeklyReminders = (checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Remove existing weekly reminders and add a single weekly reminder template\n        const withoutWeekly = prev.filter((r) => r.type !== \"weekly\");\n        return [\n          ...withoutWeekly,\n          { remindBefore: 168, sent: false, type: \"weekly\" },\n        ];\n      } else {\n        // Remove all weekly reminders\n        return prev.filter((r) => r.type !== \"weekly\");\n      }\n    });\n  };\n\n  // Default intervals (e.g. 1 hr, 1 day, 1 week) - these are one-time reminders\n  const defaultIntervals = ALL_INTERVALS.filter((i) => i.value <= diffInHours);\n\n  // Custom reminders - one-time reminders that don't match default intervals\n  const customIntervals = tempReminders\n    .filter((r) => {\n      if (!isOneTimeReminder(r)) return false;\n      if (r.remindBefore > diffInHours) return false;\n\n      // Check if this matches any default interval\n      const matchesDefault = ALL_INTERVALS.some(\n        (ai) => Math.abs(ai.value - r.remindBefore) < 0.01\n      );\n\n      return !matchesDefault;\n    })\n    .map((r) => {\n      // If has customDate, show formatted date\n      if (r.customDate) {\n        try {\n          const date = new Date(r.customDate);\n          return {\n            value: r.remindBefore,\n            label: date.toLocaleString(),\n            customDate: r.customDate,\n          };\n        } catch (err) {\n          console.warn(\"Error formatting customDate:\", err);\n        }\n      }\n\n      // Otherwise calculate date from remindBefore\n      if (deadlineDate) {\n        const reminderDate = new Date(\n          deadlineDate.getTime() - r.remindBefore * 3600000\n        );\n        return {\n          value: r.remindBefore,\n          label: reminderDate.toLocaleString(),\n        };\n      }\n\n      // Fallback to hours label\n      return {\n        value: r.remindBefore,\n        label: formatHoursLabel(r.remindBefore),\n      };\n    });\n\n  // Toggle reminder\n  const toggleReminder = (value, checked) => {\n    setTempReminders((prev) => {\n      if (checked) {\n        // Check if already exists\n        const existing = prev.find(\n          (r) => isOneTimeReminder(r) && Math.abs(r.remindBefore - value) < 0.01\n        );\n\n        if (!existing) {\n          return [\n            ...prev,\n            { remindBefore: value, sent: false, type: \"one-time\" },\n          ];\n        }\n        return prev;\n      } else {\n        // Remove the reminder\n        return prev.filter(\n          (r) =>\n            !isOneTimeReminder(r) || Math.abs(r.remindBefore - value) >= 0.01\n        );\n      }\n    });\n  };\n\n  // Add custom reminder\n  const handleAddCustomReminder = () => {\n    if (!customReminder) return;\n\n    const selectedDate = new Date(customReminder);\n    if (isNaN(selectedDate.getTime())) {\n      console.warn(\"Invalid date selected\");\n      return;\n    }\n\n    if (!deadlineDate || selectedDate >= deadlineDate) {\n      console.warn(\"Custom reminder must be before deadline\");\n      return;\n    }\n\n    if (selectedDate <= now) {\n      console.warn(\"Custom reminder must be in the future\");\n      return;\n    }\n\n    const hours = (deadlineDate - selectedDate) / (1000 * 60 * 60);\n\n    if (hours > 0 && hours <= diffInHours) {\n      setTempReminders((prev) => {\n        // Check if similar reminder already exists\n        const exists = prev.some(\n          (r) => isOneTimeReminder(r) && Math.abs(r.remindBefore - hours) < 0.01\n        );\n\n        if (!exists) {\n          return [\n            ...prev,\n            {\n              remindBefore: hours,\n              sent: false,\n              type: \"one-time\",\n              customDate: selectedDate.toISOString(),\n            },\n          ];\n        }\n        return prev;\n      });\n      setCustomReminder(\"\");\n    }\n  };\n\n  // Calculate how many days/weeks until deadline\n  const maxDays = Math.floor(diffInHours / 24);\n  const maxWeeks = Math.floor(diffInHours / (24 * 7));\n\n  return (\n    <div className=\"task-reminders-container\">\n      {/* Dropdown Header Bar */}\n      <div className=\"reminders-dropdown\" onClick={() => setIsOpen(!isOpen)}>\n        <div className=\"reminders-dropdown-header\">\n          <h6>\n            <i className=\"bi bi-clock\"></i> Reminders\n            {tempReminders.length > 0 && (\n              <span className=\"reminder-count-badge\">\n                {tempReminders.length}\n              </span>\n            )}\n          </h6>\n          {isOpen ? (\n            <i className=\"bi bi-chevron-up\"></i>\n          ) : (\n            <i className=\"bi bi-chevron-down\"></i>\n          )}\n        </div>\n      </div>\n\n      {/* Collapsible Content */}\n      {isOpen && (\n        <div className=\"reminders-dropdown-content\">\n          {/* Recurring Reminders Section */}\n          {(maxDays > 0 || maxWeeks > 0) && (\n            <div className=\"recurring-reminders-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-arrow-repeat\"></i> Recurring Reminders:\n              </label>\n              <div className=\"recurring-options\">\n                {maxDays > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasDailyReminders}\n                      onChange={(e) => toggleDailyReminders(e.target.checked)}\n                      id=\"daily-reminders\"\n                    />\n                    <label htmlFor=\"daily-reminders\">\n                      Every Day (up to {maxDays} reminder\n                      {maxDays !== 1 ? \"s\" : \"\"})\n                    </label>\n                  </div>\n                )}\n                {maxWeeks > 0 && (\n                  <div className=\"recurring-option\">\n                    <input\n                      type=\"checkbox\"\n                      checked={hasWeeklyReminders}\n                      onChange={(e) => toggleWeeklyReminders(e.target.checked)}\n                      id=\"weekly-reminders\"\n                    />\n                    <label htmlFor=\"weekly-reminders\">\n                      Every Week (up to {maxWeeks} reminder\n                      {maxWeeks !== 1 ? \"s\" : \"\"})\n                    </label>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* One-time Reminders Section */}\n          {defaultIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-bell\"></i> One-time Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {defaultIntervals.map((item) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      isOneTimeReminder(r) &&\n                      Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = !!existing;\n                  return (\n                    <ReminderCheckbox\n                      key={item.value}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Custom Reminder Section */}\n          <div className=\"custom-reminder-section\">\n            <label className=\"reminder-section-label\">\n              <i className=\"bi bi-calendar-plus\"></i> Add Custom Reminder:\n            </label>\n            <div className=\"custom-reminder-input-group\">\n              <input\n                type=\"datetime-local\"\n                value={customReminder}\n                onChange={(e) => setCustomReminder(e.target.value)}\n                min={formatDateTimeLocal(now.toISOString())}\n                max={\n                  tempDeadline ? formatDateTimeLocal(tempDeadline) : undefined\n                }\n              />\n              <button\n                className={`btn btn-sm ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-outline-dark\"\n                }`}\n                onClick={handleAddCustomReminder}\n                disabled={!customReminder}\n              >\n                <i className=\"bi bi-plus-lg\"></i> Add\n              </button>\n            </div>\n          </div>\n\n          {/* Custom One-time Reminders Section */}\n          {customIntervals.length > 0 && (\n            <div className=\"reminder-section\">\n              <label className=\"reminder-section-label\">\n                <i className=\"bi bi-calendar-check\"></i> Custom One-time\n                Reminders:\n              </label>\n              <div className=\"reminder-grid\">\n                {customIntervals.map((item, index) => {\n                  const existing = tempReminders.find(\n                    (r) =>\n                      isOneTimeReminder(r) &&\n                      Math.abs(r.remindBefore - item.value) < 0.01\n                  );\n                  const checked = !!existing;\n                  return (\n                    <ReminderCheckbox\n                      key={item.customDate || `${item.value}-${index}`}\n                      value={item.value}\n                      label={item.label}\n                      checked={checked}\n                      onChange={(checked) =>\n                        toggleReminder(item.value, checked)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Active reminders summary */}\n          {tempReminders.length > 0 && (\n            <div className=\"active-reminders-summary\">\n              <small>\n                <i className=\"bi bi-info-circle\"></i> <strong>Active:</strong>\n                {hasDailyReminders && \" Daily\"}\n                {hasDailyReminders && hasWeeklyReminders && \",\"}\n                {hasWeeklyReminders && \" Weekly\"}\n                {(hasDailyReminders || hasWeeklyReminders) &&\n                  tempReminders.filter(isOneTimeReminder).length > 0 &&\n                  \",\"}\n                {tempReminders.filter(isOneTimeReminder).length > 0 &&\n                  ` ${tempReminders.filter(isOneTimeReminder).length} one-time`}\n              </small>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskReminders;\n","// Application Constants\n// Centralized constants to avoid duplication across components\n\n// Reminder Intervals\nexport const REMINDER_INTERVALS = [\n  { value: 1, label: \"1 hr\" },\n  { value: 24, label: \"1 day\" },\n  { value: 168, label: \"1 week\" },\n];\n\n// Task Status Options\nexport const TASK_STATUS = {\n  NOT_STARTED: \"not-started\",\n  IN_PROGRESS: \"in-progress\",\n  COMPLETED: \"completed\",\n};\n\nexport const TASK_STATUS_LABELS = {\n  [TASK_STATUS.NOT_STARTED]: \"Not Started\",\n  [TASK_STATUS.IN_PROGRESS]: \"In Progress\",\n  [TASK_STATUS.COMPLETED]: \"Completed\",\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [TASK_STATUS.COMPLETED]: \"#007a00\",\n  [TASK_STATUS.IN_PROGRESS]: \"#daa520\",\n  [TASK_STATUS.NOT_STARTED]: \"#a00000\",\n};\n\n// LocalStorage Keys\nexport const STORAGE_KEYS = {\n  TOKEN: \"token\",\n  USER_INFO: \"userInfo\",\n  THEME: \"theme\",\n  AI_CHAT_MODE: \"ai_chat_mode\",\n  AI_CHAT_HISTORY: \"ai_chat_history\",\n};\n\n// Date/Time Constants\nexport const TIME_CONSTANTS = {\n  ONE_MINUTE_MS: 60 * 1000,\n  ONE_HOUR_MS: 60 * 60 * 1000,\n  ONE_DAY_MS: 24 * 60 * 60 * 1000,\n  TWO_DAYS_MS: 48 * 60 * 60 * 1000,\n  ONE_WEEK_MS: 7 * 24 * 60 * 60 * 1000,\n  ONE_HOUR_HOURS: 1,\n  ONE_DAY_HOURS: 24,\n  ONE_WEEK_HOURS: 168,\n};\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_URL || \"https://task-manager-sigma-ashen.vercel.app/api\",\n};\n\n// AI Chat Suggestion Prompts\nexport const AI_SUGGESTIONS = [\n  \"Schedule dentist appointment next Tuesday at 3pm\",\n  \"Plan weekend shopping with 1 day reminder\",\n  \"Prepare presentation for Monday with daily reminders\",\n];\n\n// Reminder Types\nexport const REMINDER_TYPES = {\n  ONE_TIME: \"one-time\",\n  DAILY: \"daily\",\n  WEEKLY: \"weekly\",\n};\n\n// Form Validation Messages\nexport const VALIDATION_MESSAGES = {\n  REQUIRED_FIELD: \"This field is required\",\n  INVALID_EMAIL: \"Please enter a valid email address\",\n  PASSWORD_MISMATCH: \"Passwords do not match\",\n  PASSWORD_TOO_SHORT: \"Password must be at least 8 characters\",\n  INVALID_PHONE: \"Please enter a valid phone number\",\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  LOGIN_FAILED: \"Login failed. Please try again.\",\n  REGISTRATION_FAILED: \"Registration failed. Please try again.\",\n  VERIFICATION_FAILED: \"Verification failed. Please try again.\",\n  PASSWORD_RESET_FAILED: \"Password reset failed. Please try again.\",\n  PASSWORD_CHANGE_FAILED: \"Failed to change password. Please try again.\",\n  PROFILE_UPDATE_FAILED: \"Failed to update profile. Please try again.\",\n  TASK_FETCH_FAILED: \"Failed to fetch tasks. Please try again.\",\n  TASK_CREATE_FAILED: \"Failed to create task. Please try again.\",\n  TASK_UPDATE_FAILED: \"Failed to update task. Please try again.\",\n  TASK_DELETE_FAILED: \"Failed to delete task. Please try again.\",\n  NETWORK_ERROR: \"Network error. Please check your connection.\",\n  GENERIC_ERROR: \"Something went wrong. Please try again.\",\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  LOGIN_SUCCESS: \"Login successful!\",\n  REGISTRATION_SUCCESS: \"Registration successful!\",\n  PASSWORD_RESET_SUCCESS: \"Password reset successful!\",\n  PASSWORD_CHANGE_SUCCESS: \"Password changed successfully!\",\n  PROFILE_UPDATE_SUCCESS: \"Profile updated successfully!\",\n  TASK_CREATE_SUCCESS: \"Task created successfully!\",\n  TASK_UPDATE_SUCCESS: \"Task updated successfully!\",\n  TASK_DELETE_SUCCESS: \"Task deleted successfully!\",\n};\n\n// Responsive Breakpoints\nexport const BREAKPOINTS = {\n  MOBILE: 720,\n  TABLET: 1024,\n  DESKTOP: 1025,\n};\n\n// Avatar Configuration\nexport const AVATAR_CONFIG = {\n  MAX_SIZE: 5 * 1024 * 1024, // 5MB\n  ALLOWED_TYPES: [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/gif\"],\n  SCALE_MIN: 1,\n  SCALE_MAX: 2,\n  CROP_SIZE: { width: 200, height: 200 },\n  QUALITY: 0.8,\n};\n\n// Drag and Drop Configuration\nexport const DND_CONFIG = {\n  ACTIVATION_CONSTRAINT: { distance: 10 },\n  TOUCH_DELAY: 200,\n  TOUCH_TOLERANCE: 5,\n};\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n  timeout: 30000, // 30 second timeout\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Enhanced error handler\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    return {\n      message: error.response.data?.error || \"An error occurred\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: \"No response from server. Please check your connection.\",\n      status: 0,\n    };\n  } else {\n    // Error setting up request\n    return {\n      message: error.message || \"An unexpected error occurred\",\n      status: -1,\n    };\n  }\n};\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const fetchTaskById = (taskId) => api.get(`/tasks/${taskId}`);\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n\n// AI-related endpoints\nexport const generateAITask = async (prompt) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat\",\n      { prompt },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport const sendAIChatMessage = async (message, conversationHistory = []) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat-conversation\",\n      { message, conversationHistory },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport default api;\n","import { format } from \"date-fns\";\n\nexport const formatRelativeTime = (dateString) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now - date) / 1000);\n  const justNowThreshold = 60;\n  if (diffInSeconds < 0) {\n    const futureDiff = Math.abs(diffInSeconds);\n    if (futureDiff < justNowThreshold) return \"Just now\";\n    if (futureDiff < 60) return `in ${futureDiff} second${futureDiff !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 3600) return `in ${Math.ceil(futureDiff / 60)} minute${Math.ceil(futureDiff / 60) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 86400) return `in ${Math.ceil(futureDiff / 3600)} hour${Math.ceil(futureDiff / 3600) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 604800) return `in ${Math.ceil(futureDiff / 86400)} day${Math.ceil(futureDiff / 86400) !== 1 ? \"s\" : \"\"}`;\n    return format(date, \"MMM dd, yyyy\");\n  } else {\n    if (diffInSeconds < justNowThreshold) return \"Just now\";\n    if (diffInSeconds < 60) return `${diffInSeconds} second${diffInSeconds !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minute${Math.floor(diffInSeconds / 60) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hour${Math.floor(diffInSeconds / 3600) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 604800) {\n      const days = Math.floor(diffInSeconds / 86400);\n      return days === 1 ? \"Yesterday\" : `${days} days ago`;\n    }\n    return format(date, \"MMM dd, yyyy\");\n  }\n};\n\nexport const convertDateToWords = (dateString) => {\n  const [year, month, day] = dateString.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n  if (isNaN(date)) return \"Invalid Date\";\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return date.toLocaleString(\"en-US\", options);\n};\n\nexport const formatDateTimeLocal = (dateString) => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n};","import { REMINDER_INTERVALS, REMINDER_TYPES, TIME_CONSTANTS } from \"../constants/appConstants\";\n\n/**\n * Formats hours into human-readable label\n * @param {number} hours - Number of hours\n * @returns {string} - Formatted label (e.g., \"1 hr\", \"2 days\", \"1 week\")\n */\nexport const formatHoursLabel = (hours) => {\n  if (hours < 1) {\n    const minutes = Math.round(hours * 60);\n    return `${minutes} min${minutes !== 1 ? \"s\" : \"\"}`;\n  }\n\n  if (hours < TIME_CONSTANTS.ONE_DAY_HOURS) {\n    const formattedHours = hours % 1 === 0 ? hours : hours.toFixed(1);\n    return `${formattedHours} hr${hours !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const days = hours / TIME_CONSTANTS.ONE_DAY_HOURS;\n  if (days < 7) {\n    const formattedDays = days % 1 === 0 ? days : days.toFixed(1);\n    return `${formattedDays} day${days !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const weeks = days / 7;\n  const formattedWeeks = weeks % 1 === 0 ? weeks : weeks.toFixed(1);\n  return `${formattedWeeks} week${weeks !== 1 ? \"s\" : \"\"}`;\n};\n\n/**\n * Normalize and calculate remindBefore for all reminders before saving\n * @param {Array} reminders - List of reminder objects\n * @param {string|Date} deadline - ISO string or Date for task deadline\n * @returns {Array} - Normalized reminders\n */\nexport const normalizeRemindersBeforeSave = (reminders, deadline) => {\n  if (!Array.isArray(reminders) || !deadline) return reminders;\n\n  const deadlineDate = new Date(deadline);\n\n  return reminders.map((r) => {\n    // Skip invalid dates or reminders with explicit remindBefore\n    if (r.remindBefore && !r.customDate) return r;\n\n    // If a customDate exists, calculate remindBefore dynamically\n    if (r.customDate) {\n      const customDate = new Date(r.customDate);\n      if (!isNaN(customDate.getTime()) && customDate < deadlineDate) {\n        const diffHours = (deadlineDate - customDate) / (1000 * 60 * 60);\n        return { ...r, remindBefore: diffHours };\n      }\n    }\n\n    // Fallback: keep as-is\n    return r;\n  });\n};\n\n/**\n * Gets reminder summary for display\n * @param {Array} reminders - Array of reminder objects\n * @returns {string} - Summary text (e.g., \"1 hr, 1 day before\")\n */\nexport const getReminderSummary = (reminders) => {\n  if (!reminders || reminders.length === 0) return \"\";\n\n  const oneTimeReminders = reminders.filter(\n    (r) => !r.type || r.type === REMINDER_TYPES.ONE_TIME\n  );\n\n  const hasDailyReminders = reminders.some((r) => r.type === REMINDER_TYPES.DAILY);\n  const hasWeeklyReminders = reminders.some((r) => r.type === REMINDER_TYPES.WEEKLY);\n\n  const parts = [];\n\n  // Add one-time reminders\n  if (oneTimeReminders.length > 0) {\n    const labels = oneTimeReminders\n      .map((r) => formatHoursLabel(r.remindBefore))\n      .join(\", \");\n    parts.push(labels);\n  }\n\n  // Add recurring reminders\n  if (hasDailyReminders) parts.push(\"Daily\");\n  if (hasWeeklyReminders) parts.push(\"Weekly\");\n\n  return parts.join(\", \");\n};\n\n/**\n * Regenerates recurring reminders (daily or weekly)\n * @param {Array} currentReminders - Current reminder array\n * @param {string} type - \"daily\" or \"weekly\"\n * @param {Date} deadlineDate - Deadline date\n * @param {Date} now - Current date\n * @returns {Array} - Updated reminders array\n */\nexport const regenerateRecurringReminders = (\n  currentReminders,\n  type,\n  deadlineDate,\n  now = new Date()\n) => {\n  // Remove existing reminders of this type\n  const filtered = currentReminders.filter((r) => r.type !== type);\n\n  const diffInHours = (deadlineDate - now) / (1000 * 60 * 60);\n\n  if (type === REMINDER_TYPES.DAILY) {\n    const days = Math.floor(diffInHours / TIME_CONSTANTS.ONE_DAY_HOURS);\n    if (days < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= days; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_DAY_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.DAILY,\n        dayNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  if (type === REMINDER_TYPES.WEEKLY) {\n    const weeks = Math.floor(diffInHours / TIME_CONSTANTS.ONE_WEEK_HOURS);\n    if (weeks < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= weeks; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_WEEK_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.WEEKLY,\n        weekNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  return currentReminders;\n};\n\n/**\n * Checks if a reminder is one-time (not daily/weekly)\n * @param {Object} reminder - Reminder object\n * @returns {boolean} - True if one-time\n */\nexport const isOneTimeReminder = (reminder) => {\n  return !reminder.type || reminder.type === REMINDER_TYPES.ONE_TIME;\n};\n\n/**\n * Gets count of active reminders\n * @param {Array} reminders - Array of reminder objects\n * @returns {number} - Count of active reminders\n */\nexport const getActiveReminderCount = (reminders) => {\n  if (!reminders || !Array.isArray(reminders)) return 0;\n  return reminders.filter((r) => !r.sent).length;\n};\n\n/**\n * Validates a custom reminder date\n * @param {string|Date} customDate - Custom reminder date\n * @param {string|Date} deadline - Task deadline\n * @returns {Object} - { valid: boolean, error: string }\n */\nexport const validateCustomReminder = (customDate, deadline) => {\n  if (!customDate) {\n    return { valid: false, error: \"Please select a reminder date\" };\n  }\n\n  const reminderDate = new Date(customDate);\n  const deadlineDate = new Date(deadline);\n  const now = new Date();\n\n  if (isNaN(reminderDate.getTime())) {\n    return { valid: false, error: \"Invalid reminder date\" };\n  }\n\n  if (reminderDate <= now) {\n    return { valid: false, error: \"Reminder must be in the future\" };\n  }\n\n  if (reminderDate >= deadlineDate) {\n    return { valid: false, error: \"Reminder must be before deadline\" };\n  }\n\n  return { valid: true, error: null };\n};\n\n/**\n * Gets reminder intervals for selection\n * @returns {Array} - Array of interval objects\n */\nexport const getReminderIntervals = () => {\n  return REMINDER_INTERVALS;\n};\n","import { TASK_STATUS, STATUS_COLORS, TASK_STATUS_LABELS } from \"../constants/appConstants\";\n\n/**\n * Gets the color for a task status\n * @param {string} status - The task status\n * @returns {string} - The hex color code\n */\nexport const getStatusColor = (status) => {\n  return STATUS_COLORS[status] || STATUS_COLORS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Gets the label for a task status\n * @param {string} status - The task status\n * @returns {string} - The human-readable label\n */\nexport const getStatusLabel = (status) => {\n  return TASK_STATUS_LABELS[status] || TASK_STATUS_LABELS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Checks if a status is valid\n * @param {string} status - The status to check\n * @returns {boolean} - True if valid\n */\nexport const isValidStatus = (status) => {\n  return Object.values(TASK_STATUS).includes(status);\n};\n\n/**\n * Gets all available statuses\n * @returns {Array} - Array of status objects with value and label\n */\nexport const getAllStatuses = () => {\n  return Object.values(TASK_STATUS).map(status => ({\n    value: status,\n    label: getStatusLabel(status),\n    color: getStatusColor(status),\n  }));\n};\n"],"names":["_ref","theme","show","title","message","onConfirm","onCancel","_jsx","className","tabIndex","role","onClick","children","_jsxs","e","stopPropagation","type","concat","value","label","checked","onChange","disabled","target","id","tempDeadline","tempReminders","setTempReminders","ALL_INTERVALS","customReminder","setCustomReminder","useState","isOpen","setIsOpen","now","Date","deadlineDate","diffInHours","isOneTimeReminder","r","hasDailyReminders","some","hasWeeklyReminders","defaultIntervals","filter","i","customIntervals","remindBefore","ai","Math","abs","map","customDate","date","toLocaleString","err","console","warn","reminderDate","getTime","formatHoursLabel","toggleReminder","prev","find","sent","maxDays","floor","maxWeeks","length","toggleDailyReminders","htmlFor","toggleWeeklyReminders","item","ReminderCheckbox","min","formatDateTimeLocal","toISOString","max","undefined","handleAddCustomReminder","selectedDate","isNaN","hours","index","REMINDER_INTERVALS","TASK_STATUS","NOT_STARTED","IN_PROGRESS","COMPLETED","STATUS_COLORS","STORAGE_KEYS","TOKEN","USER_INFO","THEME","AI_CHAT_MODE","AI_CHAT_HISTORY","TIME_CONSTANTS","ONE_MINUTE_MS","ONE_HOUR_MS","ONE_DAY_MS","TWO_DAYS_MS","ONE_WEEK_MS","ONE_HOUR_HOURS","ONE_DAY_HOURS","ONE_WEEK_HOURS","REMINDER_TYPES","ONE_TIME","DAILY","WEEKLY","VALIDATION_MESSAGES","REQUIRED_FIELD","INVALID_EMAIL","PASSWORD_MISMATCH","PASSWORD_TOO_SHORT","INVALID_PHONE","ERROR_MESSAGES","LOGIN_FAILED","REGISTRATION_FAILED","VERIFICATION_FAILED","PASSWORD_RESET_FAILED","PASSWORD_CHANGE_FAILED","PROFILE_UPDATE_FAILED","TASK_FETCH_FAILED","TASK_CREATE_FAILED","TASK_UPDATE_FAILED","TASK_DELETE_FAILED","NETWORK_ERROR","GENERIC_ERROR","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","handleApiError","_error$response$data","response","data","status","fetchTasks","get","fetchTaskById","taskId","createTask","newTask","post","updateTask","updatedTask","put","deleteTask","delete","updateTaskPriority","priority","loginUser","email","password","loginWithGoogle","async","code","authorizationCode","registerUser","firstName","lastName","verifyRegistrationCode","verificationCode","sendVerificationCode","sendForgotPasswordRequest","resetPassword","newPassword","changePassword","currentPassword","getProfile","updateProfile","formData","generateAITask","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","success","prompt","sendAIChatMessage","conversationHistory","arguments","formatRelativeTime","dateString","diffInSeconds","futureDiff","ceil","format","days","convertDateToWords","year","month","day","split","Number","getFullYear","String","getMonth","padStart","getDate","getHours","minutes","getMinutes","round","formattedHours","toFixed","formattedDays","weeks","formattedWeeks","normalizeRemindersBeforeSave","reminders","deadline","Array","isArray","diffHours","_objectSpread","getReminderSummary","oneTimeReminders","parts","labels","join","push","getStatusColor"],"sourceRoot":""}