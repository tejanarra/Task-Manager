{"version":3,"file":"static/js/432.db0e281d.chunk.js","mappings":"iMAKA,MAyLA,EAzLuBA,IAAgB,IAAf,MAAEC,GAAOD,EAC/B,MAAOE,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,KAClDG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAAiBC,IAAsBN,EAAAA,EAAAA,UAAS,KAChDO,EAASC,IAAcR,EAAAA,EAAAA,UAAS,KAChCS,EAAOC,IAAYV,EAAAA,EAAAA,UAAS,KAC5BW,EAAaC,IAAkBZ,EAAAA,EAAAA,WAAS,IACxCa,EAASC,IAAcd,EAAAA,EAAAA,WAAS,IAChCe,EAAWC,IAAgBhB,EAAAA,EAAAA,WAAS,GACrCiB,GAAWC,EAAAA,EAAAA,MAyDjB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wEAAuEC,UACpFC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCC,SAAA,EAC9CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SAAC,qBAC7BF,EAAAA,EAAAA,KAAA,KAAGC,UAAS,QAAAG,OAAoB,SAAV1B,EAAmB,QAAU,QAAO,SAAQwB,SAC/DR,GAAWF,EACR,wDACA,sDAGNW,EAAAA,EAAAA,MAAA,QACEE,SACEX,GAAWF,EA5COc,UAM1B,GALAC,EAAEC,iBACFjB,EAAS,IACTF,EAAW,IACXQ,GAAa,GAETb,IAAgBE,EAGlB,OAFAK,EAAS,gCACTM,GAAa,GAIf,IACE,MAAMY,QAAiBC,EAAAA,EAAAA,IACrB/B,EACAG,EACAE,GAEFK,EAAWoB,EAASE,KAAKvB,SAAW,8BACpCwB,YAAW,KACTd,EAAS,SAAS,GACjB,IACL,CAAE,MAAOe,GAAM,IAADC,EAAAC,EACZC,QAAQ1B,MAAM,4BAA6BuB,GAC3CtB,GACc,QAAZuB,EAAAD,EAAIJ,gBAAQ,IAAAK,GAAM,QAANC,EAAZD,EAAcH,YAAI,IAAAI,OAAN,EAAZA,EAAoB3B,UAAW,0CAEnC,CAAC,QACCS,GAAa,EACf,GApDsBS,UACtBC,EAAEC,iBACFjB,EAAS,IACTF,EAAW,IACXQ,GAAa,GAEb,IACE,MAAMY,QAAiBQ,EAAAA,EAAAA,IAA0BtC,GACjDU,EACEoB,EAASE,KAAKvB,SACZ,qDAEJK,GAAe,EACjB,CAAE,MAAOoB,GAAM,IAADK,EAAAC,EACZH,QAAQ1B,MAAM,6BAA8BuB,GAC5CtB,GACc,QAAZ2B,EAAAL,EAAIJ,gBAAQ,IAAAS,GAAM,QAANC,EAAZD,EAAcP,YAAI,IAAAQ,OAAN,EAAZA,EAAoB/B,UAAW,0CAEnC,CAAC,QACCS,GAAa,EACf,GAgDOK,SAAA,EAEDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,SACEoB,KAAK,WACLnB,UAAU,mBACVoB,GAAG,eACHC,QAAS5B,EACT6B,SAAUA,KACR5B,GAAYD,GACZH,EAAS,IACTF,EAAW,GAAG,KAGlBW,EAAAA,EAAAA,KAAA,SAAOC,UAAU,mBAAmBuB,QAAQ,eAActB,SAAC,2CAK7DF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAAA,SACEoB,KAAK,QACLnB,UAAU,oBACVoB,GAAG,QACHI,YAAY,mBACZC,MAAO/C,EACP4C,SAAWhB,GAAM3B,EAAS2B,EAAEoB,OAAOD,OACnCE,UAAQ,EACRC,SAAUrC,OAIZE,GAAWF,KACXW,EAAAA,EAAAA,MAAA2B,EAAAA,SAAA,CAAA5B,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAAA,SACEoB,KAAK,OACLnB,UAAU,oBACVoB,GAAG,mBACHI,YAAY,0BACZC,MAAO5C,EACPyC,SAAWhB,GAAMxB,EAAoBwB,EAAEoB,OAAOD,OAC9CE,UAAQ,OAGZ5B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAAA,SACEoB,KAAK,WACLnB,UAAU,oBACVoB,GAAG,cACHI,YAAY,qBACZC,MAAO1C,EACPuC,SAAWhB,GAAMtB,EAAesB,EAAEoB,OAAOD,OACzCE,UAAQ,OAGZ5B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAAA,SACEoB,KAAK,WACLnB,UAAU,oBACVoB,GAAG,qBACHI,YAAY,uBACZC,MAAOxC,EACPqC,SAAWhB,GAAMpB,EAAmBoB,EAAEoB,OAAOD,OAC7CE,UAAQ,SAMftC,IAASU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,SAAEZ,IAC9CF,IAAWY,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,SAAEd,KAElDe,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sCAAqCC,SAAA,EAClDF,EAAAA,EAAAA,KAAA,UACEoB,KAAK,SACLnB,UAAU,iBACV4B,SAAUjC,EAAUM,SAEnBN,GACCI,EAAAA,EAAAA,KAAA,QACEC,UAAU,8CACV8B,KAAK,SACL,cAAY,SAEZrC,GAAWF,EACb,QAEA,eAGJQ,EAAAA,EAAAA,KAAA,UACEoB,KAAK,SACLnB,UAAU,6BACV+B,QAASA,IAAMlC,EAAS,UAAUI,SACnC,4BAMH,C,0LCxLV,MAAM+B,E,OAAMC,EAAMC,OAAO,CACvBC,QAAS,kDAETC,QAAS,CACP,6BAA8B,QAEhCC,QAAS,MAGXL,EAAIM,aAAaC,QAAQC,KACtBC,IACC,MAAMC,EAAQC,aAAaC,QAAQ,SAInC,OAHIF,IACFD,EAAOL,QAAQS,cAAa,UAAA1C,OAAauC,IAEpCD,CAAM,IAEdpD,GAAUyD,QAAQC,OAAO1D,KAI5B,MAAM2D,EAAkB3D,IACD,IAAD4D,EAApB,OAAI5D,EAAMmB,SAED,CACLrB,SAA4B,QAAnB8D,EAAA5D,EAAMmB,SAASE,YAAI,IAAAuC,OAAA,EAAnBA,EAAqB5D,QAAS,oBACvC6D,OAAQ7D,EAAMmB,SAAS0C,QAEhB7D,EAAMkD,QAER,CACLpD,QAAS,yDACT+D,OAAQ,GAIH,CACL/D,QAASE,EAAMF,SAAW,+BAC1B+D,QAAS,EAEb,EAIWC,EAAaA,IAAMnB,EAAIoB,IAAI,UAC3BC,EAAiBC,GAAWtB,EAAIoB,IAAI,UAADjD,OAAWmD,IAC9CC,EAAcC,GAAYxB,EAAIyB,KAAK,SAAUD,GAC7CE,EAAaA,CAACJ,EAAQK,IACjC3B,EAAI4B,IAAI,UAADzD,OAAWmD,GAAUK,GACjBE,EAAcP,GAAWtB,EAAI8B,OAAO,UAAD3D,OAAWmD,IAC9CS,EAAqBA,CAACT,EAAQU,IACzChC,EAAI4B,IAAI,UAADzD,OAAWmD,EAAM,aAAa,CAAEU,aAG5BC,EAAYA,CAACvF,EAAOwF,IACxBlC,EAAIyB,KAAK,cAAe,CAAE/E,QAAOwF,aAG7BC,EAAkB9D,SACtB2B,EAAIyB,KAAK,eAAgB,CAAEW,KAAMC,IAG7BC,EAAeA,CAACC,EAAWC,EAAU9F,EAAOwF,IAChDlC,EAAIyB,KAAK,iBAAkB,CAAEc,YAAWC,WAAU9F,QAAOwF,aAGrDO,EAAyBA,CAAC/F,EAAOG,IACrCmD,EAAIyB,KAAK,4BAA6B,CAAE/E,QAAOG,qBAG3C6F,EAAwBhG,GAC5BsD,EAAIyB,KAAK,4BAA6B,CAAE/E,UAGpCsC,EAA6BtC,GACjCsD,EAAIyB,KAAK,wBAAyB,CAAE/E,UAGhC+B,EAAgBA,CAAC/B,EAAOG,EAAkBE,IAC9CiD,EAAIyB,KAAK,oBAAqB,CACnC/E,QACAG,mBACAE,gBAIS4F,EAAiBA,CAACC,EAAiB7F,IACvCiD,EAAIyB,KAAK,wBAAyB,CAAEmB,kBAAiB7F,gBAMjD8F,EAAaxE,UACxB,IAEE,aADuB2B,EAAIoB,IAAI,aACf1C,IAClB,CAAE,MAAOE,GAEP,MADAG,QAAQ1B,MAAM,0BAA2BuB,GACnCA,CACR,GAGWkE,EAAgBzE,UAC3B,IAME,aALuB2B,EAAI4B,IAAI,WAAYmB,EAAU,CACnD3C,QAAS,CACP,eAAgB,0BAGJ1B,IAClB,CAAE,MAAOE,GAEP,MADAG,QAAQ1B,MAAM,0BAA2BuB,GACnCA,CACR,GAIWoE,EAAiB3E,UAC5B,IACE,MAAM4E,EAAWC,KAAKC,iBAAiBC,kBAAkBC,SAMzD,MAAO,CAAEC,SAAS,EAAM5E,YALDsB,EAAIyB,KACzB,WACA,CAAE8B,UACF,CAAEnD,QAAS,CAAE,kBAAmB6C,MAEKvE,KACzC,CAAE,MAAOrB,GAEP,MAAO,CAAEiG,SAAS,EAAOjG,MADP2D,EAAe3D,GACSF,QAC5C,GAGWqG,EAAoBnF,eAAOlB,GAAuC,IAA9BsG,EAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACrE,IACE,MAAMT,EAAWC,KAAKC,iBAAiBC,kBAAkBC,SAMzD,MAAO,CAAEC,SAAS,EAAM5E,YALDsB,EAAIyB,KACzB,wBACA,CAAEtE,UAASsG,uBACX,CAAErD,QAAS,CAAE,kBAAmB6C,MAEKvE,KACzC,CAAE,MAAOrB,GAEP,MAAO,CAAEiG,SAAS,EAAOjG,MADP2D,EAAe3D,GACSF,QAC5C,CACF,C","sources":["components/ForgotPassword.js","services/api.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { sendForgotPasswordRequest, resetPassword } from \"../services/api\";\nimport \"../Styles/ForgotPassword.css\";\n\nconst ForgotPassword = ({ theme }) => {\n  const [email, setEmail] = useState(\"\");\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isEmailSent, setIsEmailSent] = useState(false);\n  const [hasCode, setHasCode] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleSendEmail = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setMessage(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await sendForgotPasswordRequest(email);\n      setMessage(\n        response.data.message ||\n          \"Please check your email for further instructions.\"\n      );\n      setIsEmailSent(true);\n    } catch (err) {\n      console.error(\"Error sending reset email:\", err);\n      setError(\n        err.response?.data?.message || \"Something went wrong. Please try again.\"\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResetPassword = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setMessage(\"\");\n    setIsLoading(true);\n\n    if (newPassword !== confirmPassword) {\n      setError(\"Passwords do not match.\");\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await resetPassword(\n        email,\n        verificationCode,\n        newPassword\n      );\n      setMessage(response.data.message || \"Password reset successful!\");\n      setTimeout(() => {\n        navigate(\"/login\");\n      }, 2000);\n    } catch (err) {\n      console.error(\"Error resetting password:\", err);\n      setError(\n        err.response?.data?.message || \"Something went wrong. Please try again.\"\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"forgot-password-page d-flex align-items-center justify-content-center\">\n      <div className=\"forgot-password-form wider-form\">\n        <h1 className=\"fw-bold mb-2\">Forgot Password</h1>\n        <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n          {hasCode || isEmailSent\n            ? \"Enter your verification code and reset your password.\"\n            : \"Enter your email to receive a verification code.\"}\n        </p>\n\n        <form\n          onSubmit={\n            hasCode || isEmailSent ? handleResetPassword : handleSendEmail\n          }\n        >\n          <div className=\"form-check mb-3\">\n            <input\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"hasCodeCheck\"\n              checked={hasCode}\n              onChange={() => {\n                setHasCode(!hasCode);\n                setError(\"\");\n                setMessage(\"\");\n              }}\n            />\n            <label className=\"form-check-label\" htmlFor=\"hasCodeCheck\">\n              I already have a verification code\n            </label>\n          </div>\n\n          <div className=\"mb-3\">\n            <input\n              type=\"email\"\n              className=\"form-control py-2\"\n              id=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              disabled={isEmailSent}\n            />\n          </div>\n\n          {(hasCode || isEmailSent) && (\n            <>\n              <div className=\"mb-3\">\n                <input\n                  type=\"text\"\n                  className=\"form-control py-2\"\n                  id=\"verificationCode\"\n                  placeholder=\"Enter verification code\"\n                  value={verificationCode}\n                  onChange={(e) => setVerificationCode(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"mb-3\">\n                <input\n                  type=\"password\"\n                  className=\"form-control py-2\"\n                  id=\"newPassword\"\n                  placeholder=\"Enter new password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"mb-3\">\n                <input\n                  type=\"password\"\n                  className=\"form-control py-2\"\n                  id=\"confirmNewPassword\"\n                  placeholder=\"Confirm new password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                />\n              </div>\n            </>\n          )}\n\n          {error && <div className=\"alert alert-danger\">{error}</div>}\n          {message && <div className=\"alert alert-success\">{message}</div>}\n\n          <div className=\"d-flex justify-content-between mt-4\">\n            <button\n              type=\"submit\"\n              className=\"btn forgot-btn\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <span\n                  className=\"spinner-border spinner-border-sm text-light\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n              ) : hasCode || isEmailSent ? (\n                \"Reset\"\n              ) : (\n                \"Send Code\"\n              )}\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-link back-to-login\"\n              onClick={() => navigate(\"/login\")}\n            >\n              Back to Login\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n  timeout: 30000, // 30 second timeout\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Enhanced error handler\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    return {\n      message: error.response.data?.error || \"An error occurred\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: \"No response from server. Please check your connection.\",\n      status: 0,\n    };\n  } else {\n    // Error setting up request\n    return {\n      message: error.message || \"An unexpected error occurred\",\n      status: -1,\n    };\n  }\n};\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const fetchTaskById = (taskId) => api.get(`/tasks/${taskId}`);\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n\n// AI-related endpoints\nexport const generateAITask = async (prompt) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat\",\n      { prompt },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport const sendAIChatMessage = async (message, conversationHistory = []) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat-conversation\",\n      { message, conversationHistory },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport default api;\n"],"names":["_ref","theme","email","setEmail","useState","verificationCode","setVerificationCode","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","error","setError","isEmailSent","setIsEmailSent","hasCode","setHasCode","isLoading","setIsLoading","navigate","useNavigate","_jsx","className","children","_jsxs","concat","onSubmit","async","e","preventDefault","response","resetPassword","data","setTimeout","err","_err$response2","_err$response2$data","console","sendForgotPasswordRequest","_err$response","_err$response$data","type","id","checked","onChange","htmlFor","placeholder","value","target","required","disabled","_Fragment","role","onClick","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","handleApiError","_error$response$data","status","fetchTasks","get","fetchTaskById","taskId","createTask","newTask","post","updateTask","updatedTask","put","deleteTask","delete","updateTaskPriority","priority","loginUser","password","loginWithGoogle","code","authorizationCode","registerUser","firstName","lastName","verifyRegistrationCode","sendVerificationCode","changePassword","currentPassword","getProfile","updateProfile","formData","generateAITask","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","success","prompt","sendAIChatMessage","conversationHistory","arguments","length","undefined"],"sourceRoot":""}