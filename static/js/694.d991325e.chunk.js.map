{"version":3,"file":"static/js/694.d991325e.chunk.js","mappings":"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","sources":["services/api.js","components/profile/EditProfile.js"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n  timeout: 30000, // 30 second timeout\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Enhanced error handler\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    return {\n      message: error.response.data?.error || \"An error occurred\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: \"No response from server. Please check your connection.\",\n      status: 0,\n    };\n  } else {\n    // Error setting up request\n    return {\n      message: error.message || \"An unexpected error occurred\",\n      status: -1,\n    };\n  }\n};\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const fetchTaskById = (taskId) => api.get(`/tasks/${taskId}`);\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n\n// AI-related endpoints\nexport const generateAITask = async (prompt) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat\",\n      { prompt },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport const sendAIChatMessage = async (message, conversationHistory = []) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat-conversation\",\n      { message, conversationHistory },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport default api;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getProfile, updateProfile } from \"../../services/api\";\nimport Cropper from \"react-easy-crop\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport \"./EditProfile.css\";\n\nconst EditProfile = () => {\n  const [profile, setProfile] = useState(null);\n  const [newAvatar, setNewAvatar] = useState(null);\n  const [newAvatarUrl, setNewAvatarUrl] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [rotation, setRotation] = useState(0);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const { logout } = useAuth();\n\n  useEffect(() => {\n    const fetchProfile = async () => {\n      try {\n        const data = await getProfile();\n        if (!data) throw new Error(\"Received no data\");\n        setProfile(data);\n      } catch (err) {\n        setError(\n          `Failed to fetch profile data: ${err.message || err.toString()}`\n        );\n        if (err && err.status === 403) {\n          logout();\n          navigate(\"/login\");\n        }\n      }\n    };\n\n    fetchProfile();\n  }, [logout, navigate]);\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const createImage = (url) =>\n    new Promise((resolve, reject) => {\n      const image = new Image();\n      image.addEventListener(\"load\", () => resolve(image));\n      image.addEventListener(\"error\", (error) => reject(error));\n      image.setAttribute(\"crossOrigin\", \"anonymous\");\n      image.src = url;\n    });\n\n  const getCroppedImg = async (imageSrc, pixelCrop, rotation = 0) => {\n    const image = await createImage(imageSrc);\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    const maxSize = Math.max(image.width, image.height);\n    const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n    canvas.width = safeArea;\n    canvas.height = safeArea;\n\n    ctx.translate(safeArea / 2, safeArea / 2);\n    ctx.rotate((rotation * Math.PI) / 180);\n    ctx.translate(-safeArea / 2, -safeArea / 2);\n\n    ctx.drawImage(\n      image,\n      safeArea / 2 - image.width * 0.5,\n      safeArea / 2 - image.height * 0.5\n    );\n\n    const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n    canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height;\n\n    ctx.putImageData(\n      data,\n      Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\n      Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\n    );\n\n    return new Promise((resolve) => {\n      canvas.toBlob((blob) => {\n        resolve(blob);\n      }, \"image/jpeg\");\n    });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (profile) {\n      setProfile({ ...profile, [name]: value });\n    }\n  };\n\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setNewAvatar(file);\n      const url = URL.createObjectURL(file);\n      setNewAvatarUrl(url);\n      setCrop({ x: 0, y: 0 });\n      setZoom(1);\n      setRotation(0);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!profile) {\n      setError(\"No profile data available.\");\n      return;\n    }\n\n    setIsLoading(true);\n\n    const formData = new FormData();\n    if (newAvatar && croppedAreaPixels) {\n      try {\n        const croppedBlob = await getCroppedImg(\n          newAvatarUrl,\n          croppedAreaPixels,\n          rotation\n        );\n        const croppedFile = new File([croppedBlob], newAvatar.name, {\n          type: \"image/jpeg\",\n          lastModified: Date.now(),\n        });\n\n        formData.append(\"avatar\", croppedFile);\n        await appendProfileData(formData);\n      } catch (error) {\n        setError(\"Failed to crop image: \" + error.message);\n        setIsLoading(false);\n      }\n    } else {\n      await appendProfileData(formData);\n    }\n  };\n\n  const appendProfileData = async (formData) => {\n    formData.append(\"firstName\", profile.firstName);\n    formData.append(\"lastName\", profile.lastName);\n    formData.append(\"phoneNumber\", profile.phoneNumber);\n    formData.append(\"dob\", profile.dob);\n    formData.append(\"bio\", profile.bio || \"\");\n\n    try {\n      const response = await updateProfile(formData);\n      setProfile(response.user);\n      setSuccess(\"Profile updated successfully!\");\n      const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n      userInfo.avatar = response.user.avatar;\n      localStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\n      setTimeout(() => navigate(\"/profile-overview\"), 2000);\n    } catch (err) {\n      setError(err.message);\n      setTimeout(() => navigate(\"/profile-overview\"), 2000);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!profile && !error) {\n    return (\n      <div className=\"profile-container\">\n        <div className=\"loading-spinner\">Loading profile...</div>\n        {navigate(\"/login\")}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"profile-container flex-column\">\n        <h2 className=\"profile-title\">Edit Profile</h2>\n        {error && <div className=\"alert alert-danger\">{error}</div>}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-card shadow rounded\">\n        <h2 className=\"profile-title text-center mb-4\">Edit Profile</h2>\n        {isLoading && <div className=\"loading-overlay\">Updating...</div>}\n        <form onSubmit={handleSubmit}>\n          {newAvatar ? (\n            <div className=\"crop-container mb-4\">\n              <div className=\"crop-area\" style={{ position: \"relative\", height: \"400px\" }}>\n                <Cropper\n                  image={newAvatarUrl}\n                  crop={crop}\n                  zoom={zoom}\n                  rotation={rotation}\n                  aspect={1}\n                  cropShape=\"round\"\n                  showGrid={false}\n                  onCropChange={setCrop}\n                  onZoomChange={setZoom}\n                  onRotationChange={setRotation}\n                  onCropComplete={onCropComplete}\n                />\n              </div>\n              <div className=\"image-controls mb-4 mt-3\">\n                <div className=\"control-group\">\n                  <label htmlFor=\"zoomRange\">Zoom:</label>\n                  <input\n                    type=\"range\"\n                    id=\"zoomRange\"\n                    min=\"1\"\n                    max=\"3\"\n                    step=\"0.1\"\n                    value={zoom}\n                    onChange={(e) => setZoom(parseFloat(e.target.value))}\n                  />\n                </div>\n                <div className=\"control-group\">\n                  <label htmlFor=\"rotateRange\">Rotate:</label>\n                  <input\n                    type=\"range\"\n                    id=\"rotateRange\"\n                    min=\"0\"\n                    max=\"360\"\n                    step=\"1\"\n                    value={rotation}\n                    onChange={(e) => setRotation(parseInt(e.target.value, 10))}\n                  />\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary mt-2\"\n                  onClick={() => {\n                    setNewAvatar(null);\n                    setNewAvatarUrl(null);\n                    setCrop({ x: 0, y: 0 });\n                    setZoom(1);\n                    setRotation(0);\n                  }}\n                >\n                  Cancel Crop\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center mb-4\">\n              <label htmlFor=\"avatarUpload\" className=\"profile-image-preview\">\n                {profile.avatar ? (\n                  <img\n                    src={profile.avatar}\n                    alt=\"Profile\"\n                    className=\"rounded-circle profile-image\"\n                  />\n                ) : (\n                  <div className=\"placeholder-avatar\">\n                    {profile ? (\n                      <>\n                        {profile.firstName && profile.firstName[0]\n                          ? profile.firstName[0].toUpperCase()\n                          : \"\"}\n                        {profile.lastName && profile.lastName[0]\n                          ? profile.lastName[0].toUpperCase()\n                          : \"\"}\n                      </>\n                    ) : null}\n                  </div>\n                )}\n              </label>\n              <input\n                type=\"file\"\n                id=\"avatarUpload\"\n                accept=\"image/*\"\n                onChange={handleImageChange}\n                className=\"d-none\"\n              />\n            </div>\n          )}\n          {Object.entries({\n            firstName: \"First Name\",\n            lastName: \"Last Name\",\n            phoneNumber: \"Phone Number\",\n            dob: \"Date of Birth\",\n            bio: \"Bio\",\n          }).map(([key, label]) => (\n            <div key={key} className=\"form-group mb-3\">\n              <label htmlFor={key} className=\"form-label\">\n                {label}\n              </label>\n              {key === \"bio\" ? (\n                <textarea\n                  className=\"form-control\"\n                  id={key}\n                  name={key}\n                  value={profile[key] || \"\"}\n                  onChange={handleChange}\n                  placeholder={`Enter your ${label.toLowerCase()}...`}\n                  rows=\"4\"\n                />\n              ) : (\n                <input\n                  type={key === \"dob\" ? \"date\" : \"text\"}\n                  className=\"form-control\"\n                  id={key}\n                  name={key}\n                  value={profile[key] || \"\"}\n                  onChange={handleChange}\n                  placeholder={`Enter your ${label.toLowerCase()}...`}\n                  required={key !== \"bio\" && key !== \"phoneNumber\"}\n                />\n              )}\n            </div>\n          ))}\n          {success && <div className=\"alert alert-success\">{success}</div>}\n\n          <div className=\"row mt-4\">\n            <div className=\"col-12 col-md-6 mb-2 mb-md-0\">\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary w-100\"\n                onClick={() => navigate(\"/profile-overview\")}\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n            </div>\n            <div className=\"col-12 col-md-6\">\n              <button\n                type=\"submit\"\n                className=\"btn sign-in-btn w-100\"\n                disabled={isLoading}\n              >\n                Save Changes\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default EditProfile;\n"],"names":["api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","handleApiError","_error$response$data","response","message","data","status","fetchTasks","get","fetchTaskById","taskId","createTask","newTask","post","updateTask","updatedTask","put","deleteTask","delete","updateTaskPriority","priority","loginUser","email","password","loginWithGoogle","async","code","authorizationCode","registerUser","firstName","lastName","verifyRegistrationCode","verificationCode","sendVerificationCode","sendForgotPasswordRequest","resetPassword","newPassword","changePassword","currentPassword","getProfile","err","console","updateProfile","formData","generateAITask","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","success","prompt","sendAIChatMessage","conversationHistory","arguments","length","undefined","EditProfile","profile","setProfile","useState","newAvatar","setNewAvatar","newAvatarUrl","setNewAvatarUrl","setError","setSuccess","crop","setCrop","x","y","zoom","setZoom","rotation","setRotation","croppedAreaPixels","setCroppedAreaPixels","isLoading","setIsLoading","navigate","useNavigate","logout","useAuth","useEffect","Error","toString","fetchProfile","onCropComplete","useCallback","croppedArea","getCroppedImg","imageSrc","pixelCrop","image","url","resolve","Image","addEventListener","setAttribute","src","canvas","document","createElement","ctx","getContext","safeArea","Math","max","width","height","sqrt","translate","rotate","PI","drawImage","getImageData","putImageData","round","toBlob","blob","handleChange","e","name","value","target","_objectSpread","appendProfileData","append","phoneNumber","dob","bio","user","userInfo","JSON","parse","avatar","setItem","stringify","setTimeout","_jsxs","className","children","_jsx","onSubmit","preventDefault","FormData","croppedBlob","croppedFile","File","type","lastModified","Date","now","style","position","Cropper","aspect","cropShape","showGrid","onCropChange","onZoomChange","onRotationChange","htmlFor","id","min","step","onChange","parseFloat","parseInt","onClick","alt","_Fragment","toUpperCase","accept","file","files","URL","createObjectURL","Object","entries","map","_ref","key","label","placeholder","toLowerCase","rows","required","disabled"],"sourceRoot":""}