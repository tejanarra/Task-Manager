{"version":3,"file":"static/js/28.f620ffd0.chunk.js","mappings":"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","sources":["components/VerificationForm.js","components/Register.js","services/api.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { verifyRegistrationCode } from \"../services/api\";\nimport { useAuth } from \"../context/AuthContext\";\nimport \"../Styles/VerificationForm.css\";\n\nconst VerificationForm = ({\n  theme,\n  email,\n  setEmail,\n  handleSendVerificationCode,\n  setMessage,\n  setError,\n  setIsLoading,\n  setIsVerificationStep,\n  isLoading,\n}) => {\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const navigate = useNavigate();\n  const { login } = useAuth();\n\n  const handleVerifyCode = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setMessage(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await verifyRegistrationCode(email, verificationCode);\n      setMessage(\"Verification successful! You are being redirected to home.\");\n\n      const { token, userInfo } = response.data;\n\n      setTimeout(() => {\n        setIsVerificationStep(false);\n        login(token, userInfo);\n        navigate(\"/tasks\");\n      }, 2000);\n    } catch (err) {\n      setError(err.response?.data?.message || \"Verification failed.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleVerifyCode} className=\"verification-form\">\n      <div className=\"mb-3\">\n        <input\n          type=\"email\"\n          className=\"form-control py-2\"\n          id=\"email\"\n          placeholder=\"Enter your email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <input\n          type=\"text\"\n          className=\"form-control py-2\"\n          id=\"verificationCode\"\n          placeholder=\"Enter verification code\"\n          value={verificationCode}\n          onChange={(e) => setVerificationCode(e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"d-flex flex-row flex-wrap justify-content-between align-items-center mt-3\">\n        <button type=\"submit\" className=\"btn verify-btn\" disabled={isLoading}>\n          {isLoading ? (\n            <span\n              className=\"spinner-border spinner-border-sm text-light\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          ) : (\n            \"Verify Code\"\n          )}\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-link resend-link\"\n          onClick={handleSendVerificationCode}\n        >\n          Resend Code\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default VerificationForm;\n","import React, { useState } from \"react\";\nimport { registerUser, sendVerificationCode } from \"../services/api\";\nimport VerificationForm from \"./VerificationForm\";\nimport \"../Styles/Register.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Register = ({ theme }) => {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [isVerificationStep, setIsVerificationStep] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasVerificationCode, setHasVerificationCode] = useState(false);\n  const [passwordsMatch, setPasswordsMatch] = useState(true);\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setMessage(\"\");\n    setIsLoading(true);\n\n    if (password !== confirmPassword) {\n      setPasswordsMatch(false);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await registerUser(firstName, lastName, email, password);\n      setMessage(response.data.message || \"Registration successful!\");\n      setIsVerificationStep(true);\n      setHasVerificationCode(true);\n    } catch (err) {\n      setError(err.response?.data?.message || \"Registration failed.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendVerificationCode = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setMessage(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await sendVerificationCode(email);\n      setMessage(response.data.message || \"Verification code sent!\");\n    } catch (err) {\n      setError(err.response?.data?.message || \"Failed to send code.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggleCheckbox = () => {\n    setHasVerificationCode(!hasVerificationCode);\n    if (hasVerificationCode) {\n      setIsVerificationStep(false);\n    }\n  };\n\n  return (\n    <div className=\"register-page d-flex align-items-center justify-content-center\">\n      <div className=\"register-form wider-form\">\n        <h1 className=\"fw-bold mb-2\">\n          {isVerificationStep || hasVerificationCode\n            ? \"Verify Registration\"\n            : \"Register\"}\n        </h1>\n        <p className={`text-${theme === \"dark\" ? \"light\" : \"muted\"} mb-4`}>\n          {isVerificationStep || hasVerificationCode\n            ? \"Enter your verification code\"\n            : \"Fill in the details to create your account\"}\n        </p>\n\n        {error && <div className=\"alert alert-danger\">{error}</div>}\n        {message && <div className=\"alert alert-success\">{message}</div>}\n\n        <div className=\"form-check mb-3\">\n          <input\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            id=\"hasVerificationCode\"\n            checked={hasVerificationCode}\n            onChange={handleToggleCheckbox}\n          />\n          <label className=\"form-check-label\" htmlFor=\"hasVerificationCode\">\n            I already have a verification code\n          </label>\n        </div>\n\n        {!isVerificationStep && !hasVerificationCode && (\n          <form onSubmit={handleRegister}>\n            <div className=\"row mb-3\">\n              <div className=\"col-6\">\n                <input\n                  type=\"text\"\n                  className=\"form-control py-2\"\n                  placeholder=\"First Name\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"col-6\">\n                <input\n                  type=\"text\"\n                  className=\"form-control py-2\"\n                  placeholder=\"Last Name\"\n                  value={lastName}\n                  onChange={(e) => setLastName(e.target.value)}\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <input\n                type=\"email\"\n                className=\"form-control py-2\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"mb-3\">\n              <input\n                type=\"password\"\n                className=\"form-control py-2\"\n                placeholder=\"Password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"mb-3\">\n              <input\n                type=\"password\"\n                className=\"form-control py-2\"\n                placeholder=\"Confirm Password\"\n                value={confirmPassword}\n                onChange={(e) => {\n                  setConfirmPassword(e.target.value);\n                  setPasswordsMatch(e.target.value === password);\n                }}\n                required\n              />\n            </div>\n\n            {!passwordsMatch && (\n              <div className=\"alert alert-danger\">Passwords do not match.</div>\n            )}\n\n            <button\n              type=\"submit\"\n              className={`btn register-btn w-100 mb-3`}\n              disabled={isLoading || !passwordsMatch}\n            >\n              {isLoading ? (\n                <span\n                  className=\"spinner-border spinner-border-sm text-light\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n              ) : (\n                \"Register\"\n              )}\n            </button>\n          </form>\n        )}\n\n        {(isVerificationStep || hasVerificationCode) && (\n          <VerificationForm\n            email={email}\n            setEmail={setEmail}\n            handleSendVerificationCode={handleSendVerificationCode}\n            setMessage={setMessage}\n            setError={setError}\n            setIsLoading={setIsLoading}\n            setIsVerificationStep={setIsVerificationStep}\n            isLoading={isLoading}\n          />\n        )}\n\n        <div className=\"text-center mt-4\">\n          <p className=\"mb-0 d-flex justify-content-center align-items-center gap-1\">\n            Already have an account?{\" \"}\n            <Link to=\"/login\" className=\"login-link\">\n              Login\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://task-manager-sigma-ashen.vercel.app/api\", // Replace with your backend URL\n  // baseURL: \"http://localhost:5001/api\", // Localhost for local development\n  headers: {\n    \"ngrok-skip-browser-warning\": \"true\",\n  },\n  timeout: 30000, // 30 second timeout\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Enhanced error handler\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    return {\n      message: error.response.data?.error || \"An error occurred\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: \"No response from server. Please check your connection.\",\n      status: 0,\n    };\n  } else {\n    // Error setting up request\n    return {\n      message: error.message || \"An unexpected error occurred\",\n      status: -1,\n    };\n  }\n};\n\n// Task-related endpoints\nexport const fetchTasks = () => api.get(\"/tasks\");\nexport const fetchTaskById = (taskId) => api.get(`/tasks/${taskId}`);\nexport const createTask = (newTask) => api.post(\"/tasks\", newTask);\nexport const updateTask = (taskId, updatedTask) =>\n  api.put(`/tasks/${taskId}`, updatedTask);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// Authentication-related endpoints\nexport const loginUser = (email, password) => {\n  return api.post(\"/auth/login\", { email, password });\n};\n\nexport const loginWithGoogle = async (authorizationCode) => {\n  return api.post(`/auth/google`, { code: authorizationCode });\n};\n\nexport const registerUser = (firstName, lastName, email, password) => {\n  return api.post(\"/auth/register\", { firstName, lastName, email, password });\n};\n\nexport const verifyRegistrationCode = (email, verificationCode) => {\n  return api.post(\"/auth/verify-registration\", { email, verificationCode });\n};\n\nexport const sendVerificationCode = (email) => {\n  return api.post(\"/auth/resend-verification\", { email });\n};\n\nexport const sendForgotPasswordRequest = (email) => {\n  return api.post(\"/auth/forgot-password\", { email });\n};\n\nexport const resetPassword = (email, verificationCode, newPassword) => {\n  return api.post(\"/auth/verify-code\", {\n    email,\n    verificationCode,\n    newPassword,\n  });\n};\n\nexport const changePassword = (currentPassword, newPassword) => {\n  return api.post(\"/auth/change-password\", { currentPassword, newPassword });\n};\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n// Profile-related endpoints\nexport const getProfile = async () => {\n  try {\n    const response = await api.get(\"/profile\");\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching profile:\", err);\n    throw err;\n  }\n};\n\nexport const updateProfile = async (formData) => {\n  try {\n    const response = await api.put(\"/profile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating profile:\", err);\n    throw err;\n  }\n};\n\n// AI-related endpoints\nexport const generateAITask = async (prompt) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat\",\n      { prompt },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport const sendAIChatMessage = async (message, conversationHistory = []) => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const response = await api.post(\n      \"/ai/chat-conversation\",\n      { message, conversationHistory },\n      { headers: { \"x-user-timezone\": timezone } }\n    );\n    return { success: true, data: response.data };\n  } catch (error) {\n    const errorInfo = handleApiError(error);\n    return { success: false, error: errorInfo.message };\n  }\n};\n\nexport default api;\n"],"names":["_ref","theme","email","setEmail","handleSendVerificationCode","setMessage","setError","setIsLoading","setIsVerificationStep","isLoading","verificationCode","setVerificationCode","useState","navigate","useNavigate","login","useAuth","_jsxs","onSubmit","async","e","preventDefault","response","verifyRegistrationCode","token","userInfo","data","setTimeout","err","_err$response","_err$response$data","message","className","children","_jsx","type","id","placeholder","value","onChange","target","required","disabled","role","onClick","firstName","setFirstName","lastName","setLastName","password","setPassword","confirmPassword","setConfirmPassword","error","isVerificationStep","hasVerificationCode","setHasVerificationCode","passwordsMatch","setPasswordsMatch","concat","checked","handleToggleCheckbox","htmlFor","registerUser","VerificationForm","sendVerificationCode","_err$response2","_err$response2$data","Link","to","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","localStorage","getItem","Authorization","Promise","reject","handleApiError","_error$response$data","status","fetchTasks","get","fetchTaskById","taskId","createTask","newTask","post","updateTask","updatedTask","put","deleteTask","delete","updateTaskPriority","priority","loginUser","loginWithGoogle","code","authorizationCode","sendForgotPasswordRequest","resetPassword","newPassword","changePassword","currentPassword","getProfile","console","updateProfile","formData","generateAITask","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","success","prompt","sendAIChatMessage","conversationHistory","arguments","length","undefined"],"sourceRoot":""}