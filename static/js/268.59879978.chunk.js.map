{"version":3,"file":"static/js/268.59879978.chunk.js","mappings":"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","sources":["components/ChangePassword.js","services/api.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { changePassword } from \"../services/api\";\nimport \"../Styles/ProfileOverview.css\";\nimport \"../Styles/EditProfile.css\";\nimport { useAuth } from \"../context/AuthContext\";\n\nconst ChangePassword = () => {\n  const [formData, setFormData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmNewPassword: \"\",\n  });\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const navigate = useNavigate();\n  const { logout } = useAuth();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { currentPassword, newPassword, confirmNewPassword } = formData;\n\n    if (!currentPassword || !newPassword || !confirmNewPassword) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    if (newPassword !== confirmNewPassword) {\n      setError(\"Passwords do not match.\");\n      return;\n    }\n\n    try {\n      await changePassword(currentPassword, newPassword);\n      setSuccess(\"Password changed successfully!\");\n      setError(\"\");\n      setTimeout(() => navigate(\"/profile-overview\"), 2000);\n    } catch (err) {\n      console.error(\n        \"Password change error:\",\n        err.response?.data || err.message\n      );\n      setError(\n        err.response?.data?.message ||\n          \"Failed to change password. Please try again.\"\n      );\n      setSuccess(\"\");\n\n      if (err && err.status === 403) {\n        logout();\n        navigate(\"/login\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-card shadow rounded\">\n        <h2 className=\"profile-title text-center mb-4 bold-text\">\n          Change Password\n        </h2>\n        {success && <p className=\"text-success text-center\">{success}</p>}\n        {error && <p className=\"text-danger text-center\">{error}</p>}\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group mb-3\">\n            <label htmlFor=\"currentPassword\" className=\"form-label\">\n              Current Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"currentPassword\"\n              name=\"currentPassword\"\n              value={formData.currentPassword}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <div className=\"form-group mb-3\">\n            <label htmlFor=\"newPassword\" className=\"form-label\">\n              New Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              value={formData.newPassword}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <div className=\"form-group mb-3\">\n            <label htmlFor=\"confirmNewPassword\" className=\"form-label\">\n              Confirm New Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"confirmNewPassword\"\n              name=\"confirmNewPassword\"\n              value={formData.confirmNewPassword}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <div className=\"row mt-4\">\n            <div className=\"col-12 col-md-6 mb-2 mb-md-0\">\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary w-100\"\n                onClick={() => navigate(\"/profile-overview\")}\n              >\n                Cancel\n              </button>\n            </div>\n            <div className=\"col-12 col-md-6\">\n              <button type=\"submit\" className=\"btn btn-dark w-100\">\n                Save Changes\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChangePassword;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/api\",\n  headers: { \"ngrok-skip-browser-warning\": \"true\" },\n  timeout: 30000,\n});\n\n// ✅ Attach JWT token automatically\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Standard error formatting\nconst formatError = (error) => {\n  if (error.response)\n    return {\n      status: error.response.status,\n      message: error.response.data.error,\n    };\n  if (error.request) return { status: 0, message: \"No response from server\" };\n  return { status: -1, message: error.message };\n};\n\n/* ======================\n   TASK ENDPOINTS\n====================== */\n\nexport const fetchTasks = () => api.get(\"/tasks\");\n\nexport const createTask = (task) =>\n  api.post(\"/tasks\", {\n    ...task,\n    deadlineUTC: task.deadlineUTC || null,\n  });\n\nexport const updateTask = (id, updated) =>\n  api.put(`/tasks/${id}`, {\n    ...updated,\n    deadlineUTC: updated.deadlineUTC ?? null,\n  });\n\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\n\nexport const updateTaskPriority = (taskId, priority) =>\n  api.put(`/tasks/${taskId}/priority`, { priority });\n\n// ✅ Fully overwrite reminder set\nexport const updateTaskReminders = (taskId, reminders) =>\n  api.patch(`/tasks/${taskId}/reminders`, {\n    action: \"overwrite\",\n    reminders,\n  });\n\n/* ======================\n   AUTH ENDPOINTS\n====================== */\n\nexport const loginUser = (email, password) =>\n  api.post(\"/auth/login\", { email, password });\n\nexport const loginWithGoogle = (authorizationCode) =>\n  api.post(`/auth/google`, { code: authorizationCode });\n\nexport const registerUser = (firstName, lastName, email, password) =>\n  api.post(\"/auth/register\", { firstName, lastName, email, password });\n\nexport const verifyRegistrationCode = (email, verificationCode) =>\n  api.post(\"/auth/verify-registration\", { email, verificationCode });\n\nexport const sendVerificationCode = (email) =>\n  api.post(\"/auth/resend-verification\", { email });\n\nexport const sendForgotPasswordRequest = (email) =>\n  api.post(\"/auth/forgot-password\", { email });\n\nexport const resetPassword = (email, verificationCode, newPassword) =>\n  api.post(\"/auth/verify-code\", { email, verificationCode, newPassword });\n\nexport const changePassword = (currentPassword, newPassword) =>\n  api.post(\"/auth/change-password\", { currentPassword, newPassword });\n\nexport const verifyToken = () => api.get(\"/verify-token\");\n\n/* ======================\n PROFILE ENDPOINTS\n====================== */\n\nexport const getProfile = () => api.get(\"/profile\").then((res) => res.data);\n\nexport const updateProfile = (formData) =>\n  api\n    .put(\"/profile\", formData, {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    })\n    .then((res) => res.data);\n\n/* ======================\n AI ENDPOINTS\n====================== */\n\nexport const generateAITask = (prompt) =>\n  api.post(\"/ai/chat\", { prompt }).then((r) => ({\n    success: true,\n    data: r.data,\n  }));\n\nexport const sendAIChatMessage = (message, conversationHistory = []) =>\n  api.post(\"/ai/chat-conversation\", {\n    message,\n    conversationHistory,\n  });\n"],"names":["ChangePassword","formData","setFormData","useState","currentPassword","newPassword","confirmNewPassword","error","setError","success","setSuccess","navigate","useNavigate","logout","useAuth","handleChange","e","name","value","target","_objectSpread","_jsx","className","children","_jsxs","onSubmit","async","preventDefault","changePassword","setTimeout","err","_err$response","_err$response2","_err$response2$data","console","response","data","message","status","htmlFor","type","id","onChange","required","onClick","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","Promise","reject","fetchTasks","get","createTask","task","post","deadlineUTC","updateTask","updated","_updated$deadlineUTC","put","deleteTask","taskId","delete","updateTaskPriority","priority","updateTaskReminders","reminders","patch","action","loginUser","email","password","loginWithGoogle","authorizationCode","code","registerUser","firstName","lastName","verifyRegistrationCode","verificationCode","sendVerificationCode","sendForgotPasswordRequest","resetPassword","getProfile","then","res","updateProfile","generateAITask","prompt","r","sendAIChatMessage","conversationHistory","arguments","length","undefined"],"sourceRoot":""}