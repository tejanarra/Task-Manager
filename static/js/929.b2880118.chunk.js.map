{"version":3,"file":"static/js/929.b2880118.chunk.js","mappings":"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","sources":["utils/statusUtils.js","components/tasks/taskItem/TaskCard.js","components/tasks/AIChatModal/QuickMode.js","components/tasks/AIChatModal/ChatMessage.js","components/tasks/taskItem/TaskItem.js","components/tasks/AIChatModal/ChatMode.js","components/tasks/AIChatModal/TaskPreviewModal.js","components/tasks/AIChatModal/AIChatModal.js","components/tasks/AIChatModal/FloatingChatWidget.js","components/tasks/TaskList.js"],"sourcesContent":["import { TASK_STATUS, STATUS_COLORS, TASK_STATUS_LABELS } from \"../constants/appConstants\";\n\n/**\n * Gets the color for a task status\n * @param {string} status - The task status\n * @returns {string} - The hex color code\n */\nexport const getStatusColor = (status) => {\n  return STATUS_COLORS[status] || STATUS_COLORS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Gets the label for a task status\n * @param {string} status - The task status\n * @returns {string} - The human-readable label\n */\nexport const getStatusLabel = (status) => {\n  return TASK_STATUS_LABELS[status] || TASK_STATUS_LABELS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Checks if a status is valid\n * @param {string} status - The status to check\n * @returns {boolean} - True if valid\n */\nexport const isValidStatus = (status) => {\n  return Object.values(TASK_STATUS).includes(status);\n};\n\n/**\n * Gets all available statuses\n * @returns {Array} - Array of status objects with value and label\n */\nexport const getAllStatuses = () => {\n  return Object.values(TASK_STATUS).map(status => ({\n    value: status,\n    label: getStatusLabel(status),\n    color: getStatusColor(status),\n  }));\n};\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { formatRelativeTime } from \"../../../utils/dateUtils\";\nimport { getStatusColor } from \"../../../utils/statusUtils\";\nimport { getReminderSummary } from \"../../../utils/reminderUtils\";\nimport \"./Styles/TaskCard.css\";\n\nconst TaskCard = ({ theme, task, demoMode = false }) => {\n  const navigate = useNavigate();\n\n  const handleClick = () => {\n    if (!demoMode) {\n      navigate(`/tasks/${task.id}/edit`);\n    }\n  };\n\n  const stripColor = getStatusColor(task.status);\n  const reminderSummary = getReminderSummary(task.reminders);\n\n  return (\n    <div\n      className={`task-card ${theme === \"dark\" ? \"dark\" : \"\"}`}\n      onClick={handleClick}\n    >\n      <div className=\"task-strip\" style={{ backgroundColor: stripColor }}></div>\n\n      <div className=\"task-card-content\">\n        <i\n          className={`bi ${\n            task.status === \"completed\"\n              ? \"bi-check-circle\"\n              : task.status === \"in-progress\"\n              ? \"bi-hourglass\"\n              : \"bi-ban\"\n          } status-icon`}\n          style={{ color: stripColor }}\n        />\n\n        <h5 className=\"task-title\" style={{ color: stripColor }}>\n          {task.title}\n        </h5>\n        <p className=\"task-description\">{task.description}</p>\n\n        <div className=\"task-metadata\">\n          <div className=\"task-metadata-item\">\n            <strong>Created</strong>\n            <span>{formatRelativeTime(task.createdAt)}</span>\n          </div>\n          <div className=\"task-metadata-item\">\n            <strong>Deadline</strong>\n            <span>\n              {task.deadline\n                ? formatRelativeTime(task.deadline)\n                : \"No deadline set\"}\n            </span>\n          </div>\n        </div>\n\n        {reminderSummary && (\n          <div\n            className=\"reminder-indicator\"\n            title={`Reminders: ${reminderSummary}`}\n          >\n            <i className=\"bi bi-clock\"></i>\n            <small>{reminderSummary}</small>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TaskCard;\n","import { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { generateAITask } from \"../../../services/api\";\n\nconst QuickMode = ({ setError, onClose }) => {\n  const navigate = useNavigate();\n  const [quickPrompt, setQuickPrompt] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n\n  const handleQuickGenerate = async () => {\n    if (!quickPrompt.trim()) return;\n    setIsLoading(true);\n    setError(null);\n\n    const result = await generateAITask(quickPrompt);\n    setIsLoading(false);\n\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const aiTask = result.data;\n    const newTask = {\n      title: aiTask.title,\n      description: aiTask.description,\n      status: aiTask.status || \"not-started\",\n      deadline: aiTask.deadline,\n      reminders: aiTask.reminders || [],\n    };\n\n    // Close modal and navigate to editor with task data\n    onClose();\n    navigate(\"/tasks/new/edit\", { state: { task: newTask } });\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleQuickGenerate();\n    }\n  };\n\n  return (\n    <div className=\"quick-mode\">\n      <div className=\"quick-mode-content\">\n        <label className=\"form-label\">Describe your task:</label>\n        <textarea\n          ref={inputRef}\n          className=\"form-control\"\n          rows={4}\n          value={quickPrompt}\n          onChange={(e) => setQuickPrompt(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\"E.g., 'Prepare project report by Friday 5PM with reminders 1 day and 1 hour before'\"\n          disabled={isLoading}\n        />\n        <div className=\"quick-mode-suggestions\">\n          <small>Try these:</small>\n          {[\n            \"Schedule dentist appointment next Tuesday at 3pm\",\n            \"Plan weekend shopping with 1 day reminder\",\n            \"Prepare presentation for Monday with daily reminders\",\n          ].map((text) => (\n            <button\n              key={text}\n              className=\"suggestion-chip\"\n              onClick={() => setQuickPrompt(text)}\n              disabled={isLoading}\n            >\n              {text}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"modal-actions\">\n        <button\n          className=\"btn btn-secondary\"\n          onClick={onClose}\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={handleQuickGenerate}\n          disabled={!quickPrompt.trim() || isLoading}\n        >\n          {isLoading ? (\n            <>\n              <span className=\"spinner-border spinner-border-sm me-2\"></span>{\" \"}\n              Generating...\n            </>\n          ) : (\n            <>\n              <i className=\"bi bi-magic me-2\"></i> Generate Task\n            </>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickMode;\n","const ChatMessage = ({ msg, user, theme }) => {\n  const userAvatar = user.avatar;\n  const initials =\n    (user.firstName?.[0]?.toUpperCase() || \"\") +\n    (user.lastName?.[0]?.toUpperCase() || \"\");\n  const displayInitials = initials || \"?\";\n\n  // Format timestamp for WhatsApp-like display\n  const formatTime = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now - date) / (1000 * 60 * 60);\n\n    // If message is from today, show time only\n    if (diffInHours < 24 && date.getDate() === now.getDate()) {\n      return date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n    }\n\n    // If yesterday\n    if (diffInHours < 48 && date.getDate() === now.getDate() - 1) {\n      return `Yesterday ${date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })}`;\n    }\n\n    // Otherwise show date and time\n    return (\n      date.toLocaleDateString([], {\n        month: \"short\",\n        day: \"numeric\",\n      }) +\n      \" \" +\n      date.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })\n    );\n  };\n\n  // Format message content with basic markdown-like formatting\n  const formatMessageContent = (content) => {\n    if (!content) return \"\";\n\n    // Split by numbered lists (1., 2., etc.)\n    const parts = content.split(/(\\d+\\.\\s+[^\\n]+)/g);\n\n    return parts.map((part, index) => {\n      // Check if this is a numbered list item\n      if (/^\\d+\\.\\s+/.test(part)) {\n        const match = part.match(/^(\\d+)\\.\\s+(.+)/);\n        if (match) {\n          return (\n            <div\n              key={index}\n              style={{ marginLeft: \"0.5rem\", marginTop: \"0.25rem\" }}\n            >\n              <strong>{match[1]}.</strong> {match[2]}\n            </div>\n          );\n        }\n      }\n\n      // Process inline formatting\n      const processedPart = part\n        .split(/(\\*\\*[^*]+\\*\\*)/g) // Bold text\n        .map((segment, i) => {\n          if (segment.startsWith(\"**\") && segment.endsWith(\"**\")) {\n            return <strong key={i}>{segment.slice(2, -2)}</strong>;\n          }\n          return segment;\n        });\n\n      return <span key={index}>{processedPart}</span>;\n    });\n  };\n\n  return (\n    <div className={`chat-message ${msg.role}`}>\n      <div className=\"message-avatar\">\n        {msg.role === \"user\" ? (\n          userAvatar ? (\n            <img\n              src={userAvatar}\n              alt=\"User\"\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: \"50%\",\n                objectFit: \"cover\",\n              }}\n            />\n          ) : (\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: \"50%\",\n                backgroundColor: theme === \"dark\" ? \"#ffffff\" : \"#000000\",\n                color: theme === \"dark\" ? \"#000000\" : \"#ffffff\",\n                fontWeight: \"bold\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                fontSize: \"0.85rem\",\n              }}\n            >\n              {displayInitials}\n            </div>\n          )\n        ) : (\n          <i className=\"bi bi-robot\"></i>\n        )}\n      </div>\n      <div className=\"message-content\">\n        <div className=\"message-text\">\n          <div className=\"message-text-content\">\n            {formatMessageContent(msg.content)}\n          </div>\n          <div className=\"message-time\">\n            {formatTime(msg.timestamp)}\n            {msg.role === \"user\" && (\n              <i\n                className=\"bi bi-check-all\"\n                style={{ fontSize: \"0.75rem\" }}\n              ></i>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMessage;\n","import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { deleteTask, updateTask } from \"../../../services/api\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ConfirmationModal from \"../../layout/ConfirmationModal\";\nimport TaskReminders from \"./TaskReminders\";\nimport {\n  formatRelativeTime,\n  formatDateTimeLocal,\n} from \"../../../utils/dateUtils\";\nimport { REMINDER_INTERVALS } from \"../../../constants/appConstants\";\nimport \"./Styles/TaskItem.css\";\n\nconst TaskItem = ({\n  theme,\n  task,\n  setTasks,\n  isNewTask = false,\n  isChatPreview = false,\n  onSave = () => {},\n  onCancel = () => {},\n}) => {\n  const [isEditing, setIsEditing] = useState(isNewTask);\n  const [tempTitle, setTempTitle] = useState(task.title);\n  const [tempDescription, setTempDescription] = useState(task.description);\n  const [tempStatus, setTempStatus] = useState(task.status);\n  const [tempDeadline, setTempDeadline] = useState(task.deadline || null);\n  const [tempReminders, setTempReminders] = useState(\n    Array.isArray(task.reminders) ? task.reminders : []\n  );\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const cardRef = useRef(null);\n\n  // ✅ Ensure reminders update when the AI-created task is previewed\n  useEffect(() => {\n    if (Array.isArray(task.reminders) && task.reminders.length > 0) {\n      setTempReminders(task.reminders);\n    }\n  }, [task.reminders]);\n\n  const handleCancel = useCallback(() => {\n    setTempTitle(task.title);\n    setTempDescription(task.description);\n    setTempStatus(task.status);\n    setTempDeadline(task.deadline || null);\n    setTempReminders(Array.isArray(task.reminders) ? task.reminders : []);\n    isNewTask ? onCancel(task.id) : setIsEditing(false);\n  }, [\n    task.title,\n    task.description,\n    task.status,\n    task.deadline,\n    task.reminders,\n    isNewTask,\n    onCancel,\n    task.id,\n  ]);\n\n  useEffect(() => {\n    // Only add click outside listener if NOT in chat preview\n    if (isChatPreview) return;\n    \n    const handleClickOutside = (e) => {\n      if (isEditing && cardRef.current && !cardRef.current.contains(e.target)) {\n        handleCancel();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [isEditing, handleCancel, isChatPreview]);\n\n  const handleSave = async () => {\n    if (!tempTitle.trim() || !tempDescription.trim()) return;\n\n    setIsLoading(true);\n\n    const changed =\n      tempTitle !== task.title ||\n      tempDescription !== task.description ||\n      tempStatus !== task.status ||\n      tempDeadline !== task.deadline ||\n      JSON.stringify(tempReminders) !== JSON.stringify(task.reminders);\n\n    if (!changed && !isNewTask) {\n      setIsEditing(false);\n      setIsLoading(false);\n      return;\n    }\n\n    const now = new Date();\n    const deadlineDate = tempDeadline ? new Date(tempDeadline) : null;\n    const diffInHours =\n      deadlineDate && deadlineDate > now\n        ? (deadlineDate - now) / (1000 * 60 * 60)\n        : 0;\n\n    const regenerateRecurringReminders = (reminders) => {\n      const hasDaily = reminders.some((r) => r.type === \"daily\");\n      const hasWeekly = reminders.some((r) => r.type === \"weekly\");\n\n      let filteredReminders = reminders.filter(\n        (r) =>\n          (r.type === \"one-time\" || !r.type) && r.remindBefore <= diffInHours\n      );\n\n      if (hasDaily && diffInHours > 0) {\n        const maxDays = Math.floor(diffInHours / 24);\n        for (let day = 1; day <= maxDays; day++) {\n          filteredReminders.push({\n            remindBefore: day * 24,\n            sent: false,\n            type: \"daily\",\n            dayNumber: day,\n          });\n        }\n      }\n\n      if (hasWeekly && diffInHours > 0) {\n        const maxWeeks = Math.floor(diffInHours / (24 * 7));\n        for (let week = 1; week <= maxWeeks; week++) {\n          filteredReminders.push({\n            remindBefore: week * 24 * 7,\n            sent: false,\n            type: \"weekly\",\n            weekNumber: week,\n          });\n        }\n      }\n\n      return filteredReminders;\n    };\n\n    const finalReminders =\n      diffInHours > 0 ? regenerateRecurringReminders(tempReminders) : [];\n\n    const updatedTaskData = {\n      title: tempTitle.trim(),\n      description: tempDescription.trim(),\n      status: tempStatus,\n      deadline: tempDeadline ? deadlineDate.toISOString() : null,\n      reminders: finalReminders,\n    };\n\n    try {\n      if (isNewTask) {\n        onSave({ ...task, ...updatedTaskData });\n      } else {\n        const response = await updateTask(task.id, updatedTaskData);\n        setTasks((prev) =>\n          prev.map((t) => (t.id === response.data.id ? response.data : t))\n        );\n        setIsEditing(false);\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = () => setShowDeleteModal(true);\n  const confirmDelete = async () => {\n    setIsLoading(true);\n    try {\n      await deleteTask(task.id);\n      setTasks((prev) => prev.filter((t) => t.id !== task.id));\n      setShowDeleteModal(false);\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    } finally {\n      setIsLoading(false);\n      setShowDeleteModal(false);\n    }\n  };\n\n  const getStripColor = (status) => {\n    switch (status) {\n      case \"completed\":\n        return \"#007a00\";\n      case \"in-progress\":\n        return \"#daa520\";\n      default:\n        return \"#a00000\";\n    }\n  };\n\n  const stripColor = getStripColor(task.status);\n  const isDeadlineInFuture =\n    tempDeadline && new Date(tempDeadline) > new Date();\n\n  // ✅ Fixed – correctly include \"one-time\" reminders\n  const getReminderSummary = () => {\n    if (!tempReminders || tempReminders.length === 0) return null;\n\n    const dailyCount = tempReminders.filter((r) => r.type === \"daily\").length;\n    const weeklyCount = tempReminders.filter((r) => r.type === \"weekly\").length;\n    const oneTimeCount = tempReminders.filter(\n      (r) => r.type === \"one-time\" || !r.type\n    ).length;\n\n    const parts = [];\n    if (dailyCount > 0) parts.push(`Daily (${dailyCount})`);\n    if (weeklyCount > 0) parts.push(`Weekly (${weeklyCount})`);\n    if (oneTimeCount > 0) parts.push(`One-time (${oneTimeCount})`);\n\n    return parts.length > 0 ? parts.join(\", \") : null;\n  };\n\n  const reminderSummary = getReminderSummary();\n\n  return (\n    <>\n      <div\n        ref={cardRef}\n        className={`task-card ${theme === \"dark\" ? \"dark\" : \"\"} ${\n          isLoading ? \"loading\" : \"\"\n        } ${isNewTask ? \"new-task\" : \"\"} ${isChatPreview ? \"chat-preview\" : \"\"}`}\n        onClick={() => !isEditing && !isChatPreview && setIsEditing(true)}\n      >\n        <div\n          className=\"task-strip\"\n          style={{ backgroundColor: stripColor }}\n        ></div>\n\n        <div className=\"task-card-content\">\n          {!isEditing && (\n            <i\n              className={`bi ${\n                task.status === \"completed\"\n                  ? \"bi-check-circle\"\n                  : task.status === \"in-progress\"\n                  ? \"bi-hourglass\"\n                  : \"bi-ban\"\n              } status-icon`}\n              style={{ color: stripColor }}\n            />\n          )}\n\n          {isEditing ? (\n            <div className=\"task-form-grid\">\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={tempTitle}\n                  onChange={(e) => setTempTitle(e.target.value)}\n                  placeholder=\"Enter task title...\"\n                />\n              </div>\n\n              <div className=\"task-form-group full-width\">\n                <label className=\"form-label\">Description</label>\n                <textarea\n                  className=\"form-control\"\n                  rows={3}\n                  value={tempDescription}\n                  onChange={(e) => setTempDescription(e.target.value)}\n                  placeholder=\"Enter task description...\"\n                />\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Status</label>\n                <select\n                  className=\"form-select\"\n                  value={tempStatus}\n                  onChange={(e) => setTempStatus(e.target.value)}\n                >\n                  <option value=\"not-started\">Not Started</option>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div className=\"task-form-group\">\n                <label className=\"form-label\">Deadline</label>\n                <input\n                  type=\"datetime-local\"\n                  className=\"form-control\"\n                  value={tempDeadline ? formatDateTimeLocal(tempDeadline) : \"\"}\n                  onChange={(e) => setTempDeadline(e.target.value)}\n                />\n              </div>\n\n              {isDeadlineInFuture && (\n                <div className=\"task-form-group full-width\">\n                  <TaskReminders\n                    tempDeadline={tempDeadline}\n                    tempReminders={tempReminders}\n                    setTempReminders={setTempReminders}\n                    theme={theme}\n                    ALL_INTERVALS={REMINDER_INTERVALS}\n                  />\n                </div>\n              )}\n            </div>\n          ) : (\n            <>\n              <h5 className=\"task-title\" style={{ color: stripColor }}>\n                {tempTitle}\n              </h5>\n              <p className=\"task-description\">{tempDescription}</p>\n            </>\n          )}\n\n          <div className=\"task-metadata\">\n            <div className=\"task-metadata-item\">\n              <strong>Created</strong>\n              <span>{formatRelativeTime(task.createdAt)}</span>\n            </div>\n            <div className=\"task-metadata-item\">\n              <strong>Deadline</strong>\n              <span>\n                {task.deadline\n                  ? formatRelativeTime(task.deadline)\n                  : \"No deadline set\"}\n              </span>\n            </div>\n          </div>\n\n          {isEditing && (\n            <div className=\"task-actions\">\n              {!isNewTask && (\n                <button\n                  className={`btn ${\n                    theme === \"dark\" ? \"btn-outline-danger\" : \"btn-secondary\"\n                  }`}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleDelete();\n                  }}\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Deleting...\" : \"Delete\"}\n                </button>\n              )}\n              <button\n                className={`btn ${\n                  theme === \"dark\" ? \"btn-outline-light\" : \"btn-dark\"\n                }`}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleSave();\n                }}\n                disabled={\n                  !tempTitle.trim() || !tempDescription.trim() || isLoading\n                }\n              >\n                {isLoading ? \"Saving...\" : \"Save\"}\n              </button>\n            </div>\n          )}\n\n          {/* ✅ Reminders now always show when available */}\n          {!isEditing && reminderSummary && (\n            <div\n              className=\"reminder-indicator\"\n              title={`Reminders: ${reminderSummary}`}\n            >\n              <i className=\"bi bi-clock\"></i>\n              <small>{reminderSummary}</small>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <ConfirmationModal\n        theme={theme}\n        show={showDeleteModal}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        onConfirm={confirmDelete}\n        onCancel={() => setShowDeleteModal(false)}\n      />\n    </>\n  );\n};\n\nexport default TaskItem;","import { useState, useRef, useEffect } from \"react\";\nimport { normalizeRemindersBeforeSave } from \"../../../utils/reminderUtils\";\n\nimport {\n  sendAIChatMessage,\n  generateAITask,\n  updateTask,\n  deleteTask,\n  createTask,\n} from \"../../../services/api\";\nimport ChatMessage from \"./ChatMessage\";\nimport TaskItem from \"../taskItem/TaskItem\";\nimport { useAuth } from \"../../../context/AuthContext\";\nimport { STORAGE_KEYS } from \"../../../constants/appConstants\";\nimport \"./Styles/ChatPreview.css\";\n\nconst CHAT_HISTORY_KEY = STORAGE_KEYS.AI_CHAT_HISTORY;\n\n// Compact Task Preview Badge Component\nconst TaskPreviewBadge = ({ task, theme }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const getStatusText = () => {\n    if (task.confirmed) {\n      if (task.action === \"delete\") return \"Deleted\";\n      if (task.action === \"create\") return \"Created\";\n      return \"Updated\";\n    }\n    if (task.cancelled) return \"Cancelled\";\n    if (task.action === \"delete\") return \"Delete Request\";\n    if (task.action === \"create\") return \"New Task\";\n    return \"Update Request\";\n  };\n\n  return (\n    <div \n      className=\"task-preview-badge\"\n      onMouseEnter={() => setIsExpanded(true)}\n      onMouseLeave={() => setIsExpanded(false)}\n    >\n      <div className=\"badge-compact\">\n        <div className=\"badge-info\">\n          <div className=\"badge-status\">{getStatusText()}</div>\n          <div className=\"badge-title\">{task.title}</div>\n        </div>\n        <div className=\"badge-expand-hint\">\n          <i className={`bi bi-chevron-${isExpanded ? 'down' : 'right'}`}></i>\n        </div>\n      </div>\n\n      {isExpanded && (\n        <div className=\"badge-expanded-content\">\n          <TaskItem\n            theme={theme}\n            task={{\n              ...task,\n              title: task.title || \"\",\n              description: task.description || \"\",\n              reminders: Array.isArray(task.reminders) ? task.reminders : [],\n            }}\n            isNewTask={false}\n            isChatPreview={true}\n            isHistoryPreview={true}\n            onSave={() => {}}\n            onCancel={() => {}}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Delete Action Badge\nconst DeleteActionBadge = ({ task, theme }) => {\n  const getStatusText = () => {\n    if (task.confirmed) return \"Deleted\";\n    if (task.cancelled) return \"Delete Cancelled\";\n    return \"Delete Request\";\n  };\n\n  return (\n    <div className=\"delete-action-badge\">\n      <div className=\"delete-info\">\n        <div className=\"delete-status\">{getStatusText()}</div>\n        <div className=\"delete-title\">{task.title}</div>\n      </div>\n    </div>\n  );\n};\n\nconst ChatMode = ({ setError, theme, refreshTasks }) => {\n  const { user } = useAuth();\n\n  const [chatMessages, setChatMessages] = useState(() => {\n    try {\n      const saved = localStorage.getItem(CHAT_HISTORY_KEY);\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error(\"Error loading chat history:\", error);\n      return [];\n    }\n  });\n\n  const [chatInput, setChatInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewTask, setPreviewTask] = useState(null);\n  const chatEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [chatMessages, previewTask]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(chatMessages));\n    } catch (error) {\n      console.error(\"Error saving chat history:\", error);\n    }\n  }, [chatMessages]);\n\n  const handleChatSend = async () => {\n    if (!chatInput.trim()) return;\n\n    const userMessage = {\n      role: \"user\",\n      content: chatInput.trim(),\n      timestamp: new Date().toISOString(),\n    };\n\n    if (previewTask) {\n      setChatMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"\",\n          timestamp: new Date().toISOString(),\n          preview: previewTask,\n        },\n      ]);\n      setPreviewTask(null);\n    }\n\n    setChatMessages((prev) => [...prev, userMessage]);\n    setChatInput(\"\");\n    setIsLoading(true);\n    setError(null);\n\n    setTimeout(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 100);\n\n    const conversationHistory = chatMessages\n      .filter((msg) => msg.content)\n      .map((msg) => ({\n        role: msg.role,\n        content: msg.content,\n      }));\n\n    const result = await sendAIChatMessage(\n      userMessage.content,\n      conversationHistory\n    );\n\n    setIsLoading(false);\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const { reply, previewUpdate } = result.data;\n\n    if (previewUpdate && previewUpdate.reminders) {\n      previewUpdate.reminders = normalizeRemindersBeforeSave(\n        previewUpdate.reminders,\n        previewUpdate.deadline\n      );\n    }\n\n    setChatMessages((prev) => [\n      ...prev,\n      {\n        role: \"assistant\",\n        content: reply,\n        timestamp: new Date().toISOString(),\n      },\n    ]);\n\n    if (previewUpdate) {\n      setPreviewTask({\n        ...previewUpdate,\n        _aiSuggested: true,\n        isUpdate:\n          previewUpdate.action === \"update\" ||\n          previewUpdate.action === \"delete\",\n        isNewTask: previewUpdate.action === \"create\" || previewUpdate.isNewTask,\n        createdAt: previewUpdate.createdAt || new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n  };\n\n  const handleGenerateFromChat = async () => {\n    if (chatMessages.filter((msg) => msg.content).length === 0) {\n      setError(\"No conversation found to generate task from\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    if (previewTask) {\n      setChatMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"\",\n          timestamp: new Date().toISOString(),\n          preview: previewTask,\n        },\n      ]);\n      setPreviewTask(null);\n    }\n\n    const conversationSummary = chatMessages\n      .filter((msg) => msg.content)\n      .map(\n        (msg) => `${msg.role === \"user\" ? \"User\" : \"Assistant\"}: ${msg.content}`\n      )\n      .join(\"\\n\");\n\n    const contextualPrompt = `Based on this conversation, create a task:\\n\\n${conversationSummary}\\n\\nCreate a detailed task with appropriate deadline and reminders.`;\n\n    const result = await generateAITask(contextualPrompt);\n    setIsLoading(false);\n\n    if (!result.success) {\n      setError(result.error);\n      return;\n    }\n\n    const aiTask = result.data;\n    setPreviewTask({\n      ...aiTask,\n      id: `temp-${Date.now()}`,\n      status: aiTask.status || \"not-started\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      priority: 1,\n      _aiSuggested: true,\n      isNewTask: true,\n      action: \"create\",\n    });\n  };\n\n  const handleConfirmUpdate = async (task) => {\n    try {\n      if (!task) return;\n      setIsLoading(true);\n      setError(null);\n\n      const normalizedReminders = normalizeRemindersBeforeSave(\n        task.reminders || [],\n        task.deadline\n      );\n\n      let resultMessage = \"\";\n\n      if (task.action === \"delete\") {\n        await deleteTask(task.id);\n        resultMessage = `Successfully deleted \"${task.title}\"`;\n      } else if (task.action === \"create\") {\n        await createTask({\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          deadline: task.deadline,\n          reminders: normalizedReminders,\n        });\n        resultMessage = `Successfully created \"${task.title}\"`;\n      } else {\n        await updateTask(task.id, {\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          deadline: task.deadline,\n          reminders: normalizedReminders,\n        });\n        resultMessage = `Successfully updated \"${task.title}\"`;\n      }\n\n      await refreshTasks();\n\n      setChatMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"\",\n          timestamp: new Date().toISOString(),\n          preview: { ...task, confirmed: true },\n        },\n        {\n          role: \"assistant\",\n          content: resultMessage,\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n\n      setPreviewTask(null);\n    } catch (error) {\n      console.error(\"Error applying AI update:\", error);\n      setError(\"Failed to apply update.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCancelPreview = () => {\n    if (previewTask) {\n      setChatMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"\",\n          timestamp: new Date().toISOString(),\n          preview: { ...previewTask, cancelled: true },\n        },\n      ]);\n      setPreviewTask(null);\n    }\n  };\n\n  const resetChat = () => {\n    setChatMessages([]);\n    setError(null);\n    setPreviewTask(null);\n    try {\n      localStorage.removeItem(CHAT_HISTORY_KEY);\n    } catch (error) {\n      console.error(\"Error clearing chat history:\", error);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleChatSend();\n    }\n  };\n\n  return (\n    <div className=\"chat-mode\">\n      <div className=\"chat-messages\">\n        {chatMessages.length === 0 && !previewTask ? (\n          <div className=\"chat-empty-state\">\n            <i className=\"bi bi-chat-heart\"></i>\n            <p>Start a conversation with AI</p>\n            <small>Ask questions or describe your task step by step</small>\n          </div>\n        ) : (\n          <>\n            {chatMessages.map((msg, index) => {\n              // If message has preview, render it as badge\n              if (msg.preview) {\n                const task = msg.preview;\n                return (\n                  <div key={index} className=\"chat-message assistant\">\n                    <div className=\"message-avatar\">\n                      <i className=\"bi bi-robot\"></i>\n                    </div>\n                    <div className=\"message-content\">\n                      {task.action === \"delete\" ? (\n                        <DeleteActionBadge task={task} theme={theme} />\n                      ) : (\n                        <TaskPreviewBadge task={task} theme={theme} />\n                      )}\n                    </div>\n                  </div>\n                );\n              }\n\n              // Regular text message\n              if (msg.content) {\n                return (\n                  <ChatMessage\n                    key={index}\n                    msg={msg}\n                    user={user}\n                    theme={theme}\n                  />\n                );\n              }\n\n              return null;\n            })}\n\n            {/* Active preview task (with action buttons) */}\n            {previewTask && (\n              <div className=\"chat-message assistant\">\n                <div className=\"message-avatar\">\n                  <i className=\"bi bi-robot\"></i>\n                </div>\n                <div className=\"message-content w-100\">\n                  {previewTask.action === \"delete\" ? (\n                    <div className=\"active-delete-preview\">\n                      <div className=\"delete-preview-header\">\n                        <span className=\"delete-text\">\n                          Confirm deletion of{\" \"}\n                          <strong>\"{previewTask.title}\"</strong>?\n                        </span>\n                      </div>\n                      <div className=\"delete-preview-actions\">\n                        <button\n                          className=\"btn btn-danger btn-sm\"\n                          onClick={() => handleConfirmUpdate(previewTask)}\n                          disabled={isLoading}\n                          aria-label=\"Confirm delete task\"\n                        >\n                          {isLoading ? (\n                            <>\n                              <span className=\"spinner-border spinner-border-sm me-1\"></span>\n                              Deleting...\n                            </>\n                          ) : (\n                            <>\n                              <i className=\"bi bi-trash me-1\"></i>\n                              Delete\n                            </>\n                          )}\n                        </button>\n                        <button\n                          className=\"btn btn-secondary btn-sm\"\n                          onClick={handleCancelPreview}\n                          disabled={isLoading}\n                          aria-label=\"Cancel delete\"\n                        >\n                          <i className=\"bi bi-x-lg me-1\"></i>\n                          Cancel\n                        </button>\n                      </div>\n                    </div>\n                  ) : (\n                    <TaskItem\n                      theme={theme}\n                      task={{\n                        ...previewTask,\n                        title: previewTask.title || \"\",\n                        description: previewTask.description || \"\",\n                        reminders: Array.isArray(previewTask.reminders)\n                          ? previewTask.reminders\n                          : [],\n                      }}\n                      isNewTask={true}\n                      isChatPreview={true}\n                      onSave={handleConfirmUpdate}\n                      onCancel={handleCancelPreview}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </>\n        )}\n\n        {isLoading && (\n          <div className=\"chat-message assistant\">\n            <div className=\"message-avatar\">\n              <i className=\"bi bi-robot\"></i>\n            </div>\n            <div className=\"message-content\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={chatEndRef} />\n      </div>\n\n      <div className=\"chat-input-container\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          className=\"form-control\"\n          value={chatInput}\n          onChange={(e) => setChatInput(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n          aria-label=\"Type your message to AI assistant\"\n        />\n        <button\n          className=\"send-button\"\n          onClick={handleChatSend}\n          disabled={!chatInput.trim() || isLoading}\n          aria-label=\"Send message\"\n        >\n          <i className=\"bi bi-send-fill\"></i>\n        </button>\n      </div>\n\n      <div className=\"chat-actions\">\n        <button\n          className=\"btn btn-sm btn-outline-secondary\"\n          onClick={resetChat}\n          disabled={isLoading || chatMessages.length === 0}\n          aria-label=\"Clear chat history\"\n        >\n          <i className=\"bi bi-arrow-clockwise me-1\"></i> Clear Chat\n        </button>\n        <button\n          className=\"btn btn-sm btn-primary\"\n          onClick={handleGenerateFromChat}\n          disabled={\n            isLoading || chatMessages.filter((msg) => msg.content).length === 0\n          }\n          aria-label=\"Generate task from conversation\"\n        >\n          <i className=\"bi bi-magic me-1\"></i> Generate Task\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMode;","import TaskItem from \"../taskItem/TaskItem\";\n\nconst TaskPreviewModal = ({ theme, task, onClose, onSave }) => (\n  <div className=\"ai-preview-overlay\" onClick={onClose}>\n    <div className=\"ai-preview-modal\" onClick={(e) => e.stopPropagation()}>\n      <h5 className=\"mb-3\">\n        <i className=\"bi bi-eye\"></i> Task Preview\n      </h5>\n\n      <TaskItem\n        theme={theme}\n        task={task}\n        isNewTask={true}\n        onSave={onSave}\n        onCancel={onClose}\n      />\n\n      <div className=\"text-end mt-2\">\n        <button className=\"btn btn-secondary\" onClick={onClose}>\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default TaskPreviewModal;\n","import { useState, useEffect, useCallback, useRef } from \"react\";\nimport QuickMode from \"./QuickMode\";\nimport ChatMode from \"./ChatMode\";\nimport TaskPreviewModal from \"./TaskPreviewModal\";\nimport \"./Styles/AIChatModal.css\";\n\nconst AIChatModal = ({\n  show,\n  onClose,\n  onTaskGenerated,\n  theme,\n  refreshTasks,\n  isWidget = false,\n  showOptions = false,\n  setShowOptions = null,\n  chatMode = null,\n  onModeChange = null,\n  widgetSize = \"medium\",\n  onSizeChange = null,\n  optionsRef = null,\n}) => {\n  const [mode, setMode] = useState(\"quick\");\n  const [previewTask, setPreviewTask] = useState(null);\n  // ✅ FIXED: Removed unused previewHistory state\n  const [error, setError] = useState(null);\n  const [isClosing, setIsClosing] = useState(false);\n  const scrollPositionRef = useRef(0);\n\n  useEffect(() => {\n    try {\n      const savedMode = localStorage.getItem(\"ai_chat_mode\");\n      if (savedMode && (savedMode === \"quick\" || savedMode === \"chat\")) {\n        setMode(savedMode);\n      }\n    } catch (error) {\n      console.error(\"Error loading chat mode:\", error);\n    }\n  }, []);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"ai_chat_mode\", mode);\n    } catch (error) {\n      console.error(\"Error saving chat mode:\", error);\n    }\n  }, [mode]);\n\n  const handleClose = useCallback(() => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setIsClosing(false);\n      setError(null);\n      setPreviewTask(null);\n      onClose();\n    }, 250);\n  }, [onClose]);\n\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === \"Escape\" && show && !previewTask && !isWidget) {\n        handleClose();\n      }\n    };\n\n    if (show && !isWidget) {\n      scrollPositionRef.current = window.pageYOffset;\n      document.addEventListener(\"keydown\", handleEscape);\n      document.body.style.overflow = \"hidden\";\n      document.body.style.touchAction = \"none\";\n      document.body.style.position = \"fixed\";\n      document.body.style.width = \"100%\";\n      document.body.style.top = `-${scrollPositionRef.current}px`;\n    }\n\n    return () => {\n      if (!isWidget) {\n        document.removeEventListener(\"keydown\", handleEscape);\n        document.body.style.overflow = \"\";\n        document.body.style.touchAction = \"\";\n        document.body.style.position = \"\";\n        document.body.style.width = \"\";\n        document.body.style.top = \"\";\n        window.scrollTo(0, scrollPositionRef.current);\n      }\n    };\n  }, [show, previewTask, handleClose, isWidget]);\n\n  const handleOverlayClick = (e) => {\n    if (e.target === e.currentTarget && !previewTask && !isWidget) {\n      handleClose();\n    }\n  };\n\n  if (!show && !isClosing) return null;\n\n  if (isWidget) {\n    return (\n      <>\n        <div className=\"ai-mode-selector\">\n          <button\n            className={`mode-button ${mode === \"quick\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"quick\")}\n            aria-pressed={mode === \"quick\"}\n            aria-label=\"Switch to Quick Mode - Generate tasks quickly with a simple prompt\"\n          >\n            <i className=\"bi bi-lightning-charge\" aria-hidden=\"true\"></i> Quick\n          </button>\n\n          <button\n            className={`mode-button ${mode === \"chat\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"chat\")}\n            aria-pressed={mode === \"chat\"}\n            aria-label=\"Switch to Chat Mode - Have a conversation to refine your task\"\n          >\n            <i className=\"bi bi-chat-dots\" aria-hidden=\"true\"></i> Chat\n          </button>\n        </div>\n\n        {error && (\n          <div className=\"error-banner\">\n            <i className=\"bi bi-exclamation-triangle\"></i> {error}\n            <button\n              onClick={() => setError(null)}\n              style={{\n                marginLeft: \"auto\",\n                background: \"none\",\n                border: \"none\",\n                color: \"inherit\",\n                cursor: \"pointer\",\n                padding: \"0 4px\",\n              }}\n              aria-label=\"Dismiss error\"\n            >\n              <i className=\"bi bi-x-lg\"></i>\n            </button>\n          </div>\n        )}\n\n        {mode === \"quick\" ? (\n          <QuickMode\n            setError={setError}\n            setPreviewTask={setPreviewTask}\n            onTaskGenerated={onTaskGenerated}\n            onClose={handleClose}\n            theme={theme}\n          />\n        ) : (\n          <ChatMode\n            setError={setError}\n            theme={theme}\n            refreshTasks={refreshTasks}\n            onClose={handleClose}\n            key={mode}\n          />\n        )}\n\n        {previewTask && (\n          <TaskPreviewModal\n            theme={theme}\n            task={previewTask}\n            onClose={() => setPreviewTask(null)}\n            onSave={(task) => {\n              onTaskGenerated(task);\n              setPreviewTask(null);\n              handleClose();\n            }}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div\n      className={`ai-modal-overlay ${isClosing ? \"closing\" : \"\"}`}\n      onClick={handleOverlayClick}\n    >\n      <div\n        className={`ai-modal-content ${theme === \"dark\" ? \"dark-mode\" : \"\"} ${\n          isClosing ? \"closing\" : \"\"\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"ai-modal-header\">\n          <h3>\n            <i className=\"bi bi-robot\"></i> AI Task Assistant\n          </h3>\n          <div className=\"header-options-wrapper\">\n            {setShowOptions && (\n              <div className=\"floating-options\" ref={optionsRef}>\n                <button\n                  className=\"close-button\"\n                  onClick={() => setShowOptions(!showOptions)}\n                  aria-label=\"Options\"\n                  style={{ marginRight: \"8px\" }}\n                >\n                  <i className=\"bi bi-three-dots-vertical\"></i>\n                </button>\n\n                {showOptions && (\n                  <div\n                    className={`options-dropdown ${\n                      theme === \"dark\" ? \"dark\" : \"\"\n                    }`}\n                  >\n                    <div className=\"options-header\">Chat Mode</div>\n                    <button\n                      className={`option-item ${\n                        chatMode === \"widget\" ? \"active\" : \"\"\n                      }`}\n                      onClick={() => onModeChange(\"widget\")}\n                    >\n                      <i className=\"bi bi-window\"></i>\n                      <span>Floating Widget</span>\n                      {chatMode === \"widget\" && (\n                        <i className=\"bi bi-check2\"></i>\n                      )}\n                    </button>\n                    <button\n                      className={`option-item ${\n                        chatMode === \"drawer\" ? \"active\" : \"\"\n                      }`}\n                      onClick={() => onModeChange(\"drawer\")}\n                    >\n                      <i className=\"bi bi-layout-sidebar\"></i>\n                      <span>Sidebar Drawer</span>\n                      {chatMode === \"drawer\" && (\n                        <i className=\"bi bi-check2\"></i>\n                      )}\n                    </button>\n\n                    {onSizeChange && window.innerWidth > 768 && (\n                      <>\n                        <div className=\"options-divider\"></div>\n                        <div className=\"options-header\">Window Size</div>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"small\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => onSizeChange(\"small\")}\n                        >\n                          <i className=\"bi bi-phone\"></i>\n                          <span>Small</span>\n                          {widgetSize === \"small\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"medium\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => onSizeChange(\"medium\")}\n                        >\n                          <i className=\"bi bi-tablet\"></i>\n                          <span>Medium</span>\n                          {widgetSize === \"medium\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"large\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => onSizeChange(\"large\")}\n                        >\n                          <i className=\"bi bi-laptop\"></i>\n                          <span>Large</span>\n                          {widgetSize === \"large\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"fullscreen\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => onSizeChange(\"fullscreen\")}\n                        >\n                          <i className=\"bi bi-arrows-fullscreen\"></i>\n                          <span>Fullscreen</span>\n                          {widgetSize === \"fullscreen\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n            <button\n              className=\"close-button\"\n              onClick={handleClose}\n              aria-label=\"Close AI Assistant\"\n            >\n              <i className=\"bi bi-x-lg\"></i>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"ai-mode-selector\">\n          <button\n            className={`mode-button ${mode === \"quick\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"quick\")}\n            aria-pressed={mode === \"quick\"}\n          >\n            <i className=\"bi bi-lightning-charge\"></i> Quick\n          </button>\n          <button\n            className={`mode-button ${mode === \"chat\" ? \"active\" : \"\"}`}\n            onClick={() => setMode(\"chat\")}\n            aria-pressed={mode === \"chat\"}\n          >\n            <i className=\"bi bi-chat-dots\"></i> Chat\n          </button>\n        </div>\n\n        {error && (\n          <div className=\"error-banner\">\n            <i className=\"bi bi-exclamation-triangle\"></i> {error}\n            <button\n              onClick={() => setError(null)}\n              style={{\n                marginLeft: \"auto\",\n                background: \"none\",\n                border: \"none\",\n                color: \"inherit\",\n                cursor: \"pointer\",\n                padding: \"0 4px\",\n              }}\n              aria-label=\"Dismiss error\"\n            >\n              <i className=\"bi bi-x-lg\"></i>\n            </button>\n          </div>\n        )}\n\n        {mode === \"quick\" ? (\n          <QuickMode\n            setError={setError}\n            setPreviewTask={setPreviewTask}\n            onTaskGenerated={onTaskGenerated}\n            onClose={handleClose}\n            theme={theme}\n          />\n        ) : (\n          <ChatMode\n            setError={setError}\n            theme={theme}\n            refreshTasks={refreshTasks}\n            onClose={handleClose}\n            key={mode}\n          />\n        )}\n      </div>\n\n      {previewTask && (\n        <TaskPreviewModal\n          theme={theme}\n          task={previewTask}\n          onClose={() => setPreviewTask(null)}\n          onSave={(task) => {\n            onTaskGenerated(task);\n            setPreviewTask(null);\n            handleClose();\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AIChatModal;\n","import { useState, useEffect, useRef, useCallback } from \"react\";\nimport AIChatModal from \"./AIChatModal\";\nimport \"./Styles/FloatingChatWidget.css\";\n\nconst FloatingChatWidget = ({ theme, onTaskGenerated, refreshTasks }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showOptions, setShowOptions] = useState(false);\n  const [chatMode, setChatMode] = useState(() => {\n    const saved = localStorage.getItem(\"ai_chat_ui_mode\");\n    return saved || \"widget\";\n  });\n  const [widgetSize, setWidgetSize] = useState(() => {\n    const saved = localStorage.getItem(\"chat_widget_size\");\n    return saved || \"medium\";\n  });\n  const [buttonPosition, setButtonPosition] = useState(() => {\n    const saved = localStorage.getItem(\"chat_button_position\");\n    return saved\n      ? JSON.parse(saved)\n      : { x: window.innerWidth - 90, y: window.innerHeight - 90 };\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [hasMoved, setHasMoved] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const buttonRef = useRef(null);\n  const optionsRef = useRef(null);\n\n  // Save button position\n  useEffect(() => {\n    localStorage.setItem(\n      \"chat_button_position\",\n      JSON.stringify(buttonPosition)\n    );\n  }, [buttonPosition]);\n\n  // Save widget size\n  useEffect(() => {\n    localStorage.setItem(\"chat_widget_size\", widgetSize);\n  }, [widgetSize]);\n\n  // Close options when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (e) => {\n      if (optionsRef.current && !optionsRef.current.contains(e.target)) {\n        setShowOptions(false);\n      }\n    };\n\n    if (showOptions) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () =>\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n    }\n  }, [showOptions]);\n\n  const snapToCorner = useCallback((x, y) => {\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const buttonSize = 60;\n    const margin = 24;\n\n    const corners = [\n      { x: margin, y: margin },\n      { x: windowWidth - buttonSize - margin, y: margin },\n      { x: margin, y: windowHeight - buttonSize - margin },\n      {\n        x: windowWidth - buttonSize - margin,\n        y: windowHeight - buttonSize - margin,\n      },\n    ];\n\n    let nearest = corners[0];\n    let minDistance = Math.hypot(x - corners[0].x, y - corners[0].y);\n\n    corners.forEach((corner) => {\n      const distance = Math.hypot(x - corner.x, y - corner.y);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearest = corner;\n      }\n    });\n\n    return { x: nearest.x, y: nearest.y };\n  }, []);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    setIsDragging(true);\n    setHasMoved(false);\n    const rect = buttonRef.current.getBoundingClientRect();\n    setDragOffset({\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    });\n  };\n\n  // ✅ FIXED: Wrapped in useCallback to prevent unnecessary re-renders\n  const handleMouseMove = useCallback(\n    (e) => {\n      if (!isDragging) return;\n      const moveThreshold = 5;\n      const deltaX = Math.abs(e.clientX - dragOffset.x - buttonPosition.x);\n      const deltaY = Math.abs(e.clientY - dragOffset.y - buttonPosition.y);\n\n      if (deltaX > moveThreshold || deltaY > moveThreshold) {\n        setHasMoved(true);\n      }\n\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n      setButtonPosition({ x: newX, y: newY });\n    },\n    [isDragging, dragOffset, buttonPosition]\n  );\n\n  // ✅ FIXED: Wrapped in useCallback\n  const handleMouseUp = useCallback(\n    (e) => {\n      if (isDragging) {\n        if (hasMoved) {\n          const snapped = snapToCorner(buttonPosition.x, buttonPosition.y);\n          setButtonPosition(snapped);\n        }\n        setIsDragging(false);\n\n        // If didn't move significantly, open modal\n        if (!hasMoved) {\n          e.stopPropagation();\n          setIsOpen(true);\n        }\n\n        setTimeout(() => setHasMoved(false), 100);\n      }\n    },\n    [isDragging, hasMoved, buttonPosition, snapToCorner]\n  );\n\n  // ✅ FIXED: Added proper dependencies\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n      return () => {\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const handleTouchStart = (e) => {\n    const touch = e.touches[0];\n    setIsDragging(true);\n    setHasMoved(false);\n    const rect = buttonRef.current.getBoundingClientRect();\n    setDragOffset({\n      x: touch.clientX - rect.left,\n      y: touch.clientY - rect.top,\n    });\n  };\n\n  // ✅ FIXED: Wrapped in useCallback\n  const handleTouchMove = useCallback(\n    (e) => {\n      if (!isDragging) return;\n      e.preventDefault();\n      const touch = e.touches[0];\n      const moveThreshold = 5;\n      const deltaX = Math.abs(touch.clientX - dragOffset.x - buttonPosition.x);\n      const deltaY = Math.abs(touch.clientY - dragOffset.y - buttonPosition.y);\n\n      if (deltaX > moveThreshold || deltaY > moveThreshold) {\n        setHasMoved(true);\n      }\n\n      const newX = touch.clientX - dragOffset.x;\n      const newY = touch.clientY - dragOffset.y;\n      setButtonPosition({ x: newX, y: newY });\n    },\n    [isDragging, dragOffset, buttonPosition]\n  );\n\n  // ✅ FIXED: Wrapped in useCallback\n  const handleTouchEnd = useCallback(\n    (e) => {\n      if (isDragging) {\n        if (hasMoved) {\n          const snapped = snapToCorner(buttonPosition.x, buttonPosition.y);\n          setButtonPosition(snapped);\n        }\n        setIsDragging(false);\n\n        // If didn't move significantly, open modal\n        if (!hasMoved) {\n          e.preventDefault();\n          setIsOpen(true);\n        }\n\n        setTimeout(() => setHasMoved(false), 100);\n      }\n    },\n    [isDragging, hasMoved, buttonPosition, snapToCorner]\n  );\n\n  // ✅ FIXED: Added proper dependencies\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener(\"touchmove\", handleTouchMove, {\n        passive: false,\n      });\n      document.addEventListener(\"touchend\", handleTouchEnd);\n      return () => {\n        document.removeEventListener(\"touchmove\", handleTouchMove);\n        document.removeEventListener(\"touchend\", handleTouchEnd);\n      };\n    }\n  }, [isDragging, handleTouchMove, handleTouchEnd]);\n\n  const handleButtonClick = (e) => {\n    // This will only fire if mouse handlers don't prevent it\n    if (!isDragging && !hasMoved) {\n      setIsOpen(true);\n    }\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setShowOptions(false);\n  };\n\n  const toggleChatMode = (mode) => {\n    setChatMode(mode);\n    localStorage.setItem(\"ai_chat_ui_mode\", mode);\n    setShowOptions(false);\n  };\n\n  const handleSizeChange = (size) => {\n    setWidgetSize(size);\n    setShowOptions(false);\n  };\n\n  const getWidgetStyles = () => {\n    const sizes = {\n      small: { width: \"320px\", height: \"450px\" },\n      medium: { width: \"400px\", height: \"600px\" },\n      large: { width: \"500px\", height: \"700px\" },\n      fullscreen: {\n        width: \"calc(100vw - 48px)\",\n        height: \"calc(100vh - 48px)\",\n        maxWidth: \"1200px\",\n        maxHeight: \"900px\",\n      },\n    };\n    return sizes[widgetSize] || sizes.medium;\n  };\n\n  return (\n    <>\n      {/* Floating Button - Only visible when chat is closed */}\n      {!isOpen && (\n        <button\n          ref={buttonRef}\n          className={`floating-chat-button ${theme === \"dark\" ? \"dark\" : \"\"} ${\n            isDragging ? \"dragging\" : \"\"\n          }`}\n          style={{\n            left: `${buttonPosition.x}px`,\n            top: `${buttonPosition.y}px`,\n          }}\n          onClick={handleButtonClick}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          aria-label=\"Open AI Assistant chat - Drag to reposition\"\n        >\n          <i className=\"bi bi-cloud-fill\" aria-hidden=\"true\"></i>\n        </button>\n      )}\n\n      {/* Drawer Mode */}\n      {isOpen && chatMode === \"drawer\" && (\n        <AIChatModal\n          show={true}\n          onClose={handleClose}\n          onTaskGenerated={onTaskGenerated}\n          theme={theme}\n          refreshTasks={refreshTasks}\n          isWidget={false}\n          showOptions={showOptions}\n          setShowOptions={setShowOptions}\n          chatMode={chatMode}\n          onModeChange={toggleChatMode}\n          widgetSize={widgetSize}\n          onSizeChange={handleSizeChange}\n          optionsRef={optionsRef}\n        />\n      )}\n\n      {/* Widget Mode */}\n      {isOpen && chatMode === \"widget\" && (\n        <div\n          className={`floating-chat-modal ${theme === \"dark\" ? \"dark\" : \"\"} ${\n            widgetSize === \"fullscreen\" ? \"fullscreen\" : \"\"\n          }`}\n          style={getWidgetStyles()}\n        >\n          <div className=\"floating-modal-header\">\n            <div className=\"modal-header-title\">\n              <i className=\"bi bi-robot\"></i>\n              <span>AI Assistant</span>\n            </div>\n            <div className=\"modal-header-actions\">\n              <div className=\"floating-options\" ref={optionsRef}>\n                <button\n                  className=\"header-icon-button\"\n                  onClick={() => setShowOptions(!showOptions)}\n                  aria-label=\"Options\"\n                >\n                  <i className=\"bi bi-three-dots-vertical\"></i>\n                </button>\n\n                {showOptions && (\n                  <div\n                    className={`options-dropdown ${\n                      theme === \"dark\" ? \"dark\" : \"\"\n                    }`}\n                  >\n                    <div className=\"options-header\">Chat Mode</div>\n                    <button\n                      className={`option-item ${\n                        chatMode === \"widget\" ? \"active\" : \"\"\n                      }`}\n                      onClick={() => toggleChatMode(\"widget\")}\n                    >\n                      <i className=\"bi bi-window\"></i>\n                      <span>Floating Widget</span>\n                      {chatMode === \"widget\" && (\n                        <i className=\"bi bi-check2\"></i>\n                      )}\n                    </button>\n                    <button\n                      className={`option-item ${\n                        chatMode === \"drawer\" ? \"active\" : \"\"\n                      }`}\n                      onClick={() => toggleChatMode(\"drawer\")}\n                    >\n                      <i className=\"bi bi-layout-sidebar\"></i>\n                      <span>Sidebar Drawer</span>\n                      {chatMode === \"drawer\" && (\n                        <i className=\"bi bi-check2\"></i>\n                      )}\n                    </button>\n\n                    {window.innerWidth > 768 && (\n                      <>\n                        <div className=\"options-divider\"></div>\n\n                        <div className=\"options-header\">Window Size</div>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"small\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => handleSizeChange(\"small\")}\n                        >\n                          <i className=\"bi bi-phone\"></i>\n                          <span>Small</span>\n                          {widgetSize === \"small\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"medium\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => handleSizeChange(\"medium\")}\n                        >\n                          <i className=\"bi bi-tablet\"></i>\n                          <span>Medium</span>\n                          {widgetSize === \"medium\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"large\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => handleSizeChange(\"large\")}\n                        >\n                          <i className=\"bi bi-laptop\"></i>\n                          <span>Large</span>\n                          {widgetSize === \"large\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                        <button\n                          className={`option-item ${\n                            widgetSize === \"fullscreen\" ? \"active\" : \"\"\n                          }`}\n                          onClick={() => handleSizeChange(\"fullscreen\")}\n                        >\n                          <i className=\"bi bi-arrows-fullscreen\"></i>\n                          <span>Fullscreen</span>\n                          {widgetSize === \"fullscreen\" && (\n                            <i className=\"bi bi-check2\"></i>\n                          )}\n                        </button>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              <button\n                className=\"header-icon-button\"\n                onClick={handleClose}\n                aria-label=\"Close\"\n              >\n                <i className=\"bi bi-x-lg\"></i>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"floating-modal-body\">\n            <AIChatModal\n              show={true}\n              onClose={handleClose}\n              onTaskGenerated={onTaskGenerated}\n              theme={theme}\n              refreshTasks={refreshTasks}\n              isWidget={true}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Drag Overlay */}\n      {isDragging && <div className=\"drag-overlay\" />}\n    </>\n  );\n};\n\nexport default FloatingChatWidget;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchTasks, updateTaskPriority } from \"../../services/api\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport TaskCard from \"./taskItem/TaskCard\";\nimport AIChatModal from \"./AIChatModal/AIChatModal\";\nimport FloatingChatWidget from \"./AIChatModal/FloatingChatWidget\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./TaskList.css\";\n\nimport {\n  DndContext,\n  closestCenter,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n  MouseSensor,\n  TouchSensor,\n} from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  arrayMove,\n  useSortable,\n  rectSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\n\nconst SortableTask = ({ task, theme }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({\n    id: task.id,\n    transition: {\n      duration: 250,\n      easing: \"cubic-bezier(0.25, 0.8, 0.25, 1)\",\n    },\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition:\n      transition || \"transform 250ms cubic-bezier(0.25, 0.8, 0.25, 1)\",\n    opacity: isDragging ? 0 : 1,\n    cursor: \"grab\",\n    touchAction: \"manipulation\",\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <TaskCard theme={theme} task={task} />\n    </div>\n  );\n};\n\nconst TaskList = ({ theme }) => {\n  const navigate = useNavigate();\n  const { user, logout } = useAuth();\n  const [tasks, setTasks] = useState(null);\n  const [showAIModal, setShowAIModal] = useState(false);\n  const [activeId, setActiveId] = useState(null);\n  const [chatMode, setChatMode] = useState(() => {\n    const saved = localStorage.getItem(\"ai_chat_ui_mode\");\n    return saved || \"drawer\";\n  });\n\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        delay: 200,\n        tolerance: 5,\n      },\n    }),\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    })\n  );\n\n  // Listen for chat mode changes\n  useEffect(() => {\n    const handleChatModeChange = (e) => {\n      setChatMode(e.detail);\n      setShowAIModal(false); // Close drawer if switching to widget\n    };\n    const handleStorageChange = () => {\n      const saved = localStorage.getItem(\"ai_chat_ui_mode\");\n      if (saved && saved !== chatMode) {\n        setChatMode(saved);\n        setShowAIModal(false);\n      }\n    };\n    window.addEventListener(\"chatModeChanged\", handleChatModeChange);\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => {\n      window.removeEventListener(\"chatModeChanged\", handleChatModeChange);\n      window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, [chatMode]);\n\n  const loadTasks = useCallback(async () => {\n    if (user) {\n      try {\n        const response = await fetchTasks();\n        setTasks(response.data.tasks || response.data);\n      } catch (error) {\n        console.error(\"Error loading tasks:\", error);\n        if (error.response && error.response.status === 403) logout();\n      }\n    }\n  }, [user, logout]);\n\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n\n  const refreshTasks = async () => {\n    try {\n      const response = await fetchTasks();\n      const tasksData = response.data.tasks || response.data;\n      setTasks(tasksData);\n      return tasksData;\n    } catch (error) {\n      console.error(\"Error refreshing tasks:\", error);\n    }\n  };\n\n  const handleDragStart = (event) => {\n    setActiveId(event.active.id);\n  };\n\n  const handleDragEnd = async (event) => {\n    const { active, over } = event;\n    setActiveId(null);\n\n    if (!over || active.id === over.id) return;\n\n    setTasks((prevTasks) => {\n      const oldIndex = prevTasks.findIndex((t) => t.id === active.id);\n      const newIndex = prevTasks.findIndex((t) => t.id === over.id);\n\n      if (oldIndex === -1 || newIndex === -1) return prevTasks;\n\n      const reordered = arrayMove(prevTasks, oldIndex, newIndex);\n\n      const updatePromises = reordered.map((task, idx) => {\n        const newPriority = idx + 1;\n        if (task.priority !== newPriority) {\n          return updateTaskPriority(task.id, newPriority).catch((err) => {\n            console.error(`Error updating priority for task ${task.id}:`, err);\n          });\n        }\n        return Promise.resolve();\n      });\n\n      Promise.all(updatePromises);\n\n      return reordered.map((task, idx) => ({\n        ...task,\n        priority: idx + 1,\n      }));\n    });\n  };\n\n  const handleDragCancel = () => {\n    setActiveId(null);\n  };\n\n  const handleAddTask = () => {\n    navigate(\"/tasks/new/edit\");\n  };\n\n  const handleAITaskGenerated = (aiGeneratedTask) => {\n    navigate(\"/tasks/new/edit\", { state: { task: aiGeneratedTask } });\n  };\n\n  const renderShimmerLoader = () => (\n    <div className=\"container mt-5\">\n      <div className=\"task-container\">\n        <div className=\"card-body p-3\">\n          <div className=\"d-flex flex-row justify-content-between align-items-center mb-3 header-container\">\n            <h2 className=\"card-title mb-0\">Your Tasks</h2>\n            <div className=\"d-flex gap-2 button-group\">\n              <button\n                className={`btn btn-outline-${\n                  theme === \"dark\" ? \"light\" : \"dark\"\n                } d-flex align-items-center gap-2`}\n                onClick={handleAddTask}\n                aria-label=\"Create new task\"\n              >\n                <i className=\"bi bi-plus-circle\" aria-hidden=\"true\"></i>\n                <span className=\"button-text\">New Task</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"shimmer-list\">\n            {Array.from({ length: 5 }).map((_, index) => (\n              <div key={index} className=\"shimmer-task-item\">\n                <div className=\"shimmer-task-header\"></div>\n                <div className=\"shimmer-task-body\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (!tasks) return renderShimmerLoader();\n\n  const sortedTasks = [...tasks].sort((a, b) => a.priority - b.priority);\n  const activeTask = activeId ? tasks.find((t) => t.id === activeId) : null;\n\n  return (\n    <>\n      <div className=\"container mt-5\">\n        <div className=\"task-container\">\n          <div className=\"card-body p-3\">\n            <div className=\"d-flex flex-row justify-content-between align-items-center mb-3 header-container\">\n              <h2 className=\"card-title mb-0\">Your Tasks</h2>\n              <div className=\"d-flex gap-2 button-group\">\n                <button\n                  className={`btn btn-outline-${\n                    theme === \"dark\" ? \"light\" : \"dark\"\n                  } d-flex align-items-center gap-2`}\n                  onClick={handleAddTask}\n                >\n                  <i className=\"bi bi-plus-circle\"></i>\n                  <span className=\"button-text\">New Task</span>\n                </button>\n              </div>\n            </div>\n\n            {tasks.length === 0 ? (\n              <div className=\"empty-state\">\n                <i className=\"bi bi-clipboard-check empty-state-icon\"></i>\n                <p\n                  className={`text-${\n                    theme === \"dark\" ? \"light\" : \"muted\"\n                  } mb-2`}\n                >\n                  No tasks yet\n                </p>\n                <small className=\"text-muted\">\n                  Create your first task or use AI Assistant to get started\n                </small>\n              </div>\n            ) : (\n              <DndContext\n                sensors={sensors}\n                collisionDetection={closestCenter}\n                onDragStart={handleDragStart}\n                onDragEnd={handleDragEnd}\n                onDragCancel={handleDragCancel}\n              >\n                <SortableContext\n                  items={sortedTasks.map((t) => t.id)}\n                  strategy={rectSortingStrategy}\n                >\n                  <div className=\"task-list\">\n                    {sortedTasks.map((task) => (\n                      <SortableTask key={task.id} task={task} theme={theme} />\n                    ))}\n                  </div>\n                </SortableContext>\n\n                <DragOverlay\n                  adjustScale={false}\n                  dropAnimation={{\n                    duration: 300,\n                    easing: \"cubic-bezier(0.25, 0.8, 0.25, 1)\",\n                  }}\n                  style={{\n                    cursor: \"grabbing\",\n                  }}\n                >\n                  {activeTask ? (\n                    <div\n                      style={{\n                        transform: \"scale(1.03) rotate(2deg)\",\n                        cursor: \"grabbing\",\n                        boxShadow:\n                          \"0 12px 24px rgba(0, 0, 0, 0.25), 0 4px 8px rgba(0, 0, 0, 0.15)\",\n                        borderRadius: \"10px\",\n                        transition:\n                          \"all 150ms cubic-bezier(0.25, 0.8, 0.25, 1)\",\n                      }}\n                    >\n                      <TaskCard theme={theme} task={activeTask} />\n                    </div>\n                  ) : null}\n                </DragOverlay>\n              </DndContext>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Drawer Mode */}\n      {chatMode === \"drawer\" && (\n        <AIChatModal\n          show={showAIModal}\n          onClose={() => setShowAIModal(false)}\n          onTaskGenerated={handleAITaskGenerated}\n          theme={theme}\n          refreshTasks={refreshTasks}\n        />\n      )}\n\n      {/* Widget/Drawer with Cloud Button */}\n      <FloatingChatWidget\n        theme={theme}\n        onTaskGenerated={handleAITaskGenerated}\n        refreshTasks={refreshTasks}\n      />\n    </>\n  );\n};\n\nexport default TaskList;\n"],"names":["getStatusColor","status","STATUS_COLORS","TASK_STATUS","NOT_STARTED","_ref","theme","task","demoMode","navigate","useNavigate","stripColor","reminderSummary","getReminderSummary","reminders","_jsxs","className","concat","onClick","handleClick","id","children","_jsx","style","backgroundColor","color","title","description","formatRelativeTime","createdAt","deadline","setError","onClose","quickPrompt","setQuickPrompt","useState","isLoading","setIsLoading","inputRef","useRef","useEffect","current","focus","handleQuickGenerate","async","trim","result","generateAITask","success","error","aiTask","data","newTask","state","ref","rows","value","onChange","e","target","onKeyDown","key","shiftKey","preventDefault","placeholder","disabled","map","text","_Fragment","_user$firstName","_user$firstName$","_user$lastName","_user$lastName$","msg","user","userAvatar","avatar","displayInitials","firstName","toUpperCase","lastName","role","src","alt","width","height","borderRadius","objectFit","fontWeight","display","alignItems","justifyContent","fontSize","content","split","part","index","test","match","marginLeft","marginTop","processedPart","segment","i","startsWith","endsWith","slice","formatMessageContent","timestamp","date","Date","now","diffInHours","getDate","toLocaleTimeString","hour","minute","toLocaleDateString","month","day","formatTime","setTasks","isNewTask","isChatPreview","onSave","onCancel","isEditing","setIsEditing","tempTitle","setTempTitle","tempDescription","setTempDescription","tempStatus","setTempStatus","tempDeadline","setTempDeadline","tempReminders","setTempReminders","Array","isArray","showDeleteModal","setShowDeleteModal","cardRef","length","handleCancel","useCallback","handleClickOutside","contains","document","addEventListener","removeEventListener","getStripColor","isDeadlineInFuture","dailyCount","filter","r","type","weeklyCount","oneTimeCount","parts","push","join","formatDateTimeLocal","TaskReminders","ALL_INTERVALS","REMINDER_INTERVALS","stopPropagation","JSON","stringify","deadlineDate","finalReminders","hasDaily","some","hasWeekly","filteredReminders","remindBefore","maxDays","Math","floor","sent","dayNumber","maxWeeks","week","weekNumber","regenerateRecurringReminders","updatedTaskData","toISOString","_objectSpread","response","updateTask","prev","t","console","handleSave","ConfirmationModal","show","message","onConfirm","deleteTask","CHAT_HISTORY_KEY","STORAGE_KEYS","AI_CHAT_HISTORY","TaskPreviewBadge","isExpanded","setIsExpanded","onMouseEnter","onMouseLeave","confirmed","action","cancelled","TaskItem","isHistoryPreview","DeleteActionBadge","_ref2","_ref3","refreshTasks","useAuth","chatMessages","setChatMessages","saved","localStorage","getItem","parse","chatInput","setChatInput","previewTask","setPreviewTask","chatEndRef","scrollIntoView","behavior","setItem","handleChatSend","userMessage","preview","setTimeout","conversationHistory","sendAIChatMessage","reply","previewUpdate","normalizeRemindersBeforeSave","_aiSuggested","isUpdate","updatedAt","handleConfirmUpdate","normalizedReminders","resultMessage","createTask","handleCancelPreview","ChatMessage","resetChat","removeItem","conversationSummary","contextualPrompt","priority","onTaskGenerated","isWidget","showOptions","setShowOptions","chatMode","onModeChange","widgetSize","onSizeChange","optionsRef","mode","setMode","isClosing","setIsClosing","scrollPositionRef","savedMode","handleClose","handleEscape","window","pageYOffset","body","overflow","touchAction","position","top","scrollTo","background","border","cursor","padding","QuickMode","ChatMode","TaskPreviewModal","currentTarget","marginRight","innerWidth","isOpen","setIsOpen","setChatMode","setWidgetSize","buttonPosition","setButtonPosition","x","y","innerHeight","isDragging","setIsDragging","hasMoved","setHasMoved","dragOffset","setDragOffset","buttonRef","snapToCorner","windowWidth","windowHeight","margin","corners","nearest","minDistance","hypot","forEach","corner","distance","handleMouseMove","deltaX","abs","clientX","deltaY","clientY","newX","newY","handleMouseUp","snapped","handleTouchMove","touch","touches","handleTouchEnd","passive","toggleChatMode","handleSizeChange","size","left","onMouseDown","rect","getBoundingClientRect","onTouchStart","AIChatModal","getWidgetStyles","sizes","small","medium","large","fullscreen","maxWidth","maxHeight","SortableTask","attributes","listeners","setNodeRef","transform","transition","useSortable","duration","easing","CSS","Transform","toString","opacity","TaskCard","logout","tasks","showAIModal","setShowAIModal","activeId","setActiveId","sensors","useSensors","useSensor","MouseSensor","activationConstraint","TouchSensor","delay","tolerance","PointerSensor","handleChatModeChange","detail","handleStorageChange","loadTasks","fetchTasks","tasksData","handleAddTask","handleAITaskGenerated","aiGeneratedTask","from","_","sortedTasks","sort","a","b","activeTask","find","DndContext","collisionDetection","closestCenter","onDragStart","event","active","onDragEnd","over","prevTasks","oldIndex","findIndex","newIndex","reordered","arrayMove","updatePromises","idx","newPriority","updateTaskPriority","catch","err","Promise","resolve","all","onDragCancel","handleDragCancel","SortableContext","items","strategy","rectSortingStrategy","DragOverlay","adjustScale","dropAnimation","boxShadow","FloatingChatWidget"],"sourceRoot":""}