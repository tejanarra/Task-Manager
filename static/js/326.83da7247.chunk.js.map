{"version":3,"file":"static/js/326.83da7247.chunk.js","mappings":"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","sources":["components/common/FormInput.js","components/common/AlertBanner.js","components/common/LoadingButton.js","components/tasks/TaskEditor.js"],"sourcesContent":["import \"./FormInput.css\";\n\n/**\n * Reusable form input component\n * @param {string} type - Input type (text, email, password, etc.)\n * @param {string} id - Input ID\n * @param {string} name - Input name\n * @param {string} value - Input value\n * @param {function} onChange - Change handler\n * @param {string} placeholder - Placeholder text\n * @param {boolean} required - Whether field is required\n * @param {string} className - Additional CSS classes\n * @param {string} label - Label text (optional)\n * @param {string} error - Error message (optional)\n * @param {boolean} disabled - Whether input is disabled\n * @param {Object} rest - Other HTML input attributes\n */\nconst FormInput = ({\n  type = \"text\",\n  id,\n  name,\n  value,\n  onChange,\n  placeholder,\n  required = false,\n  className = \"\",\n  label,\n  error,\n  disabled = false,\n  ...rest\n}) => {\n  return (\n    <div className=\"form-input-wrapper mb-3\">\n      {label && (\n        <label htmlFor={id} className=\"form-label\">\n          {label}\n          {required && <span className=\"text-danger ms-1\">*</span>}\n        </label>\n      )}\n      <input\n        type={type}\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={required}\n        disabled={disabled}\n        className={`form-control py-2 ${error ? \"is-invalid\" : \"\"} ${className}`}\n        {...rest}\n      />\n      {error && <div className=\"invalid-feedback d-block\">{error}</div>}\n    </div>\n  );\n};\n\nexport default FormInput;\n","import \"./AlertBanner.css\";\n\n/**\n * Reusable alert banner component\n * @param {string} type - Alert type (success, error, warning, info)\n * @param {string} message - Message to display\n * @param {function} onClose - Close handler (optional)\n * @param {string} className - Additional CSS classes\n */\nconst AlertBanner = ({ type = \"info\", message, onClose, className = \"\" }) => {\n  if (!message) return null;\n\n  const alertClass = {\n    success: \"alert-success\",\n    error: \"alert-danger\",\n    warning: \"alert-warning\",\n    info: \"alert-info\",\n  }[type] || \"alert-info\";\n\n  return (\n    <div className={`alert ${alertClass} ${className} d-flex align-items-center justify-content-between`} role=\"alert\">\n      <span>{message}</span>\n      {onClose && (\n        <button\n          type=\"button\"\n          className=\"btn-close\"\n          onClick={onClose}\n          aria-label=\"Close\"\n        ></button>\n      )}\n    </div>\n  );\n};\n\nexport default AlertBanner;\n","import \"./LoadingButton.css\";\n\n/**\n * Reusable button with loading state\n * @param {boolean} isLoading - Whether button is in loading state\n * @param {string} children - Button text content\n * @param {string} loadingText - Text to show when loading (optional)\n * @param {string} type - Button type (button, submit, reset)\n * @param {string} className - Additional CSS classes\n * @param {boolean} disabled - Whether button is disabled\n * @param {function} onClick - Click handler\n * @param {string} variant - Button variant (primary, secondary, danger, etc.)\n * @param {Object} rest - Other button attributes\n */\nconst LoadingButton = ({\n  isLoading = false,\n  children,\n  loadingText = \"Loading...\",\n  type = \"button\",\n  className = \"\",\n  disabled = false,\n  onClick,\n  variant = \"primary\",\n  ...rest\n}) => {\n  const buttonClass = variant === \"primary\"\n    ? \"sign-in-btn\"\n    : `btn-${variant}`;\n\n  return (\n    <button\n      type={type}\n      className={`btn ${buttonClass} ${className}`}\n      disabled={disabled || isLoading}\n      onClick={onClick}\n      {...rest}\n    >\n      {isLoading ? (\n        <>\n          <span\n            className=\"spinner-border spinner-border-sm me-2\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          ></span>\n          {loadingText}\n        </>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\nexport default LoadingButton;\n","import  { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  createTask,\n  updateTask,\n  deleteTask,\n  fetchTaskById,\n} from \"../../services/api\";\nimport TaskReminders from \"./taskItem/TaskReminders\";\nimport ConfirmationModal from \"../layout/ConfirmationModal\";\nimport { formatDateTimeLocal } from \"../../utils/dateUtils\";\nimport { formatHoursLabel, normalizeRemindersBeforeSave } from \"../../utils/reminderUtils\";\nimport { getStatusColor } from \"../../utils/statusUtils\";\nimport \"./TaskEditor.css\";\nimport { REMINDER_INTERVALS, TASK_STATUS } from \"../../constants/appConstants\";\nimport { AlertBanner, LoadingButton } from \"../common\";\n\nconst TaskEditor = ({ theme }) => {\n  const navigate = useNavigate();\n  const { taskId } = useParams();\n  const isNewTask = taskId === \"new\";\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [status, setStatus] = useState(\"not-started\");\n  const [deadline, setDeadline] = useState(null);\n  const [reminders, setReminders] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load task data if editing\n  useEffect(() => {\n    const loadTask = async () => {\n      if (!isNewTask) {\n        try {\n          setIsLoading(true);\n          const response = await fetchTaskById(taskId);\n          const task = response.data;\n\n          if (task) {\n            setTitle(task.title);\n            setDescription(task.description);\n            setStatus(task.status);\n            setDeadline(task.deadline || null);\n            setReminders(Array.isArray(task.reminders) ? task.reminders : []);\n          } else {\n            setError(\"Task not found\");\n            setTimeout(() => navigate(\"/tasks\"), 2000);\n          }\n        } catch (err) {\n          console.error(\"Error loading task:\", err);\n          setError(\"Failed to load task\");\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadTask();\n  }, [taskId, isNewTask, navigate]);\n\n  // Load task from navigation state (for AI-generated tasks)\n  useEffect(() => {\n    const state = window.history.state?.usr;\n    if (state?.task) {\n      const task = state.task;\n      setTitle(task.title || \"\");\n      setDescription(task.description || \"\");\n      setStatus(task.status || \"not-started\");\n      setDeadline(task.deadline || null);\n      setReminders(Array.isArray(task.reminders) ? task.reminders : []);\n    }\n  }, []);\n\n  const handleSave = async () => {\n    if (!title.trim() || !description.trim()) {\n      setError(\"Title and description are required\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    const now = new Date();\n    const deadlineDate = deadline ? new Date(deadline) : null;\n    const diffInHours =\n      deadlineDate && deadlineDate > now\n        ? (deadlineDate - now) / (1000 * 60 * 60)\n        : 0;\n\n    const regenerateRecurringReminders = (reminders) => {\n      const hasDaily = reminders.some((r) => r.type === \"daily\");\n      const hasWeekly = reminders.some((r) => r.type === \"weekly\");\n\n      let filteredReminders = reminders.filter(\n        (r) =>\n          (r.type === \"one-time\" || !r.type) && r.remindBefore <= diffInHours\n      );\n\n      if (hasDaily && diffInHours > 0) {\n        const maxDays = Math.floor(diffInHours / 24);\n        for (let day = 1; day <= maxDays; day++) {\n          filteredReminders.push({\n            remindBefore: day * 24,\n            sent: false,\n            type: \"daily\",\n            dayNumber: day,\n          });\n        }\n      }\n\n      if (hasWeekly && diffInHours > 0) {\n        const maxWeeks = Math.floor(diffInHours / (24 * 7));\n        for (let week = 1; week <= maxWeeks; week++) {\n          filteredReminders.push({\n            remindBefore: week * 24 * 7,\n            sent: false,\n            type: \"weekly\",\n            weekNumber: week,\n          });\n        }\n      }\n\n      return filteredReminders;\n    };\n\n    const finalReminders =\n      diffInHours > 0 ? regenerateRecurringReminders(reminders) : [];\n\n    const taskData = {\n      title: title.trim(),\n      description: description.trim(),\n      status,\n      deadline: deadline ? deadlineDate.toISOString() : null,\n      reminders: finalReminders,\n    };\n\n    try {\n      if (isNewTask) {\n        await createTask({ ...taskData, priority: 1 });\n      } else {\n        await updateTask(taskId, taskData);\n      }\n      navigate(\"/tasks\");\n    } catch (error) {\n      console.error(\"Error saving task:\", error);\n      setError(\"Failed to save task. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    setIsLoading(true);\n    try {\n      await deleteTask(taskId);\n      navigate(\"/tasks\");\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      setError(\"Failed to delete task\");\n      setIsLoading(false);\n      setShowDeleteModal(false);\n    }\n  };\n\n  const handleCancel = () => {\n    navigate(\"/tasks\");\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case \"completed\":\n        return \"#007a00\";\n      case \"in-progress\":\n        return \"#daa520\";\n      default:\n        return \"#a00000\";\n    }\n  };\n\n  const isDeadlineInFuture = deadline && new Date(deadline) > new Date();\n\n  if (isLoading && !isNewTask) {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"task-editor-container\" style={{ position: 'relative' }}>\n          <div className=\"editor-spine\"></div>\n          <div className=\"loading-state\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <p>Loading task...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"container mt-5\">\n        <div\n          className={`task-editor-container ${theme === \"dark\" ? \"dark\" : \"\"}`}\n          style={{ position: 'relative' }}\n        >\n          <div className=\"editor-spine\" style={{ backgroundColor: getStatusColor() }}></div>\n          \n          <div className=\"editor-header\">\n            <button\n              className=\"back-button\"\n              onClick={handleCancel}\n              disabled={isLoading}\n              aria-label=\"Go back to tasks\"\n            >\n              <i className=\"bi bi-arrow-left\"></i>\n            </button>\n            <h2>{isNewTask ? \"Create New Task\" : \"Edit Task\"}</h2>\n            <i\n              className={`bi ${\n                status === \"completed\"\n                  ? \"bi-check-circle-fill\"\n                  : status === \"in-progress\"\n                  ? \"bi-hourglass-split\"\n                  : \"bi-circle\"\n              } status-icon-header`}\n              style={{ color: getStatusColor() }}\n            />\n          </div>\n\n          {error && (\n            <div className=\"alert alert-danger\" role=\"alert\">\n              <i className=\"bi bi-exclamation-triangle me-2\"></i>\n              {error}\n            </div>\n          )}\n\n          <div className=\"editor-form\">\n            <div className=\"form-group\">\n              <label className=\"form-label\">\n                <i className=\"bi bi-pencil-square me-1\"></i>\n                Title <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                placeholder=\"Enter task title...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">\n                <i className=\"bi bi-text-paragraph me-1\"></i>\n                Description <span className=\"required\">*</span>\n              </label>\n              <textarea\n                className=\"form-control\"\n                rows={5}\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                placeholder=\"Enter task description...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label className=\"form-label\">\n                  <i className=\"bi bi-flag me-1\"></i>\n                  Status\n                </label>\n                <select\n                  className=\"form-select\"\n                  value={status}\n                  onChange={(e) => setStatus(e.target.value)}\n                  disabled={isLoading}\n                  style={{ color: getStatusColor() }}\n                >\n                  <option value=\"not-started\">Not Started</option>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">\n                  <i className=\"bi bi-calendar-event me-1\"></i>\n                  Deadline\n                </label>\n                <input\n                  type=\"datetime-local\"\n                  className=\"form-control\"\n                  value={deadline ? formatDateTimeLocal(deadline) : \"\"}\n                  onChange={(e) => setDeadline(e.target.value)}\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            {isDeadlineInFuture && (\n              <div className=\"form-group reminders-section\">\n                <label className=\"form-label\">\n                  <i className=\"bi bi-clock-history me-1\"></i>\n                  Reminders\n                </label>\n                <TaskReminders\n                  tempDeadline={deadline}\n                  tempReminders={reminders}\n                  setTempReminders={setReminders}\n                  theme={theme}\n                  ALL_INTERVALS={REMINDER_INTERVALS}\n                />\n              </div>\n            )}\n          </div>\n\n          <div className=\"editor-actions\">\n            {!isNewTask && (\n              <button\n                className=\"btn btn-danger\"\n                onClick={() => setShowDeleteModal(true)}\n                disabled={isLoading}\n              >\n                <i className=\"bi bi-trash me-2\"></i>\n                Delete Task\n              </button>\n            )}\n            <div className=\"action-group\">\n              <button\n                className=\"btn btn-secondary\"\n                onClick={handleCancel}\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"btn btn-primary\"\n                onClick={handleSave}\n                disabled={!title.trim() || !description.trim() || isLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <span className=\"spinner-border spinner-border-sm me-2\"></span>\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"bi bi-check-lg me-2\"></i>\n                    {isNewTask ? \"Create Task\" : \"Save Changes\"}\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ConfirmationModal\n        theme={theme}\n        show={showDeleteModal}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        onConfirm={handleDelete}\n        onCancel={() => setShowDeleteModal(false)}\n      />\n    </>\n  );\n};\n\nexport default TaskEditor;"],"names":["_ref","type","id","name","value","onChange","placeholder","required","className","label","error","disabled","rest","_objectWithoutProperties","_excluded","_jsxs","children","htmlFor","_jsx","_objectSpread","concat","message","onClose","alertClass","success","warning","info","role","onClick","isLoading","loadingText","variant","buttonClass","_Fragment","theme","navigate","useNavigate","taskId","useParams","isNewTask","title","setTitle","useState","description","setDescription","status","setStatus","deadline","setDeadline","reminders","setReminders","setIsLoading","showDeleteModal","setShowDeleteModal","setError","useEffect","async","task","fetchTaskById","data","Array","isArray","setTimeout","err","console","loadTask","_window$history$state","state","window","history","usr","handleCancel","getStatusColor","isDeadlineInFuture","Date","style","position","backgroundColor","color","e","target","rows","formatDateTimeLocal","TaskReminders","tempDeadline","tempReminders","setTempReminders","ALL_INTERVALS","REMINDER_INTERVALS","trim","now","deadlineDate","diffInHours","finalReminders","hasDaily","some","r","hasWeekly","filteredReminders","filter","remindBefore","maxDays","Math","floor","day","push","sent","dayNumber","maxWeeks","week","weekNumber","regenerateRecurringReminders","taskData","toISOString","createTask","priority","updateTask","ConfirmationModal","show","onConfirm","deleteTask","onCancel"],"sourceRoot":""}