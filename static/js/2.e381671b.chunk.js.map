{"version":3,"file":"static/js/2.e381671b.chunk.js","mappings":"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","sources":["utils/statusUtils.js","components/tasks/taskItem/TaskCard.js","utils/dateUtils.js","constants/appConstants.js","components/landingPage/data.js","components/landingPage/FeaturesSection.js","components/landingPage/BenefitsSection.js","components/landingPage/TestimonialsSection.js","components/landingPage/DemoSection.js","components/landingPage/LandingPage.js","utils/reminderUtils.js"],"sourcesContent":["import { TASK_STATUS, STATUS_COLORS, TASK_STATUS_LABELS } from \"../constants/appConstants\";\n\n/**\n * Gets the color for a task status\n * @param {string} status - The task status\n * @returns {string} - The hex color code\n */\nexport const getStatusColor = (status) => {\n  return STATUS_COLORS[status] || STATUS_COLORS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Gets the label for a task status\n * @param {string} status - The task status\n * @returns {string} - The human-readable label\n */\nexport const getStatusLabel = (status) => {\n  return TASK_STATUS_LABELS[status] || TASK_STATUS_LABELS[TASK_STATUS.NOT_STARTED];\n};\n\n/**\n * Checks if a status is valid\n * @param {string} status - The status to check\n * @returns {boolean} - True if valid\n */\nexport const isValidStatus = (status) => {\n  return Object.values(TASK_STATUS).includes(status);\n};\n\n/**\n * Gets all available statuses\n * @returns {Array} - Array of status objects with value and label\n */\nexport const getAllStatuses = () => {\n  return Object.values(TASK_STATUS).map(status => ({\n    value: status,\n    label: getStatusLabel(status),\n    color: getStatusColor(status),\n  }));\n};\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { formatRelativeTime } from \"../../../utils/dateUtils\";\nimport { getStatusColor } from \"../../../utils/statusUtils\";\nimport { getReminderSummary } from \"../../../utils/reminderUtils\";\nimport \"./Styles/TaskCard.css\";\n\nconst TaskCard = ({ theme, task, demoMode = false }) => {\n  const navigate = useNavigate();\n\n  const handleClick = () => {\n    if (!demoMode) {\n      navigate(`/tasks/${task.id}/edit`);\n    }\n  };\n\n  const stripColor = getStatusColor(task.status);\n  const reminderSummary = getReminderSummary(task.reminders);\n\n  return (\n    <div\n      className={`task-card ${theme === \"dark\" ? \"dark\" : \"\"}`}\n      onClick={handleClick}\n    >\n      <div className=\"task-strip\" style={{ backgroundColor: stripColor }}></div>\n\n      <div className=\"task-card-content\">\n        <i\n          className={`bi ${\n            task.status === \"completed\"\n              ? \"bi-check-circle\"\n              : task.status === \"in-progress\"\n              ? \"bi-hourglass\"\n              : \"bi-ban\"\n          } status-icon`}\n          style={{ color: stripColor }}\n        />\n\n        <h5 className=\"task-title\" style={{ color: stripColor }}>\n          {task.title}\n        </h5>\n        <p className=\"task-description\">{task.description}</p>\n\n        <div className=\"task-metadata\">\n          <div className=\"task-metadata-item\">\n            <strong>Created</strong>\n            <span>{formatRelativeTime(task.createdAt)}</span>\n          </div>\n          <div className=\"task-metadata-item\">\n            <strong>Deadline</strong>\n            <span>\n              {task.deadline\n                ? formatRelativeTime(task.deadline)\n                : \"No deadline set\"}\n            </span>\n          </div>\n        </div>\n\n        {reminderSummary && (\n          <div\n            className=\"reminder-indicator\"\n            title={`Reminders: ${reminderSummary}`}\n          >\n            <i className=\"bi bi-clock\"></i>\n            <small>{reminderSummary}</small>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TaskCard;\n","import { format } from \"date-fns\";\n\nexport const formatRelativeTime = (dateString) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now - date) / 1000);\n  const justNowThreshold = 60;\n  if (diffInSeconds < 0) {\n    const futureDiff = Math.abs(diffInSeconds);\n    if (futureDiff < justNowThreshold) return \"Just now\";\n    if (futureDiff < 60) return `in ${futureDiff} second${futureDiff !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 3600) return `in ${Math.ceil(futureDiff / 60)} minute${Math.ceil(futureDiff / 60) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 86400) return `in ${Math.ceil(futureDiff / 3600)} hour${Math.ceil(futureDiff / 3600) !== 1 ? \"s\" : \"\"}`;\n    if (futureDiff < 604800) return `in ${Math.ceil(futureDiff / 86400)} day${Math.ceil(futureDiff / 86400) !== 1 ? \"s\" : \"\"}`;\n    return format(date, \"MMM dd, yyyy\");\n  } else {\n    if (diffInSeconds < justNowThreshold) return \"Just now\";\n    if (diffInSeconds < 60) return `${diffInSeconds} second${diffInSeconds !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minute${Math.floor(diffInSeconds / 60) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hour${Math.floor(diffInSeconds / 3600) !== 1 ? \"s\" : \"\"} ago`;\n    if (diffInSeconds < 604800) {\n      const days = Math.floor(diffInSeconds / 86400);\n      return days === 1 ? \"Yesterday\" : `${days} days ago`;\n    }\n    return format(date, \"MMM dd, yyyy\");\n  }\n};\n\nexport const convertDateToWords = (dateString) => {\n  const [year, month, day] = dateString.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n  if (isNaN(date)) return \"Invalid Date\";\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return date.toLocaleString(\"en-US\", options);\n};\n\nexport const formatDateTimeLocal = (dateString) => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n};","// Application Constants\n// Centralized constants to avoid duplication across components\n\n// Reminder Intervals\nexport const REMINDER_INTERVALS = [\n  { value: 1, label: \"1 hr\" },\n  { value: 24, label: \"1 day\" },\n  { value: 168, label: \"1 week\" },\n];\n\n// Task Status Options\nexport const TASK_STATUS = {\n  NOT_STARTED: \"not-started\",\n  IN_PROGRESS: \"in-progress\",\n  COMPLETED: \"completed\",\n};\n\nexport const TASK_STATUS_LABELS = {\n  [TASK_STATUS.NOT_STARTED]: \"Not Started\",\n  [TASK_STATUS.IN_PROGRESS]: \"In Progress\",\n  [TASK_STATUS.COMPLETED]: \"Completed\",\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [TASK_STATUS.COMPLETED]: \"#007a00\",\n  [TASK_STATUS.IN_PROGRESS]: \"#daa520\",\n  [TASK_STATUS.NOT_STARTED]: \"#a00000\",\n};\n\n// LocalStorage Keys\nexport const STORAGE_KEYS = {\n  TOKEN: \"token\",\n  USER_INFO: \"userInfo\",\n  THEME: \"theme\",\n  AI_CHAT_MODE: \"ai_chat_mode\",\n  AI_CHAT_HISTORY: \"ai_chat_history\",\n};\n\n// Date/Time Constants\nexport const TIME_CONSTANTS = {\n  ONE_MINUTE_MS: 60 * 1000,\n  ONE_HOUR_MS: 60 * 60 * 1000,\n  ONE_DAY_MS: 24 * 60 * 60 * 1000,\n  TWO_DAYS_MS: 48 * 60 * 60 * 1000,\n  ONE_WEEK_MS: 7 * 24 * 60 * 60 * 1000,\n  ONE_HOUR_HOURS: 1,\n  ONE_DAY_HOURS: 24,\n  ONE_WEEK_HOURS: 168,\n};\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_URL || \"https://task-manager-sigma-ashen.vercel.app/api\",\n};\n\n// AI Chat Suggestion Prompts\nexport const AI_SUGGESTIONS = [\n  \"Schedule dentist appointment next Tuesday at 3pm\",\n  \"Plan weekend shopping with 1 day reminder\",\n  \"Prepare presentation for Monday with daily reminders\",\n];\n\n// Reminder Types\nexport const REMINDER_TYPES = {\n  ONE_TIME: \"one-time\",\n  DAILY: \"daily\",\n  WEEKLY: \"weekly\",\n};\n\n// Form Validation Messages\nexport const VALIDATION_MESSAGES = {\n  REQUIRED_FIELD: \"This field is required\",\n  INVALID_EMAIL: \"Please enter a valid email address\",\n  PASSWORD_MISMATCH: \"Passwords do not match\",\n  PASSWORD_TOO_SHORT: \"Password must be at least 8 characters\",\n  INVALID_PHONE: \"Please enter a valid phone number\",\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  LOGIN_FAILED: \"Login failed. Please try again.\",\n  REGISTRATION_FAILED: \"Registration failed. Please try again.\",\n  VERIFICATION_FAILED: \"Verification failed. Please try again.\",\n  PASSWORD_RESET_FAILED: \"Password reset failed. Please try again.\",\n  PASSWORD_CHANGE_FAILED: \"Failed to change password. Please try again.\",\n  PROFILE_UPDATE_FAILED: \"Failed to update profile. Please try again.\",\n  TASK_FETCH_FAILED: \"Failed to fetch tasks. Please try again.\",\n  TASK_CREATE_FAILED: \"Failed to create task. Please try again.\",\n  TASK_UPDATE_FAILED: \"Failed to update task. Please try again.\",\n  TASK_DELETE_FAILED: \"Failed to delete task. Please try again.\",\n  NETWORK_ERROR: \"Network error. Please check your connection.\",\n  GENERIC_ERROR: \"Something went wrong. Please try again.\",\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  LOGIN_SUCCESS: \"Login successful!\",\n  REGISTRATION_SUCCESS: \"Registration successful!\",\n  PASSWORD_RESET_SUCCESS: \"Password reset successful!\",\n  PASSWORD_CHANGE_SUCCESS: \"Password changed successfully!\",\n  PROFILE_UPDATE_SUCCESS: \"Profile updated successfully!\",\n  TASK_CREATE_SUCCESS: \"Task created successfully!\",\n  TASK_UPDATE_SUCCESS: \"Task updated successfully!\",\n  TASK_DELETE_SUCCESS: \"Task deleted successfully!\",\n};\n\n// Responsive Breakpoints\nexport const BREAKPOINTS = {\n  MOBILE: 720,\n  TABLET: 1024,\n  DESKTOP: 1025,\n};\n\n// Avatar Configuration\nexport const AVATAR_CONFIG = {\n  MAX_SIZE: 5 * 1024 * 1024, // 5MB\n  ALLOWED_TYPES: [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/gif\"],\n  SCALE_MIN: 1,\n  SCALE_MAX: 2,\n  CROP_SIZE: { width: 200, height: 200 },\n  QUALITY: 0.8,\n};\n\n// Drag and Drop Configuration\nexport const DND_CONFIG = {\n  ACTIVATION_CONSTRAINT: { distance: 10 },\n  TOUCH_DELAY: 200,\n  TOUCH_TOLERANCE: 5,\n};\n","import feature1 from \"../../assets/organize.jpg\";\nimport feature2 from \"../../assets/reminder3.jpeg\";\nimport feature3 from \"../../assets/switch.jpg\";\nimport feature4 from \"../../assets/priority.jpg\";\nimport feature0 from \"../../assets/ai.jpg\"\n\nexport const featuresData = [\n  {\n    title: \"AI-Powered Task Assistant\",\n    description:\n      \"Experience the future of task management with our intelligent AI assistant. Simply chat naturally about your tasks, and our AI will understand your intent, create tasks with appropriate deadlines, update existing tasks, or delete completed ones—all through conversational interactions.\",\n    image: feature0,\n    icon: \"bi bi-robot\",\n    demoType: \"ai-chat\",\n    highlights: [\n      \"Natural language processing\",\n      \"Quick task generation\",\n      \"Conversational updates\",\n      \"Smart deadline suggestions\"\n    ]\n  },\n  {\n    title: \"Organize Your Tasks\",\n    description:\n      \"Create, manage, and prioritize your tasks effortlessly with drag-and-drop functionality. Our intuitive interface makes task organization a breeze, helping you focus on what matters most.\",\n    image: feature1,\n    icon: \"bi bi-list-check\",\n    demoType: \"task-list\",\n    alt: \"Organize Your Tasks\",\n  },\n  {\n    title: \"Smart Reminders\",\n    description:\n      \"Never miss a deadline with customizable reminders and notifications. Set multiple reminders per task with flexible timing options—from minutes to days before your deadline. Stay on track with smart alerts that help you manage your time effectively.\",\n    image: feature2,\n    icon: \"bi bi-bell\",\n    demoType: \"reminders\",\n    alt: \"Set Reminders\",\n  },\n  {\n    title: \"Dark and Light Modes\",\n    description:\n      \"Customize your viewing experience with both dark and light modes. Our seamless theme switching makes it easy on your eyes no matter the time of day or your personal preferences.\",\n    image: feature3,\n    icon: \"bi bi-moon-stars\",\n    demoType: \"theme\",\n    alt: \"Dark and Light Modes\",\n  },\n  {\n    title: \"Task Prioritization\",\n    description:\n      \"Easily prioritize your tasks with our drag-and-drop interface. Reorder tasks instantly to adjust priorities on the fly and focus on what's most important.\",\n    image: feature4,\n    icon: \"bi bi-arrows-move\",\n    demoType: \"priority\",\n    alt: \"Task Prioritization\",\n  },\n];\n\nexport const benefitsData = [\n  {\n    icon: \"bi bi-robot\",\n    title: \"AI-Powered Intelligence\",\n    description:\n      \"Leverage cutting-edge AI technology to manage tasks through natural conversation. Our intelligent assistant understands context and creates tasks the way you think.\",\n  },\n  {\n    icon: \"bi bi-speedometer2\",\n    title: \"Fast & Reliable\",\n    description:\n      \"Experience lightning-fast performance and reliable task management tools that keep you productive.\",\n  },\n  {\n    icon: \"bi bi-shield-lock\",\n    title: \"Secure\",\n    description:\n      \"Your data is protected with enterprise-grade security measures and encryption protocols.\",\n  },\n  {\n    icon: \"bi bi-phone\",\n    title: \"Mobile Friendly\",\n    description:\n      \"Access your tasks anywhere, anytime with our responsive WhatsApp-like mobile interface.\",\n  },\n  {\n    icon: \"bi bi-envelope\",\n    title: \"Email Notifications\",\n    description:\n      \"Stay informed with email notifications about task updates, deadlines, and reminders directly in your inbox.\",\n  },\n  {\n    icon: \"bi bi-person\",\n    title: \"Profile Customization\",\n    description:\n      \"Customize your profile settings, manage account details, and personalize your task management experience.\",\n  },\n  {\n    icon: \"bi bi-list-check\",\n    title: \"Task Prioritization\",\n    description:\n      \"Easily prioritize your tasks with our intuitive drag-and-drop interface. Arrange your tasks by priority to ensure you're always focusing on what matters most.\",\n  },\n  {\n    icon: \"bi bi-chat-dots\",\n    title: \"Conversational Updates\",\n    description:\n      \"Update, modify, or delete tasks through natural conversation. Our AI remembers context and handles complex task management scenarios effortlessly.\",\n  },\n];\n\nexport const testimonialsData = [\n  {\n    quote:\n      \"The AI assistant is a game-changer! I can just tell it what I need to do, and it creates perfectly structured tasks with reminders. It's like having a personal productivity coach.\",\n    author: \"Sarah Chen\",\n    role: \"Product Manager\"\n  },\n  {\n    quote:\n      \"I've tried many task managers, but this one truly stands out with its conversational AI. Managing tasks feels natural now—no more clicking through endless menus!\",\n    author: \"Michael Torres\",\n    role: \"Freelance Designer\"\n  },\n  {\n    quote:\n      \"The reminders feature combined with AI suggestions is fantastic! It ensures I never miss important deadlines and keeps my day perfectly organized.\",\n    author: \"Emily Rodriguez\",\n    role: \"Marketing Director\"\n  },\n  {\n    quote:\n      \"The WhatsApp-like AI interface makes task management feel effortless. I can update tasks on the go with just a quick message. Absolutely brilliant!\",\n    author: \"David Kim\",\n    role: \"Software Engineer\"\n  },\n];\n\n// Demo conversation data\nexport const demoConversation = [\n  {\n    role: \"user\",\n    content: \"I need to prepare for a client meeting next Tuesday at 2 PM\",\n    timestamp: new Date(Date.now() - 3600000).toISOString()\n  },\n  {\n    role: \"assistant\",\n    content: \"I'll create a task for your client meeting preparation. Would you like me to add reminders?\",\n    timestamp: new Date(Date.now() - 3500000).toISOString()\n  },\n  {\n    role: \"user\",\n    content: \"Yes, remind me 1 day before and 1 hour before\",\n    timestamp: new Date(Date.now() - 3400000).toISOString()\n  },\n  {\n    role: \"assistant\",\n    content: \"Perfect! I've created the task 'Prepare for client meeting' with deadline Tuesday 2:00 PM and reminders set for 1 day and 1 hour before. ✅\",\n    timestamp: new Date(Date.now() - 3300000).toISOString()\n  }\n];\n\n// demo data (data.js)\nexport const demoTasks = [\n  {\n    id: 1,\n    title: \"Prepare for client meeting\",\n    description: \"Review presentation slides and prepare talking points\",\n    status: \"not-started\",\n    createdAt: new Date(Date.now() - 86400000 * 2).toISOString(), // added\n    deadline: new Date(Date.now() + 86400000 * 5).toISOString(),\n    reminders: [\n      { time: 1440, unit: \"minutes\" },\n      { time: 60, unit: \"minutes\" }\n    ]\n  },\n  {\n    id: 2,\n    title: \"Submit quarterly report\",\n    description: \"Finalize Q4 financial report and submit to management\",\n    status: \"in-progress\",\n    createdAt: new Date(Date.now() - 86400000 * 3).toISOString(), // added\n    deadline: new Date(Date.now() + 86400000 * 3).toISOString(),\n    reminders: [{ time: 1, unit: \"days\" }]\n  },\n  {\n    id: 3,\n    title: \"Team standup meeting\",\n    description: \"Daily sync with development team\",\n    status: \"not-started\",\n    createdAt: new Date(Date.now() - 86400000).toISOString(), // added\n    deadline: new Date(Date.now() + 86400000).toISOString(),\n    reminders: [{ time: 30, unit: \"minutes\" }]\n  }\n];\n","const FeaturesSection = ({ features, theme, featuresRef }) => (\n  <section className=\"lp-features\" id=\"features\" ref={featuresRef}>\n    <h1>Features</h1>\n    <div className=\"lp-features-container\">\n      {features.map((feature, index) => (\n        <div\n          key={feature.title}\n          className=\"lp-feature-item\"\n          style={{ flexDirection: index % 2 === 0 ? \"row\" : \"row-reverse\" }}\n        >\n          <div className=\"lp-feature-content\">\n            <h3>{feature.title}</h3>\n            <p>{feature.description}</p>\n          </div>\n          <div className=\"lp-feature-image\">\n            <a\n              href=\"http://www.freepik.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                style={{\n                  filter:\n                    theme === \"dark\" ? \"invert(1) grayscale(100%)\" : \"none\",\n                }}\n                src={feature.image}\n                alt={feature.alt}\n              />\n            </a>\n          </div>\n        </div>\n      ))}\n    </div>\n  </section>\n);\n\nexport default FeaturesSection;\n","const BenefitsSection = ({ benefits }) => (\n  <section className=\"lp-benefits\">\n    <h2>Why Choose Us?</h2>\n    <div className=\"lp-benefits-container\">\n      {benefits.map(benefit => (\n        <div key={benefit.title} className=\"lp-benefit\">\n          <i className={benefit.icon}></i>\n          <h4>{benefit.title}</h4>\n          <p>{benefit.description}</p>\n        </div>\n      ))}\n    </div>\n  </section>\n);\n\nexport default BenefitsSection;","const TestimonialsSection = ({ testimonials }) => (\n  <section className=\"lp-testimonials\">\n    <h2>What Our Users Say</h2>\n    <div className=\"lp-testimonials-container\">\n      {testimonials.map((testimonial, index) => (\n        <div key={index} className=\"lp-testimonial\">\n          {\" \"}\n          <p>\"{testimonial.quote}\"</p>\n        </div>\n      ))}\n    </div>\n  </section>\n);\n\nexport default TestimonialsSection;\n","import { useState, useEffect, useRef } from \"react\";\nimport { demoConversation, demoTasks } from \"./data\";\nimport TaskCard from \"../tasks/taskItem/TaskCard\";\nimport \"./Styles/DemoSection.css\";\n\nconst DemoSection = ({ theme }) => {\n  const [activeDemo, setActiveDemo] = useState(\"chat\");\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\n  const chatEndRef = useRef(null);\n  const messagesContainerRef = useRef(null);\n\n  // Reset chat when switching back\n  useEffect(() => {\n    if (activeDemo === \"chat\") {\n      setMessages([]);\n      setCurrentMessageIndex(0);\n      setIsTyping(false);\n    }\n  }, [activeDemo]);\n\n  // Message playback\n  useEffect(() => {\n    if (\n      activeDemo !== \"chat\" ||\n      currentMessageIndex >= demoConversation.length\n    ) {\n      return;\n    }\n\n    const message = demoConversation[currentMessageIndex];\n    const delay = currentMessageIndex === 0 ? 500 : 2000;\n\n    const timer = setTimeout(() => {\n      if (message.role === \"assistant\") {\n        setIsTyping(true);\n        setTimeout(() => {\n          setIsTyping(false);\n          setMessages((prev) => [...prev, message]);\n          setCurrentMessageIndex((prev) => prev + 1);\n        }, 1500);\n      } else {\n        setMessages((prev) => [...prev, message]);\n        setCurrentMessageIndex((prev) => prev + 1);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [activeDemo, currentMessageIndex]);\n\n  // Auto-scroll\n  useEffect(() => {\n    if (messages.length > 0 && messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTo({\n        top: messagesContainerRef.current.scrollHeight,\n        behavior: \"smooth\",\n      });\n    }\n  }, [messages.length, isTyping]);\n\n  const restartDemo = () => {\n    setMessages([]);\n    setCurrentMessageIndex(0);\n    setIsTyping(false);\n  };\n\n  const formatTime = (timestamp) =>\n    new Date(timestamp).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n\n  return (\n    <section className=\"lp-demo\">\n      <div className=\"lp-demo-header\">\n        <h2>See It In Action</h2>\n        <p>Experience how our AI-powered task manager works</p>\n      </div>\n\n      <div className=\"lp-demo-tabs\">\n        <button\n          className={`lp-demo-tab ${activeDemo === \"chat\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveDemo(\"chat\")}\n        >\n          <i className=\"bi bi-chat-dots\"></i>\n          AI Chat Mode\n        </button>\n        <button\n          className={`lp-demo-tab ${activeDemo === \"tasks\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveDemo(\"tasks\")}\n        >\n          <i className=\"bi bi-list-check\"></i>\n          Task Management\n        </button>\n      </div>\n\n      <div className=\"lp-demo-content\">\n        {/* -------------------- CHAT DEMO -------------------- */}\n        {activeDemo === \"chat\" ? (\n          <div className={`lp-demo-chat ${theme === \"dark\" ? \"dark\" : \"\"}`}>\n            <div className=\"lp-demo-chat-header\">\n              <div className=\"lp-demo-chat-title\">\n                <i className=\"bi bi-robot\"></i>\n                <span>AI Task Assistant</span>\n              </div>\n              <button className=\"lp-demo-restart\" onClick={restartDemo}>\n                <i className=\"bi bi-arrow-clockwise\"></i>\n              </button>\n            </div>\n\n            <div className=\"lp-demo-chat-messages\" ref={messagesContainerRef}>\n              {messages.length === 0 && !isTyping && (\n                <div className=\"lp-demo-empty\">\n                  <i className=\"bi bi-chat-heart\"></i>\n                  <p>Watch the AI assistant in action...</p>\n                </div>\n              )}\n\n              {messages.map((msg, index) => (\n                <div key={index} className={`lp-demo-message ${msg.role}`}>\n                  <div className=\"lp-demo-message-avatar\">\n                    {msg.role === \"user\" ? (\n                      <i className=\"bi bi-person-circle\"></i>\n                    ) : (\n                      <i className=\"bi bi-robot\"></i>\n                    )}\n                  </div>\n                  <div className=\"lp-demo-message-content\">\n                    <div className=\"lp-demo-message-text\">\n                      {msg.content}\n                      <div className=\"lp-demo-message-time\">\n                        {formatTime(msg.timestamp)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              {isTyping && (\n                <div className=\"lp-demo-message assistant\">\n                  <div className=\"lp-demo-message-avatar\">\n                    <i className=\"bi bi-robot\"></i>\n                  </div>\n                  <div className=\"lp-demo-message-content\">\n                    <div className=\"lp-demo-typing\">\n                      <span></span>\n                      <span></span>\n                      <span></span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div ref={chatEndRef} style={{ height: \"1px\" }} />\n            </div>\n\n            <div className=\"lp-demo-chat-input\">\n              <input type=\"text\" placeholder=\"Type your message...\" disabled />\n              <button disabled>\n                <i className=\"bi bi-send-fill\"></i>\n              </button>\n            </div>\n          </div>\n        ) : (\n          /* -------------------- TASK DEMO -------------------- */\n          <div className={`lp-demo-tasks ${theme === \"dark\" ? \"dark\" : \"\"}`}>\n            <div className=\"lp-demo-tasks-header\">\n              <h3>Your Tasks</h3>\n              <span className=\"lp-demo-task-count\">\n                {demoTasks.length} tasks\n              </span>\n            </div>\n\n            <div className=\"lp-demo-tasks-list\">\n              {demoTasks.map((task, index) => (\n                <div\n                  key={task.id}\n                  className=\"lp-demo-task-wrapper\"\n                  style={{ animationDelay: `${index * 0.1}s` }}\n                >\n                  {/* Reuse real TaskCard UI */}\n                  <TaskCard theme={theme} task={task} demoMode={true} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"lp-demo-features\">\n        <div className=\"lp-demo-feature\">\n          <i className=\"bi bi-lightning-charge\"></i>\n          <h4>Instant Task Creation</h4>\n          <p>Create tasks in seconds with natural language</p>\n        </div>\n        <div className=\"lp-demo-feature\">\n          <i className=\"bi bi-chat-quote\"></i>\n          <h4>Conversational Updates</h4>\n          <p>Update tasks through simple conversations</p>\n        </div>\n        <div className=\"lp-demo-feature\">\n          <i className=\"bi bi-bell-fill\"></i>\n          <h4>Smart Reminders</h4>\n          <p>Never miss a deadline with intelligent alerts</p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default DemoSection;\n","import  { useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Styles/LandingPage.css\";\nimport heroImage from \"../../assets/hero1.jpg\";\nimport { featuresData, benefitsData, testimonialsData } from \"./data\";\nimport FeaturesSection from \"./FeaturesSection\";\nimport BenefitsSection from \"./BenefitsSection\";\nimport TestimonialsSection from \"./TestimonialsSection\";\nimport DemoSection from \"./DemoSection\"; // ✨ Added Demo Section\n\nconst LandingPage = ({ theme }) => {\n  const featuresRef = useRef(null);\n  const demoRef = useRef(null); // ✨ Added demo ref\n\n  // const scrollToFeatures = (e) => {\n  //   e.preventDefault();\n  //   featuresRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n  // };\n\n  // ✨ Added scroll to demo function\n  const scrollToDemo = (e) => {\n    e.preventDefault();\n    demoRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n  };\n\n  return (\n    <div className={`lp-container ${theme}`}>\n      {/* Hero Section - UNCHANGED */}\n      <section className=\"lp-hero\">\n        <div className=\"lp-hero-content\">\n          <h1>Your Ultimate Task Manager</h1>\n          <p>\n            Boost your productivity and stay organized with our intuitive task\n            management tools.\n          </p>\n          <div className=\"lp-cta-buttons\">\n            <Link to=\"/register\" className=\"lp-btn lp-btn-primary\">\n              Get Started\n            </Link>\n            {/* ✨ Changed to scroll to demo instead */}\n            <button\n              onClick={scrollToDemo}\n              className=\"lp-btn lp-btn-secondary\"\n            >\n              Watch Demo\n            </button>\n          </div>\n        </div>\n        <div className=\"lp-hero-image\">\n          <img\n            style={{\n              filter: theme === \"dark\" ? \"invert(1) grayscale(100%)\" : \"none\",\n            }}\n            src={heroImage}\n            alt=\"Task Manager Illustration\"\n          />\n        </div>\n      </section>\n\n      {/* ✨ NEW: Demo Section */}\n      <div ref={demoRef}>\n        <DemoSection theme={theme} />\n      </div>\n\n      {/* Features Section - UNCHANGED */}\n      <FeaturesSection\n        features={featuresData}\n        featuresRef={featuresRef}\n        theme={theme}\n      />\n\n      {/* Benefits Section - UNCHANGED */}\n      <BenefitsSection benefits={benefitsData} />\n\n      {/* Testimonials Section - UNCHANGED */}\n      <TestimonialsSection testimonials={testimonialsData} />\n\n      {/* CTA Section - UNCHANGED */}\n      <section className=\"lp-cta\">\n        <h2>Ready to Boost Your Productivity?</h2>\n        <Link to=\"/register\" className=\"lp-btn-secondary lp-btn\">\n          Sign Up Now\n        </Link>\n      </section>\n    </div>\n  );\n};\n\nexport default LandingPage;","import { REMINDER_INTERVALS, REMINDER_TYPES, TIME_CONSTANTS } from \"../constants/appConstants\";\n\n/**\n * Formats hours into human-readable label\n * @param {number} hours - Number of hours\n * @returns {string} - Formatted label (e.g., \"1 hr\", \"2 days\", \"1 week\")\n */\nexport const formatHoursLabel = (hours) => {\n  if (hours < 1) {\n    const minutes = Math.round(hours * 60);\n    return `${minutes} min${minutes !== 1 ? \"s\" : \"\"}`;\n  }\n\n  if (hours < TIME_CONSTANTS.ONE_DAY_HOURS) {\n    const formattedHours = hours % 1 === 0 ? hours : hours.toFixed(1);\n    return `${formattedHours} hr${hours !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const days = hours / TIME_CONSTANTS.ONE_DAY_HOURS;\n  if (days < 7) {\n    const formattedDays = days % 1 === 0 ? days : days.toFixed(1);\n    return `${formattedDays} day${days !== 1 ? \"s\" : \"\"}`;\n  }\n\n  const weeks = days / 7;\n  const formattedWeeks = weeks % 1 === 0 ? weeks : weeks.toFixed(1);\n  return `${formattedWeeks} week${weeks !== 1 ? \"s\" : \"\"}`;\n};\n\n/**\n * Normalize and calculate remindBefore for all reminders before saving\n * @param {Array} reminders - List of reminder objects\n * @param {string|Date} deadline - ISO string or Date for task deadline\n * @returns {Array} - Normalized reminders\n */\nexport const normalizeRemindersBeforeSave = (reminders, deadline) => {\n  if (!Array.isArray(reminders) || !deadline) return reminders;\n\n  const deadlineDate = new Date(deadline);\n\n  return reminders.map((r) => {\n    // Skip invalid dates or reminders with explicit remindBefore\n    if (r.remindBefore && !r.customDate) return r;\n\n    // If a customDate exists, calculate remindBefore dynamically\n    if (r.customDate) {\n      const customDate = new Date(r.customDate);\n      if (!isNaN(customDate.getTime()) && customDate < deadlineDate) {\n        const diffHours = (deadlineDate - customDate) / (1000 * 60 * 60);\n        return { ...r, remindBefore: diffHours };\n      }\n    }\n\n    // Fallback: keep as-is\n    return r;\n  });\n};\n\n/**\n * Gets reminder summary for display\n * @param {Array} reminders - Array of reminder objects\n * @returns {string} - Summary text (e.g., \"1 hr, 1 day before\")\n */\nexport const getReminderSummary = (reminders) => {\n  if (!reminders || reminders.length === 0) return \"\";\n\n  const oneTimeReminders = reminders.filter(\n    (r) => !r.type || r.type === REMINDER_TYPES.ONE_TIME\n  );\n\n  const hasDailyReminders = reminders.some((r) => r.type === REMINDER_TYPES.DAILY);\n  const hasWeeklyReminders = reminders.some((r) => r.type === REMINDER_TYPES.WEEKLY);\n\n  const parts = [];\n\n  // Add one-time reminders\n  if (oneTimeReminders.length > 0) {\n    const labels = oneTimeReminders\n      .map((r) => formatHoursLabel(r.remindBefore))\n      .join(\", \");\n    parts.push(labels);\n  }\n\n  // Add recurring reminders\n  if (hasDailyReminders) parts.push(\"Daily\");\n  if (hasWeeklyReminders) parts.push(\"Weekly\");\n\n  return parts.join(\", \");\n};\n\n/**\n * Regenerates recurring reminders (daily or weekly)\n * @param {Array} currentReminders - Current reminder array\n * @param {string} type - \"daily\" or \"weekly\"\n * @param {Date} deadlineDate - Deadline date\n * @param {Date} now - Current date\n * @returns {Array} - Updated reminders array\n */\nexport const regenerateRecurringReminders = (\n  currentReminders,\n  type,\n  deadlineDate,\n  now = new Date()\n) => {\n  // Remove existing reminders of this type\n  const filtered = currentReminders.filter((r) => r.type !== type);\n\n  const diffInHours = (deadlineDate - now) / (1000 * 60 * 60);\n\n  if (type === REMINDER_TYPES.DAILY) {\n    const days = Math.floor(diffInHours / TIME_CONSTANTS.ONE_DAY_HOURS);\n    if (days < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= days; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_DAY_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.DAILY,\n        dayNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  if (type === REMINDER_TYPES.WEEKLY) {\n    const weeks = Math.floor(diffInHours / TIME_CONSTANTS.ONE_WEEK_HOURS);\n    if (weeks < 1) return filtered;\n\n    const newReminders = [];\n    for (let i = 1; i <= weeks; i++) {\n      newReminders.push({\n        remindBefore: i * TIME_CONSTANTS.ONE_WEEK_HOURS,\n        sent: false,\n        type: REMINDER_TYPES.WEEKLY,\n        weekNumber: i,\n      });\n    }\n    return [...filtered, ...newReminders];\n  }\n\n  return currentReminders;\n};\n\n/**\n * Checks if a reminder is one-time (not daily/weekly)\n * @param {Object} reminder - Reminder object\n * @returns {boolean} - True if one-time\n */\nexport const isOneTimeReminder = (reminder) => {\n  return !reminder.type || reminder.type === REMINDER_TYPES.ONE_TIME;\n};\n\n/**\n * Gets count of active reminders\n * @param {Array} reminders - Array of reminder objects\n * @returns {number} - Count of active reminders\n */\nexport const getActiveReminderCount = (reminders) => {\n  if (!reminders || !Array.isArray(reminders)) return 0;\n  return reminders.filter((r) => !r.sent).length;\n};\n\n/**\n * Validates a custom reminder date\n * @param {string|Date} customDate - Custom reminder date\n * @param {string|Date} deadline - Task deadline\n * @returns {Object} - { valid: boolean, error: string }\n */\nexport const validateCustomReminder = (customDate, deadline) => {\n  if (!customDate) {\n    return { valid: false, error: \"Please select a reminder date\" };\n  }\n\n  const reminderDate = new Date(customDate);\n  const deadlineDate = new Date(deadline);\n  const now = new Date();\n\n  if (isNaN(reminderDate.getTime())) {\n    return { valid: false, error: \"Invalid reminder date\" };\n  }\n\n  if (reminderDate <= now) {\n    return { valid: false, error: \"Reminder must be in the future\" };\n  }\n\n  if (reminderDate >= deadlineDate) {\n    return { valid: false, error: \"Reminder must be before deadline\" };\n  }\n\n  return { valid: true, error: null };\n};\n\n/**\n * Gets reminder intervals for selection\n * @returns {Array} - Array of interval objects\n */\nexport const getReminderIntervals = () => {\n  return REMINDER_INTERVALS;\n};\n"],"names":["getStatusColor","status","STATUS_COLORS","TASK_STATUS","NOT_STARTED","_ref","theme","task","demoMode","navigate","useNavigate","stripColor","reminderSummary","getReminderSummary","reminders","_jsxs","className","concat","onClick","handleClick","id","children","_jsx","style","backgroundColor","color","title","description","formatRelativeTime","createdAt","deadline","dateString","date","Date","now","diffInSeconds","Math","floor","futureDiff","abs","ceil","format","days","convertDateToWords","year","month","day","split","map","Number","isNaN","toLocaleString","formatDateTimeLocal","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","REMINDER_INTERVALS","value","label","IN_PROGRESS","COMPLETED","STORAGE_KEYS","TOKEN","USER_INFO","THEME","AI_CHAT_MODE","AI_CHAT_HISTORY","TIME_CONSTANTS","ONE_MINUTE_MS","ONE_HOUR_MS","ONE_DAY_MS","TWO_DAYS_MS","ONE_WEEK_MS","ONE_HOUR_HOURS","ONE_DAY_HOURS","ONE_WEEK_HOURS","REMINDER_TYPES","ONE_TIME","DAILY","WEEKLY","VALIDATION_MESSAGES","REQUIRED_FIELD","INVALID_EMAIL","PASSWORD_MISMATCH","PASSWORD_TOO_SHORT","INVALID_PHONE","ERROR_MESSAGES","LOGIN_FAILED","REGISTRATION_FAILED","VERIFICATION_FAILED","PASSWORD_RESET_FAILED","PASSWORD_CHANGE_FAILED","PROFILE_UPDATE_FAILED","TASK_FETCH_FAILED","TASK_CREATE_FAILED","TASK_UPDATE_FAILED","TASK_DELETE_FAILED","NETWORK_ERROR","GENERIC_ERROR","featuresData","image","icon","demoType","highlights","feature1","alt","feature2","feature3","feature4","benefitsData","testimonialsData","quote","author","role","demoConversation","content","timestamp","toISOString","demoTasks","time","unit","features","featuresRef","ref","feature","index","flexDirection","href","target","rel","filter","src","benefits","benefit","testimonials","testimonial","activeDemo","setActiveDemo","useState","messages","setMessages","isTyping","setIsTyping","currentMessageIndex","setCurrentMessageIndex","chatEndRef","useRef","messagesContainerRef","useEffect","length","message","timer","setTimeout","prev","clearTimeout","current","scrollTo","top","scrollHeight","behavior","restartDemo","msg","toLocaleTimeString","hour","minute","height","type","placeholder","disabled","animationDelay","TaskCard","demoRef","Link","to","e","_demoRef$current","preventDefault","scrollIntoView","block","heroImage","DemoSection","FeaturesSection","BenefitsSection","TestimonialsSection","formatHoursLabel","round","formattedHours","toFixed","formattedDays","weeks","formattedWeeks","normalizeRemindersBeforeSave","Array","isArray","deadlineDate","r","remindBefore","customDate","getTime","diffHours","_objectSpread","oneTimeReminders","hasDailyReminders","some","hasWeeklyReminders","parts","labels","join","push"],"sourceRoot":""}